// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: goby_msgs.proto

#include "goby_msgs.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

class PoseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Pose>
      _instance;
} _Pose_default_instance_;
class HealthDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Health>
      _instance;
} _Health_default_instance_;
class RelativePoseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RelativePose>
      _instance;
} _RelativePose_default_instance_;
class ControllerInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ControllerInfo>
      _instance;
} _ControllerInfo_default_instance_;
class DirectControlDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DirectControl>
      _instance;
} _DirectControl_default_instance_;
class StateInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StateInfo>
      _instance;
} _StateInfo_default_instance_;
class SingleWaypointDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SingleWaypoint>
      _instance;
} _SingleWaypoint_default_instance_;
class MultiWaypointGPSDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MultiWaypointGPS>
      _instance;
} _MultiWaypointGPS_default_instance_;
class MultiWaypointXYZDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MultiWaypointXYZ>
      _instance;
} _MultiWaypointXYZ_default_instance_;
class ExecuteWaypointsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ExecuteWaypoints>
      _instance;
} _ExecuteWaypoints_default_instance_;
namespace protobuf_goby_5fmsgs_2eproto {
static void InitDefaultsPose() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Pose_default_instance_;
    new (ptr) ::Pose();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pose::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Pose =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPose}, {}};

static void InitDefaultsHealth() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Health_default_instance_;
    new (ptr) ::Health();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Health::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Health =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHealth}, {}};

static void InitDefaultsRelativePose() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RelativePose_default_instance_;
    new (ptr) ::RelativePose();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RelativePose::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RelativePose =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRelativePose}, {}};

static void InitDefaultsControllerInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ControllerInfo_default_instance_;
    new (ptr) ::ControllerInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ControllerInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ControllerInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsControllerInfo}, {}};

static void InitDefaultsDirectControl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DirectControl_default_instance_;
    new (ptr) ::DirectControl();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DirectControl::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DirectControl =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDirectControl}, {}};

static void InitDefaultsStateInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_StateInfo_default_instance_;
    new (ptr) ::StateInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::StateInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_StateInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsStateInfo}, {}};

static void InitDefaultsSingleWaypoint() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SingleWaypoint_default_instance_;
    new (ptr) ::SingleWaypoint();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SingleWaypoint::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SingleWaypoint =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSingleWaypoint}, {}};

static void InitDefaultsMultiWaypointGPS() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MultiWaypointGPS_default_instance_;
    new (ptr) ::MultiWaypointGPS();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MultiWaypointGPS::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MultiWaypointGPS =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMultiWaypointGPS}, {}};

static void InitDefaultsMultiWaypointXYZ() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MultiWaypointXYZ_default_instance_;
    new (ptr) ::MultiWaypointXYZ();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MultiWaypointXYZ::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MultiWaypointXYZ =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMultiWaypointXYZ}, {}};

static void InitDefaultsExecuteWaypoints() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ExecuteWaypoints_default_instance_;
    new (ptr) ::ExecuteWaypoints();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ExecuteWaypoints::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ExecuteWaypoints =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsExecuteWaypoints}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Pose.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Health.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RelativePose.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ControllerInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DirectControl.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StateInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SingleWaypoint.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MultiWaypointGPS.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MultiWaypointXYZ.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ExecuteWaypoints.base);
}

::google::protobuf::Metadata file_level_metadata[10];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[4];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pose, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pose, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pose, destination_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pose, cmd_resp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pose, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pose, latitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pose, longitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pose, local_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pose, local_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pose, local_z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pose, x_rot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pose, y_rot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pose, z_rot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pose, w_rot_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Health, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Health, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Health, destination_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Health, cmd_resp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Health, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Health, batt_volt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Health, current_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RelativePose, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RelativePose, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RelativePose, destination_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RelativePose, cmd_resp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RelativePose, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RelativePose, parent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RelativePose, child_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RelativePose, local_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RelativePose, local_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RelativePose, local_z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RelativePose, x_rot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RelativePose, y_rot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RelativePose, z_rot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RelativePose, w_rot_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ControllerInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ControllerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ControllerInfo, destination_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ControllerInfo, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ControllerInfo, setget_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ControllerInfo, state_),
  1,
  0,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DirectControl, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DirectControl, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DirectControl, destination_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DirectControl, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DirectControl, setget_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DirectControl, frame_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DirectControl, set_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DirectControl, set_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DirectControl, set_z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DirectControl, set_roll_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DirectControl, set_pitch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DirectControl, set_yaw_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DirectControl, set_u_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DirectControl, set_v_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DirectControl, set_w_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DirectControl, set_p_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DirectControl, set_q_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DirectControl, set_r_),
  1,
  0,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::StateInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::StateInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::StateInfo, destination_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::StateInfo, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::StateInfo, setget_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::StateInfo, state_),
  1,
  0,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SingleWaypoint, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SingleWaypoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SingleWaypoint, destination_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SingleWaypoint, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SingleWaypoint, setget_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SingleWaypoint, latitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SingleWaypoint, longitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SingleWaypoint, local_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SingleWaypoint, local_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SingleWaypoint, depth_),
  1,
  0,
  2,
  3,
  4,
  5,
  6,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MultiWaypointGPS, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MultiWaypointGPS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MultiWaypointGPS, destination_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MultiWaypointGPS, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MultiWaypointGPS, wpt_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MultiWaypointGPS, latitude_1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MultiWaypointGPS, longitude_1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MultiWaypointGPS, depth_1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MultiWaypointGPS, latitude_2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MultiWaypointGPS, longitude_2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MultiWaypointGPS, depth_2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MultiWaypointGPS, latitude_3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MultiWaypointGPS, longitude_3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MultiWaypointGPS, depth_3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MultiWaypointGPS, end_),
  1,
  0,
  2,
  3,
  4,
  6,
  5,
  8,
  7,
  9,
  10,
  11,
  12,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MultiWaypointXYZ, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MultiWaypointXYZ, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MultiWaypointXYZ, destination_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MultiWaypointXYZ, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MultiWaypointXYZ, wpt_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MultiWaypointXYZ, x_1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MultiWaypointXYZ, y_1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MultiWaypointXYZ, depth_1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MultiWaypointXYZ, x_2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MultiWaypointXYZ, y_2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MultiWaypointXYZ, depth_2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MultiWaypointXYZ, x_3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MultiWaypointXYZ, y_3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MultiWaypointXYZ, depth_3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MultiWaypointXYZ, end_),
  1,
  0,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ExecuteWaypoints, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ExecuteWaypoints, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ExecuteWaypoints, destination_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ExecuteWaypoints, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ExecuteWaypoints, execute_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ExecuteWaypoints, mode_),
  1,
  0,
  2,
  3,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 17, sizeof(::Pose)},
  { 29, 39, sizeof(::Health)},
  { 44, 61, sizeof(::RelativePose)},
  { 73, 82, sizeof(::ControllerInfo)},
  { 86, 107, sizeof(::DirectControl)},
  { 123, 132, sizeof(::StateInfo)},
  { 136, 149, sizeof(::SingleWaypoint)},
  { 157, 175, sizeof(::MultiWaypointGPS)},
  { 188, 206, sizeof(::MultiWaypointXYZ)},
  { 219, 228, sizeof(::ExecuteWaypoints)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_Pose_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_Health_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_RelativePose_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_ControllerInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_DirectControl_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_StateInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_SingleWaypoint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_MultiWaypointGPS_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_MultiWaypointXYZ_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_ExecuteWaypoints_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "goby_msgs.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 10);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\017goby_msgs.proto\032\034dccl/option_extension"
      "s.proto\"\265\004\n\004Pose\0222\n\013destination\030\001 \002(\005B\035\242"
      "\?\t1\000\000\000\000\000\000.@\242\?\t)\000\000\000\000\000\000\000\000\242\?\002 \000\022\020\n\010cmd_resp"
      "\030\002 \002(\010\022+\n\004time\030\003 \001(\001B\035\242\?\t)\000\000\000@3\354\330A\242\?\t1\000\000"
      "\000 \3666\334A\242\?\002 \003\022/\n\010latitude\030\004 \001(\001B\035\242\?\t)o\203\332o\355"
      ">D@\242\?\t1o\203\332o\355>E@\242\?\002 \006\0220\n\tlongitude\030\005 \001(\001B"
      "\035\242\?\t)\346!S>\004\033R\300\242\?\t1\346!S>\004\233Q\300\242\?\002 \006\022.\n\007local_"
      "x\030\006 \001(\005B\035\242\?\t1\000\000\000\000\000\210\303@\242\?\t)\000\000\000\000\000\210\303\300\242\?\002 \002\022."
      "\n\007local_y\030\007 \001(\005B\035\242\?\t1\000\000\000\000\000\210\303@\242\?\t)\000\000\000\000\000\210\303"
      "\300\242\?\002 \002\022.\n\007local_z\030\010 \001(\005B\035\242\?\t1\000\000\000\000\000\210\303@\242\?\t"
      ")\000\000\000\000\000\210\303\300\242\?\002 \002\022,\n\005x_rot\030\t \001(\002B\035\242\?\t1\000\000\000\000\000"
      "\000\360\?\242\?\t)\000\000\000\000\000\000\360\277\242\?\002 \004\022,\n\005y_rot\030\n \001(\002B\035\242\?\t"
      "1\000\000\000\000\000\000\360\?\242\?\t)\000\000\000\000\000\000\360\277\242\?\002 \004\022,\n\005z_rot\030\013 \001("
      "\002B\035\242\?\t1\000\000\000\000\000\000\360\?\242\?\t)\000\000\000\000\000\000\360\277\242\?\002 \004\022,\n\005w_ro"
      "t\030\014 \001(\002B\035\242\?\t1\000\000\000\000\000\000\360\?\242\?\t)\000\000\000\000\000\000\360\277\242\?\002 \004:\017"
      "\242\?\002(\004\242\?\002\010X\242\?\002\020\037\"\356\001\n\006Health\0222\n\013destinatio"
      "n\030\001 \002(\005B\035\242\?\t1\000\000\000\000\000\000\?@\242\?\t)\000\000\000\000\000\000\000\000\242\?\002 \000\022\020"
      "\n\010cmd_resp\030\002 \001(\010\022+\n\004time\030\003 \001(\001B\035\242\?\t)\000\000\000@"
      "3\354\330A\242\?\t1\000\000\000 \3666\334A\242\?\002 \003\0220\n\tbatt_volt\030\004 \001(\002"
      "B\035\242\?\t)\000\000\000\000\000\000(@\242\?\t1\000\000\000\000\000\0006@\242\?\002 \001\022.\n\007curre"
      "nt\030\005 \001(\002B\035\242\?\t)\000\000\000\000\000\000I\300\242\?\t1\000\000\000\000\000\000I@\242\?\002 \001:"
      "\017\242\?\002(\004\242\?\002\010Y\242\?\002\020\037\"\332\004\n\014RelativePose\0222\n\013des"
      "tination\030\001 \002(\005B\035\242\?\t1\000\000\000\000\000\000\?@\242\?\t)\000\000\000\000\000\000\000\000"
      "\242\?\002 \000\022\020\n\010cmd_resp\030\002 \002(\010\022+\n\004time\030\003 \001(\001B\035\242"
      "\?\t)\000\000\000@3\354\330A\242\?\t1\000\000\000 \3666\334A\242\?\002 \003\022#\n\006parent\030\004"
      " \001(\0162\023.RelativePose.Frame\022\"\n\005child\030\005 \001(\016"
      "2\023.RelativePose.Frame\022.\n\007local_x\030\006 \001(\002B\035"
      "\242\?\t1\000\000\000\000\000\210\303@\242\?\t)\000\000\000\000\000\210\303\300\242\?\002 \002\022.\n\007local_y"
      "\030\007 \001(\002B\035\242\?\t1\000\000\000\000\000\210\303@\242\?\t)\000\000\000\000\000\210\303\300\242\?\002 \002\022.\n"
      "\007local_z\030\010 \001(\002B\035\242\?\t1\000\000\000\000\000\210\303@\242\?\t)\000\000\000\000\000\210\303\300"
      "\242\?\002 \002\022,\n\005x_rot\030\t \001(\002B\035\242\?\t1\000\000\000\000\000\000\360\?\242\?\t)\000\000"
      "\000\000\000\000\360\277\242\?\002 \004\022,\n\005y_rot\030\n \001(\005B\035\242\?\t1\000\000\000\000\000\000\360\?"
      "\242\?\t)\000\000\000\000\000\000\360\277\242\?\002 \004\022,\n\005z_rot\030\013 \001(\005B\035\242\?\t1\000\000"
      "\000\000\000\000\360\?\242\?\t)\000\000\000\000\000\000\360\277\242\?\002 \004\022,\n\005w_rot\030\014 \001(\005B\035"
      "\242\?\t1\000\000\000\000\000\000\360\?\242\?\t)\000\000\000\000\000\000\360\277\242\?\002 \004\"5\n\005Frame\022\r"
      "\n\tBASE_LINK\020\000\022\010\n\004ODOM\020\001\022\t\n\005WORLD\020\002\022\010\n\004US"
      "BL\020\003:\017\242\?\002(\004\242\?\002\010Z\242\?\002\020\037\"\241\001\n\016ControllerInfo"
      "\0222\n\013destination\030\001 \002(\005B\035\242\?\t1\000\000\000\000\000\000\?@\242\?\t)\000"
      "\000\000\000\000\000\000\000\242\?\002 \000\022+\n\004time\030\002 \002(\001B\035\242\?\t)\000\000\000@3\354\330A"
      "\242\?\t1\000\000\000 \3666\334A\242\?\002 \003\022\016\n\006setget\030\003 \002(\010\022\r\n\005sta"
      "te\030\004 \001(\010:\017\242\?\002(\004\242\?\002\010[\242\?\002\020\037\"\236\006\n\rDirectCont"
      "rol\0222\n\013destination\030\001 \002(\005B\035\242\?\t1\000\000\000\000\000\000\?@\242\?"
      "\t)\000\000\000\000\000\000\000\000\242\?\002 \000\022+\n\004time\030\002 \002(\001B\035\242\?\t)\000\000\000@3"
      "\354\330A\242\?\t1\000\000\000 \3666\334A\242\?\002 \003\022\016\n\006setget\030\003 \002(\010\022#\n\005"
      "frame\030\004 \001(\0162\024.DirectControl.Frame\022,\n\005set"
      "_x\030\006 \001(\002B\035\242\?\t1\000\000\000\000\000\210\303@\242\?\t)\000\000\000\000\000\210\303\300\242\?\002 \002\022"
      ",\n\005set_y\030\007 \001(\002B\035\242\?\t1\000\000\000\000\000\210\303@\242\?\t)\000\000\000\000\000\210\303\300"
      "\242\?\002 \002\022,\n\005set_z\030\010 \001(\002B\035\242\?\t1\000\000\000\000\000\210\303@\242\?\t)\000\000"
      "\000\000\000\210\303\300\242\?\002 \002\022/\n\010set_roll\030\t \001(\002B\035\242\?\t1\037\205\353Q\270"
      "\036\371\?\242\?\t)\037\205\353Q\270\036\371\277\242\?\002 \002\0220\n\tset_pitch\030\n \001(\002B"
      "\035\242\?\t1\037\205\353Q\270\036\371\?\242\?\t)\037\205\353Q\270\036\371\277\242\?\002 \002\022.\n\007set_ya"
      "w\030\013 \001(\002B\035\242\?\t1\037\205\353Q\270\036\t@\242\?\t)\000\000\000\000\000\000\000\000\242\?\002 \002\022,"
      "\n\005set_u\030\014 \001(\002B\035\242\?\t1\000\000\000\000\000\000\000@\242\?\t)\000\000\000\000\000\000\000\300\242"
      "\?\002 \002\022,\n\005set_v\030\r \001(\002B\035\242\?\t1\000\000\000\000\000\000\000@\242\?\t)\000\000\000"
      "\000\000\000\000\300\242\?\002 \002\022,\n\005set_w\030\016 \001(\002B\035\242\?\t1\000\000\000\000\000\000\000@\242"
      "\?\t)\000\000\000\000\000\000\000\300\242\?\002 \002\022,\n\005set_p\030\017 \001(\002B\035\242\?\t1\000\000\000"
      "\000\000\000\000@\242\?\t)\000\000\000\000\000\000\000\300\242\?\002 \002\022,\n\005set_q\030\020 \001(\002B\035\242"
      "\?\t1\000\000\000\000\000\000\000@\242\?\t)\000\000\000\000\000\000\000\300\242\?\002 \002\022,\n\005set_r\030\021 "
      "\001(\002B\035\242\?\t1\000\000\000\000\000\000\000@\242\?\t)\000\000\000\000\000\000\000\300\242\?\002 \002\"5\n\005Fr"
      "ame\022\r\n\tBASE_LINK\020\000\022\010\n\004ODOM\020\001\022\t\n\005WORLD\020\002\022"
      "\010\n\004USBL\020\003:\017\242\?\002(\004\242\?\002\010\\\242\?\002\020\037\"\224\002\n\tStateInfo"
      "\0222\n\013destination\030\001 \002(\005B\035\242\?\t1\000\000\000\000\000\000\?@\242\?\t)\000"
      "\000\000\000\000\000\000\000\242\?\002 \000\022+\n\004time\030\002 \002(\001B\035\242\?\t)\000\000\000@3\354\330A"
      "\242\?\t1\000\000\000 \3666\334A\242\?\002 \003\022\016\n\006setget\030\003 \002(\010\022\037\n\005sta"
      "te\030\004 \001(\0162\020.StateInfo.State\"d\n\005State\022\010\n\004K"
      "ILL\020\000\022\t\n\005START\020\001\022\020\n\014SURVEY_LOCAL\020\002\022\021\n\rSU"
      "RVEY_GLOBAL\020\003\022\022\n\016DIRECT_CONTROL\020\004\022\r\n\tSUR"
      "VEY_3D\020\005:\017\242\?\002(\004\242\?\002\010]\242\?\002\020\037\"\203\003\n\016SingleWayp"
      "oint\0222\n\013destination\030\001 \002(\005B\035\242\?\t1\000\000\000\000\000\000\?@\242"
      "\?\t)\000\000\000\000\000\000\000\000\242\?\002 \000\022+\n\004time\030\002 \002(\001B\035\242\?\t)\000\000\000@"
      "3\354\330A\242\?\t1\000\000\000 \3666\334A\242\?\002 \003\022\016\n\006setget\030\003 \002(\010\022/\n"
      "\010latitude\030\004 \001(\001B\035\242\?\t)o\203\332o\355>D@\242\?\t1o\203\332o\355>E"
      "@\242\?\002 \006\0220\n\tlongitude\030\005 \001(\001B\035\242\?\t)\346!S>\004\033R\300\242"
      "\?\t1\346!S>\004\233Q\300\242\?\002 \006\022.\n\007local_x\030\006 \001(\005B\035\242\?\t1\000"
      "\000\000\000\000\210\303@\242\?\t)\000\000\000\000\000\210\303\300\242\?\002 \000\022.\n\007local_y\030\007 \001("
      "\005B\035\242\?\t1\000\000\000\000\000\210\303@\242\?\t)\000\000\000\000\000\210\303\300\242\?\002 \000\022,\n\005dept"
      "h\030\010 \002(\005B\035\242\?\t1\000\000\000\000\000\300r@\242\?\t)\000\000\000\000\000\000\000\000\242\?\002 \000:\017"
      "\242\?\002(\004\242\?\002\010^\242\?\002\020\037\"\206\005\n\020MultiWaypointGPS\0222\n\013"
      "destination\030\001 \002(\005B\035\242\?\t1\000\000\000\000\000\000\?@\242\?\t)\000\000\000\000\000"
      "\000\000\000\242\?\002 \000\022+\n\004time\030\002 \002(\001B\035\242\?\t)\000\000\000@3\354\330A\242\?\t1"
      "\000\000\000 \3666\334A\242\?\002 \003\022.\n\007wpt_num\030\003 \002(\005B\035\242\?\t)\000\000\000\000"
      "\000\000\000\000\242\?\t1\000\000\000\000\000\000@@\242\?\002 \000\0221\n\nlatitude_1\030\004 \001("
      "\001B\035\242\?\t)o\203\332o\355>D@\242\?\t1o\203\332o\355>E@\242\?\002 \006\0222\n\013long"
      "itude_1\030\005 \001(\001B\035\242\?\t)\346!S>\004\033R\300\242\?\t1\346!S>\004\233Q\300\242"
      "\?\002 \006\022.\n\007depth_1\030\006 \001(\005B\035\242\?\t1\000\000\000\000\000\300r@\242\?\t)\000"
      "\000\000\000\000\000\000\000\242\?\002 \000\0221\n\nlatitude_2\030\007 \001(\001B\035\242\?\t)o\203"
      "\332o\355>D@\242\?\t1o\203\332o\355>E@\242\?\002 \006\0222\n\013longitude_2\030\010"
      " \001(\001B\035\242\?\t)\346!S>\004\033R\300\242\?\t1\346!S>\004\233Q\300\242\?\002 \006\022.\n\007d"
      "epth_2\030\t \001(\005B\035\242\?\t1\000\000\000\000\000\300r@\242\?\t)\000\000\000\000\000\000\000\000\242\?"
      "\002 \000\0221\n\nlatitude_3\030\n \001(\001B\035\242\?\t)o\203\332o\355>D@\242\?\t"
      "1o\203\332o\355>E@\242\?\002 \006\0222\n\013longitude_3\030\013 \001(\001B\035\242\?\t"
      ")\346!S>\004\033R\300\242\?\t1\346!S>\004\233Q\300\242\?\002 \006\022.\n\007depth_3\030\014 "
      "\001(\005B\035\242\?\t1\000\000\000\000\000\300r@\242\?\t)\000\000\000\000\000\000\000\000\242\?\002 \000\022\013\n\003en"
      "d\030\r \002(\010:\017\242\?\002(\004\242\?\002\010_\242\?\002\020\037\"\331\004\n\020MultiWaypoi"
      "ntXYZ\0222\n\013destination\030\001 \002(\005B\035\242\?\t1\000\000\000\000\000\000\?@"
      "\242\?\t)\000\000\000\000\000\000\000\000\242\?\002 \000\022+\n\004time\030\002 \002(\001B\035\242\?\t)\000\000\000"
      "@3\354\330A\242\?\t1\000\000\000 \3666\334A\242\?\002 \003\022.\n\007wpt_num\030\003 \002(\005B"
      "\035\242\?\t)\000\000\000\000\000\000\000\000\242\?\t1\000\000\000\000\000\000@@\242\?\002 \000\022*\n\003x_1\030\004 "
      "\001(\005B\035\242\?\t1\000\000\000\000\000\210\303@\242\?\t)\000\000\000\000\000\210\303\300\242\?\002 \000\022*\n\003y_"
      "1\030\005 \001(\005B\035\242\?\t1\000\000\000\000\000\210\303@\242\?\t)\000\000\000\000\000\210\303\300\242\?\002 \000\022."
      "\n\007depth_1\030\006 \001(\005B\035\242\?\t1\000\000\000\000\000\300r@\242\?\t)\000\000\000\000\000\000\000"
      "\000\242\?\002 \000\022*\n\003x_2\030\007 \001(\005B\035\242\?\t1\000\000\000\000\000\210\303@\242\?\t)\000\000\000"
      "\000\000\210\303\300\242\?\002 \000\022*\n\003y_2\030\010 \001(\005B\035\242\?\t1\000\000\000\000\000\210\303@\242\?\t"
      ")\000\000\000\000\000\210\303\300\242\?\002 \000\022.\n\007depth_2\030\t \001(\005B\035\242\?\t1\000\000\000"
      "\000\000\300r@\242\?\t)\000\000\000\000\000\000\000\000\242\?\002 \000\022*\n\003x_3\030\n \001(\005B\035\242\?\t"
      "1\000\000\000\000\000\210\303@\242\?\t)\000\000\000\000\000\210\303\300\242\?\002 \000\022*\n\003y_3\030\013 \001(\005B"
      "\035\242\?\t1\000\000\000\000\000\210\303@\242\?\t)\000\000\000\000\000\210\303\300\242\?\002 \000\022.\n\007depth_"
      "3\030\014 \001(\005B\035\242\?\t1\000\000\000\000\000\300r@\242\?\t)\000\000\000\000\000\000\000\000\242\?\002 \000\022\013"
      "\n\003end\030\r \002(\010:\017\242\?\002(\004\242\?\002\010`\242\?\002\020\037\"\353\001\n\020Execute"
      "Waypoints\0222\n\013destination\030\001 \002(\005B\035\242\?\t1\000\000\000\000"
      "\000\000\?@\242\?\t)\000\000\000\000\000\000\000\000\242\?\002 \000\022+\n\004time\030\002 \002(\001B\035\242\?\t"
      ")\000\000\000@3\354\330A\242\?\t1\000\000\000 \3666\334A\242\?\002 \003\022\017\n\007execute\030\003 "
      "\002(\010\022,\n\004mode\030\004 \002(\0162\036.ExecuteWaypoints.Way"
      "pointMode\"&\n\014WaypointMode\022\n\n\006APPEND\020\000\022\n\n"
      "\006UPDATE\020\001:\017\242\?\002(\004\242\?\002\010a\242\?\002\020\037"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 4586);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "goby_msgs.proto", &protobuf_RegisterTypes);
  ::protobuf_dccl_2foption_5fextensions_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_goby_5fmsgs_2eproto
const ::google::protobuf::EnumDescriptor* RelativePose_Frame_descriptor() {
  protobuf_goby_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_goby_5fmsgs_2eproto::file_level_enum_descriptors[0];
}
bool RelativePose_Frame_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const RelativePose_Frame RelativePose::BASE_LINK;
const RelativePose_Frame RelativePose::ODOM;
const RelativePose_Frame RelativePose::WORLD;
const RelativePose_Frame RelativePose::USBL;
const RelativePose_Frame RelativePose::Frame_MIN;
const RelativePose_Frame RelativePose::Frame_MAX;
const int RelativePose::Frame_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* DirectControl_Frame_descriptor() {
  protobuf_goby_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_goby_5fmsgs_2eproto::file_level_enum_descriptors[1];
}
bool DirectControl_Frame_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DirectControl_Frame DirectControl::BASE_LINK;
const DirectControl_Frame DirectControl::ODOM;
const DirectControl_Frame DirectControl::WORLD;
const DirectControl_Frame DirectControl::USBL;
const DirectControl_Frame DirectControl::Frame_MIN;
const DirectControl_Frame DirectControl::Frame_MAX;
const int DirectControl::Frame_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* StateInfo_State_descriptor() {
  protobuf_goby_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_goby_5fmsgs_2eproto::file_level_enum_descriptors[2];
}
bool StateInfo_State_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const StateInfo_State StateInfo::KILL;
const StateInfo_State StateInfo::START;
const StateInfo_State StateInfo::SURVEY_LOCAL;
const StateInfo_State StateInfo::SURVEY_GLOBAL;
const StateInfo_State StateInfo::DIRECT_CONTROL;
const StateInfo_State StateInfo::SURVEY_3D;
const StateInfo_State StateInfo::State_MIN;
const StateInfo_State StateInfo::State_MAX;
const int StateInfo::State_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ExecuteWaypoints_WaypointMode_descriptor() {
  protobuf_goby_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_goby_5fmsgs_2eproto::file_level_enum_descriptors[3];
}
bool ExecuteWaypoints_WaypointMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ExecuteWaypoints_WaypointMode ExecuteWaypoints::APPEND;
const ExecuteWaypoints_WaypointMode ExecuteWaypoints::UPDATE;
const ExecuteWaypoints_WaypointMode ExecuteWaypoints::WaypointMode_MIN;
const ExecuteWaypoints_WaypointMode ExecuteWaypoints::WaypointMode_MAX;
const int ExecuteWaypoints::WaypointMode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void Pose::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Pose::kDestinationFieldNumber;
const int Pose::kCmdRespFieldNumber;
const int Pose::kTimeFieldNumber;
const int Pose::kLatitudeFieldNumber;
const int Pose::kLongitudeFieldNumber;
const int Pose::kLocalXFieldNumber;
const int Pose::kLocalYFieldNumber;
const int Pose::kLocalZFieldNumber;
const int Pose::kXRotFieldNumber;
const int Pose::kYRotFieldNumber;
const int Pose::kZRotFieldNumber;
const int Pose::kWRotFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Pose::Pose()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_goby_5fmsgs_2eproto::scc_info_Pose.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pose)
}
Pose::Pose(const Pose& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&destination_, &from.destination_,
    static_cast<size_t>(reinterpret_cast<char*>(&w_rot_) -
    reinterpret_cast<char*>(&destination_)) + sizeof(w_rot_));
  // @@protoc_insertion_point(copy_constructor:Pose)
}

void Pose::SharedCtor() {
  ::memset(&destination_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&w_rot_) -
      reinterpret_cast<char*>(&destination_)) + sizeof(w_rot_));
}

Pose::~Pose() {
  // @@protoc_insertion_point(destructor:Pose)
  SharedDtor();
}

void Pose::SharedDtor() {
}

void Pose::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Pose::descriptor() {
  ::protobuf_goby_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goby_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Pose& Pose::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_goby_5fmsgs_2eproto::scc_info_Pose.base);
  return *internal_default_instance();
}


void Pose::Clear() {
// @@protoc_insertion_point(message_clear_start:Pose)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&destination_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&local_z_) -
        reinterpret_cast<char*>(&destination_)) + sizeof(local_z_));
  }
  if (cached_has_bits & 3840u) {
    ::memset(&x_rot_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&w_rot_) -
        reinterpret_cast<char*>(&x_rot_)) + sizeof(w_rot_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Pose::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pose)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 destination = 1 [(.dccl.field) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_destination();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &destination_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool cmd_resp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_cmd_resp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cmd_resp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double time = 3 [(.dccl.field) = {
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double latitude = 4 [(.dccl.field) = {
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_latitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double longitude = 5 [(.dccl.field) = {
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_longitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 local_x = 6 [(.dccl.field) = {
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_local_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &local_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 local_y = 7 [(.dccl.field) = {
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_local_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &local_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 local_z = 8 [(.dccl.field) = {
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_local_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &local_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float x_rot = 9 [(.dccl.field) = {
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {
          set_has_x_rot();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_rot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float y_rot = 10 [(.dccl.field) = {
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {
          set_has_y_rot();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_rot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float z_rot = 11 [(.dccl.field) = {
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u /* 93 & 0xFF */)) {
          set_has_z_rot();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_rot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float w_rot = 12 [(.dccl.field) = {
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u /* 101 & 0xFF */)) {
          set_has_w_rot();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &w_rot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pose)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pose)
  return false;
#undef DO_
}

void Pose::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pose)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 destination = 1 [(.dccl.field) = {
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->destination(), output);
  }

  // required bool cmd_resp = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->cmd_resp(), output);
  }

  // optional double time = 3 [(.dccl.field) = {
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->time(), output);
  }

  // optional double latitude = 4 [(.dccl.field) = {
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->latitude(), output);
  }

  // optional double longitude = 5 [(.dccl.field) = {
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->longitude(), output);
  }

  // optional int32 local_x = 6 [(.dccl.field) = {
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->local_x(), output);
  }

  // optional int32 local_y = 7 [(.dccl.field) = {
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->local_y(), output);
  }

  // optional int32 local_z = 8 [(.dccl.field) = {
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->local_z(), output);
  }

  // optional float x_rot = 9 [(.dccl.field) = {
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->x_rot(), output);
  }

  // optional float y_rot = 10 [(.dccl.field) = {
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->y_rot(), output);
  }

  // optional float z_rot = 11 [(.dccl.field) = {
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->z_rot(), output);
  }

  // optional float w_rot = 12 [(.dccl.field) = {
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->w_rot(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pose)
}

::google::protobuf::uint8* Pose::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Pose)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 destination = 1 [(.dccl.field) = {
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->destination(), target);
  }

  // required bool cmd_resp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->cmd_resp(), target);
  }

  // optional double time = 3 [(.dccl.field) = {
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->time(), target);
  }

  // optional double latitude = 4 [(.dccl.field) = {
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->latitude(), target);
  }

  // optional double longitude = 5 [(.dccl.field) = {
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->longitude(), target);
  }

  // optional int32 local_x = 6 [(.dccl.field) = {
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->local_x(), target);
  }

  // optional int32 local_y = 7 [(.dccl.field) = {
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->local_y(), target);
  }

  // optional int32 local_z = 8 [(.dccl.field) = {
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->local_z(), target);
  }

  // optional float x_rot = 9 [(.dccl.field) = {
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->x_rot(), target);
  }

  // optional float y_rot = 10 [(.dccl.field) = {
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->y_rot(), target);
  }

  // optional float z_rot = 11 [(.dccl.field) = {
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->z_rot(), target);
  }

  // optional float w_rot = 12 [(.dccl.field) = {
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->w_rot(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pose)
  return target;
}

size_t Pose::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Pose)
  size_t total_size = 0;

  if (has_destination()) {
    // required int32 destination = 1 [(.dccl.field) = {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->destination());
  }

  if (has_cmd_resp()) {
    // required bool cmd_resp = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t Pose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pose)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 destination = 1 [(.dccl.field) = {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->destination());

    // required bool cmd_resp = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 252u) {
    // optional double time = 3 [(.dccl.field) = {
    if (has_time()) {
      total_size += 1 + 8;
    }

    // optional double latitude = 4 [(.dccl.field) = {
    if (has_latitude()) {
      total_size += 1 + 8;
    }

    // optional double longitude = 5 [(.dccl.field) = {
    if (has_longitude()) {
      total_size += 1 + 8;
    }

    // optional int32 local_x = 6 [(.dccl.field) = {
    if (has_local_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->local_x());
    }

    // optional int32 local_y = 7 [(.dccl.field) = {
    if (has_local_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->local_y());
    }

    // optional int32 local_z = 8 [(.dccl.field) = {
    if (has_local_z()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->local_z());
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional float x_rot = 9 [(.dccl.field) = {
    if (has_x_rot()) {
      total_size += 1 + 4;
    }

    // optional float y_rot = 10 [(.dccl.field) = {
    if (has_y_rot()) {
      total_size += 1 + 4;
    }

    // optional float z_rot = 11 [(.dccl.field) = {
    if (has_z_rot()) {
      total_size += 1 + 4;
    }

    // optional float w_rot = 12 [(.dccl.field) = {
    if (has_w_rot()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Pose::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pose)
  GOOGLE_DCHECK_NE(&from, this);
  const Pose* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Pose>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pose)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pose)
    MergeFrom(*source);
  }
}

void Pose::MergeFrom(const Pose& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pose)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      destination_ = from.destination_;
    }
    if (cached_has_bits & 0x00000002u) {
      cmd_resp_ = from.cmd_resp_;
    }
    if (cached_has_bits & 0x00000004u) {
      time_ = from.time_;
    }
    if (cached_has_bits & 0x00000008u) {
      latitude_ = from.latitude_;
    }
    if (cached_has_bits & 0x00000010u) {
      longitude_ = from.longitude_;
    }
    if (cached_has_bits & 0x00000020u) {
      local_x_ = from.local_x_;
    }
    if (cached_has_bits & 0x00000040u) {
      local_y_ = from.local_y_;
    }
    if (cached_has_bits & 0x00000080u) {
      local_z_ = from.local_z_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      x_rot_ = from.x_rot_;
    }
    if (cached_has_bits & 0x00000200u) {
      y_rot_ = from.y_rot_;
    }
    if (cached_has_bits & 0x00000400u) {
      z_rot_ = from.z_rot_;
    }
    if (cached_has_bits & 0x00000800u) {
      w_rot_ = from.w_rot_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Pose::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pose::CopyFrom(const Pose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pose::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void Pose::Swap(Pose* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Pose::InternalSwap(Pose* other) {
  using std::swap;
  swap(destination_, other->destination_);
  swap(cmd_resp_, other->cmd_resp_);
  swap(time_, other->time_);
  swap(latitude_, other->latitude_);
  swap(longitude_, other->longitude_);
  swap(local_x_, other->local_x_);
  swap(local_y_, other->local_y_);
  swap(local_z_, other->local_z_);
  swap(x_rot_, other->x_rot_);
  swap(y_rot_, other->y_rot_);
  swap(z_rot_, other->z_rot_);
  swap(w_rot_, other->w_rot_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Pose::GetMetadata() const {
  protobuf_goby_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goby_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Health::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Health::kDestinationFieldNumber;
const int Health::kCmdRespFieldNumber;
const int Health::kTimeFieldNumber;
const int Health::kBattVoltFieldNumber;
const int Health::kCurrentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Health::Health()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_goby_5fmsgs_2eproto::scc_info_Health.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Health)
}
Health::Health(const Health& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&destination_, &from.destination_,
    static_cast<size_t>(reinterpret_cast<char*>(&current_) -
    reinterpret_cast<char*>(&destination_)) + sizeof(current_));
  // @@protoc_insertion_point(copy_constructor:Health)
}

void Health::SharedCtor() {
  ::memset(&destination_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&current_) -
      reinterpret_cast<char*>(&destination_)) + sizeof(current_));
}

Health::~Health() {
  // @@protoc_insertion_point(destructor:Health)
  SharedDtor();
}

void Health::SharedDtor() {
}

void Health::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Health::descriptor() {
  ::protobuf_goby_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goby_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Health& Health::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_goby_5fmsgs_2eproto::scc_info_Health.base);
  return *internal_default_instance();
}


void Health::Clear() {
// @@protoc_insertion_point(message_clear_start:Health)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    ::memset(&destination_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&current_) -
        reinterpret_cast<char*>(&destination_)) + sizeof(current_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Health::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Health)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 destination = 1 [(.dccl.field) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_destination();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &destination_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool cmd_resp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_cmd_resp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cmd_resp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double time = 3 [(.dccl.field) = {
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float batt_volt = 4 [(.dccl.field) = {
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_batt_volt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &batt_volt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float current = 5 [(.dccl.field) = {
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_current();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &current_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Health)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Health)
  return false;
#undef DO_
}

void Health::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Health)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 destination = 1 [(.dccl.field) = {
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->destination(), output);
  }

  // optional bool cmd_resp = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->cmd_resp(), output);
  }

  // optional double time = 3 [(.dccl.field) = {
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->time(), output);
  }

  // optional float batt_volt = 4 [(.dccl.field) = {
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->batt_volt(), output);
  }

  // optional float current = 5 [(.dccl.field) = {
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->current(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Health)
}

::google::protobuf::uint8* Health::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Health)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 destination = 1 [(.dccl.field) = {
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->destination(), target);
  }

  // optional bool cmd_resp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->cmd_resp(), target);
  }

  // optional double time = 3 [(.dccl.field) = {
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->time(), target);
  }

  // optional float batt_volt = 4 [(.dccl.field) = {
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->batt_volt(), target);
  }

  // optional float current = 5 [(.dccl.field) = {
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->current(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Health)
  return target;
}

size_t Health::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Health)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 destination = 1 [(.dccl.field) = {
  if (has_destination()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->destination());
  }
  if (_has_bits_[0 / 32] & 30u) {
    // optional bool cmd_resp = 2;
    if (has_cmd_resp()) {
      total_size += 1 + 1;
    }

    // optional double time = 3 [(.dccl.field) = {
    if (has_time()) {
      total_size += 1 + 8;
    }

    // optional float batt_volt = 4 [(.dccl.field) = {
    if (has_batt_volt()) {
      total_size += 1 + 4;
    }

    // optional float current = 5 [(.dccl.field) = {
    if (has_current()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Health::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Health)
  GOOGLE_DCHECK_NE(&from, this);
  const Health* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Health>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Health)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Health)
    MergeFrom(*source);
  }
}

void Health::MergeFrom(const Health& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Health)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      destination_ = from.destination_;
    }
    if (cached_has_bits & 0x00000002u) {
      cmd_resp_ = from.cmd_resp_;
    }
    if (cached_has_bits & 0x00000004u) {
      time_ = from.time_;
    }
    if (cached_has_bits & 0x00000008u) {
      batt_volt_ = from.batt_volt_;
    }
    if (cached_has_bits & 0x00000010u) {
      current_ = from.current_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Health::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Health)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Health::CopyFrom(const Health& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Health)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Health::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void Health::Swap(Health* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Health::InternalSwap(Health* other) {
  using std::swap;
  swap(destination_, other->destination_);
  swap(cmd_resp_, other->cmd_resp_);
  swap(time_, other->time_);
  swap(batt_volt_, other->batt_volt_);
  swap(current_, other->current_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Health::GetMetadata() const {
  protobuf_goby_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goby_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RelativePose::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RelativePose::kDestinationFieldNumber;
const int RelativePose::kCmdRespFieldNumber;
const int RelativePose::kTimeFieldNumber;
const int RelativePose::kParentFieldNumber;
const int RelativePose::kChildFieldNumber;
const int RelativePose::kLocalXFieldNumber;
const int RelativePose::kLocalYFieldNumber;
const int RelativePose::kLocalZFieldNumber;
const int RelativePose::kXRotFieldNumber;
const int RelativePose::kYRotFieldNumber;
const int RelativePose::kZRotFieldNumber;
const int RelativePose::kWRotFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RelativePose::RelativePose()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_goby_5fmsgs_2eproto::scc_info_RelativePose.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:RelativePose)
}
RelativePose::RelativePose(const RelativePose& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&destination_, &from.destination_,
    static_cast<size_t>(reinterpret_cast<char*>(&w_rot_) -
    reinterpret_cast<char*>(&destination_)) + sizeof(w_rot_));
  // @@protoc_insertion_point(copy_constructor:RelativePose)
}

void RelativePose::SharedCtor() {
  ::memset(&destination_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&w_rot_) -
      reinterpret_cast<char*>(&destination_)) + sizeof(w_rot_));
}

RelativePose::~RelativePose() {
  // @@protoc_insertion_point(destructor:RelativePose)
  SharedDtor();
}

void RelativePose::SharedDtor() {
}

void RelativePose::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RelativePose::descriptor() {
  ::protobuf_goby_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goby_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RelativePose& RelativePose::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_goby_5fmsgs_2eproto::scc_info_RelativePose.base);
  return *internal_default_instance();
}


void RelativePose::Clear() {
// @@protoc_insertion_point(message_clear_start:RelativePose)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&destination_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&local_z_) -
        reinterpret_cast<char*>(&destination_)) + sizeof(local_z_));
  }
  if (cached_has_bits & 3840u) {
    ::memset(&x_rot_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&w_rot_) -
        reinterpret_cast<char*>(&x_rot_)) + sizeof(w_rot_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RelativePose::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RelativePose)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 destination = 1 [(.dccl.field) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_destination();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &destination_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool cmd_resp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_cmd_resp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cmd_resp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double time = 3 [(.dccl.field) = {
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .RelativePose.Frame parent = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::RelativePose_Frame_IsValid(value)) {
            set_parent(static_cast< ::RelativePose_Frame >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .RelativePose.Frame child = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::RelativePose_Frame_IsValid(value)) {
            set_child(static_cast< ::RelativePose_Frame >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float local_x = 6 [(.dccl.field) = {
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          set_has_local_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &local_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float local_y = 7 [(.dccl.field) = {
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {
          set_has_local_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &local_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float local_z = 8 [(.dccl.field) = {
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {
          set_has_local_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &local_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float x_rot = 9 [(.dccl.field) = {
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {
          set_has_x_rot();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_rot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 y_rot = 10 [(.dccl.field) = {
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_y_rot();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_rot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 z_rot = 11 [(.dccl.field) = {
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_z_rot();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &z_rot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 w_rot = 12 [(.dccl.field) = {
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_w_rot();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &w_rot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RelativePose)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RelativePose)
  return false;
#undef DO_
}

void RelativePose::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RelativePose)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 destination = 1 [(.dccl.field) = {
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->destination(), output);
  }

  // required bool cmd_resp = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->cmd_resp(), output);
  }

  // optional double time = 3 [(.dccl.field) = {
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->time(), output);
  }

  // optional .RelativePose.Frame parent = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->parent(), output);
  }

  // optional .RelativePose.Frame child = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->child(), output);
  }

  // optional float local_x = 6 [(.dccl.field) = {
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->local_x(), output);
  }

  // optional float local_y = 7 [(.dccl.field) = {
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->local_y(), output);
  }

  // optional float local_z = 8 [(.dccl.field) = {
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->local_z(), output);
  }

  // optional float x_rot = 9 [(.dccl.field) = {
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->x_rot(), output);
  }

  // optional int32 y_rot = 10 [(.dccl.field) = {
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->y_rot(), output);
  }

  // optional int32 z_rot = 11 [(.dccl.field) = {
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->z_rot(), output);
  }

  // optional int32 w_rot = 12 [(.dccl.field) = {
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->w_rot(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RelativePose)
}

::google::protobuf::uint8* RelativePose::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:RelativePose)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 destination = 1 [(.dccl.field) = {
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->destination(), target);
  }

  // required bool cmd_resp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->cmd_resp(), target);
  }

  // optional double time = 3 [(.dccl.field) = {
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->time(), target);
  }

  // optional .RelativePose.Frame parent = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->parent(), target);
  }

  // optional .RelativePose.Frame child = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->child(), target);
  }

  // optional float local_x = 6 [(.dccl.field) = {
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->local_x(), target);
  }

  // optional float local_y = 7 [(.dccl.field) = {
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->local_y(), target);
  }

  // optional float local_z = 8 [(.dccl.field) = {
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->local_z(), target);
  }

  // optional float x_rot = 9 [(.dccl.field) = {
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->x_rot(), target);
  }

  // optional int32 y_rot = 10 [(.dccl.field) = {
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->y_rot(), target);
  }

  // optional int32 z_rot = 11 [(.dccl.field) = {
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->z_rot(), target);
  }

  // optional int32 w_rot = 12 [(.dccl.field) = {
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->w_rot(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RelativePose)
  return target;
}

size_t RelativePose::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:RelativePose)
  size_t total_size = 0;

  if (has_destination()) {
    // required int32 destination = 1 [(.dccl.field) = {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->destination());
  }

  if (has_cmd_resp()) {
    // required bool cmd_resp = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t RelativePose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RelativePose)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 destination = 1 [(.dccl.field) = {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->destination());

    // required bool cmd_resp = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 252u) {
    // optional double time = 3 [(.dccl.field) = {
    if (has_time()) {
      total_size += 1 + 8;
    }

    // optional .RelativePose.Frame parent = 4;
    if (has_parent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->parent());
    }

    // optional .RelativePose.Frame child = 5;
    if (has_child()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->child());
    }

    // optional float local_x = 6 [(.dccl.field) = {
    if (has_local_x()) {
      total_size += 1 + 4;
    }

    // optional float local_y = 7 [(.dccl.field) = {
    if (has_local_y()) {
      total_size += 1 + 4;
    }

    // optional float local_z = 8 [(.dccl.field) = {
    if (has_local_z()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional float x_rot = 9 [(.dccl.field) = {
    if (has_x_rot()) {
      total_size += 1 + 4;
    }

    // optional int32 y_rot = 10 [(.dccl.field) = {
    if (has_y_rot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y_rot());
    }

    // optional int32 z_rot = 11 [(.dccl.field) = {
    if (has_z_rot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->z_rot());
    }

    // optional int32 w_rot = 12 [(.dccl.field) = {
    if (has_w_rot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->w_rot());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RelativePose::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RelativePose)
  GOOGLE_DCHECK_NE(&from, this);
  const RelativePose* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RelativePose>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RelativePose)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RelativePose)
    MergeFrom(*source);
  }
}

void RelativePose::MergeFrom(const RelativePose& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RelativePose)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      destination_ = from.destination_;
    }
    if (cached_has_bits & 0x00000002u) {
      cmd_resp_ = from.cmd_resp_;
    }
    if (cached_has_bits & 0x00000004u) {
      time_ = from.time_;
    }
    if (cached_has_bits & 0x00000008u) {
      parent_ = from.parent_;
    }
    if (cached_has_bits & 0x00000010u) {
      child_ = from.child_;
    }
    if (cached_has_bits & 0x00000020u) {
      local_x_ = from.local_x_;
    }
    if (cached_has_bits & 0x00000040u) {
      local_y_ = from.local_y_;
    }
    if (cached_has_bits & 0x00000080u) {
      local_z_ = from.local_z_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      x_rot_ = from.x_rot_;
    }
    if (cached_has_bits & 0x00000200u) {
      y_rot_ = from.y_rot_;
    }
    if (cached_has_bits & 0x00000400u) {
      z_rot_ = from.z_rot_;
    }
    if (cached_has_bits & 0x00000800u) {
      w_rot_ = from.w_rot_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RelativePose::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RelativePose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RelativePose::CopyFrom(const RelativePose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RelativePose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelativePose::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void RelativePose::Swap(RelativePose* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RelativePose::InternalSwap(RelativePose* other) {
  using std::swap;
  swap(destination_, other->destination_);
  swap(cmd_resp_, other->cmd_resp_);
  swap(time_, other->time_);
  swap(parent_, other->parent_);
  swap(child_, other->child_);
  swap(local_x_, other->local_x_);
  swap(local_y_, other->local_y_);
  swap(local_z_, other->local_z_);
  swap(x_rot_, other->x_rot_);
  swap(y_rot_, other->y_rot_);
  swap(z_rot_, other->z_rot_);
  swap(w_rot_, other->w_rot_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RelativePose::GetMetadata() const {
  protobuf_goby_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goby_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ControllerInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ControllerInfo::kDestinationFieldNumber;
const int ControllerInfo::kTimeFieldNumber;
const int ControllerInfo::kSetgetFieldNumber;
const int ControllerInfo::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ControllerInfo::ControllerInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_goby_5fmsgs_2eproto::scc_info_ControllerInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ControllerInfo)
}
ControllerInfo::ControllerInfo(const ControllerInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&time_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:ControllerInfo)
}

void ControllerInfo::SharedCtor() {
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&time_)) + sizeof(state_));
}

ControllerInfo::~ControllerInfo() {
  // @@protoc_insertion_point(destructor:ControllerInfo)
  SharedDtor();
}

void ControllerInfo::SharedDtor() {
}

void ControllerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ControllerInfo::descriptor() {
  ::protobuf_goby_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goby_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ControllerInfo& ControllerInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_goby_5fmsgs_2eproto::scc_info_ControllerInfo.base);
  return *internal_default_instance();
}


void ControllerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ControllerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&state_) -
        reinterpret_cast<char*>(&time_)) + sizeof(state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ControllerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ControllerInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 destination = 1 [(.dccl.field) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_destination();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &destination_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double time = 2 [(.dccl.field) = {
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool setget = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_setget();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &setget_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool state = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ControllerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ControllerInfo)
  return false;
#undef DO_
}

void ControllerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ControllerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 destination = 1 [(.dccl.field) = {
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->destination(), output);
  }

  // required double time = 2 [(.dccl.field) = {
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->time(), output);
  }

  // required bool setget = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->setget(), output);
  }

  // optional bool state = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->state(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ControllerInfo)
}

::google::protobuf::uint8* ControllerInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ControllerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 destination = 1 [(.dccl.field) = {
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->destination(), target);
  }

  // required double time = 2 [(.dccl.field) = {
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->time(), target);
  }

  // required bool setget = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->setget(), target);
  }

  // optional bool state = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->state(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ControllerInfo)
  return target;
}

size_t ControllerInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ControllerInfo)
  size_t total_size = 0;

  if (has_time()) {
    // required double time = 2 [(.dccl.field) = {
    total_size += 1 + 8;
  }

  if (has_destination()) {
    // required int32 destination = 1 [(.dccl.field) = {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->destination());
  }

  if (has_setget()) {
    // required bool setget = 3;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t ControllerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ControllerInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required double time = 2 [(.dccl.field) = {
    total_size += 1 + 8;

    // required int32 destination = 1 [(.dccl.field) = {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->destination());

    // required bool setget = 3;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional bool state = 4;
  if (has_state()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ControllerInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ControllerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ControllerInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ControllerInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ControllerInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ControllerInfo)
    MergeFrom(*source);
  }
}

void ControllerInfo::MergeFrom(const ControllerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ControllerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      time_ = from.time_;
    }
    if (cached_has_bits & 0x00000002u) {
      destination_ = from.destination_;
    }
    if (cached_has_bits & 0x00000004u) {
      setget_ = from.setget_;
    }
    if (cached_has_bits & 0x00000008u) {
      state_ = from.state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ControllerInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ControllerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControllerInfo::CopyFrom(const ControllerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ControllerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControllerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void ControllerInfo::Swap(ControllerInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ControllerInfo::InternalSwap(ControllerInfo* other) {
  using std::swap;
  swap(time_, other->time_);
  swap(destination_, other->destination_);
  swap(setget_, other->setget_);
  swap(state_, other->state_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ControllerInfo::GetMetadata() const {
  protobuf_goby_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goby_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DirectControl::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DirectControl::kDestinationFieldNumber;
const int DirectControl::kTimeFieldNumber;
const int DirectControl::kSetgetFieldNumber;
const int DirectControl::kFrameFieldNumber;
const int DirectControl::kSetXFieldNumber;
const int DirectControl::kSetYFieldNumber;
const int DirectControl::kSetZFieldNumber;
const int DirectControl::kSetRollFieldNumber;
const int DirectControl::kSetPitchFieldNumber;
const int DirectControl::kSetYawFieldNumber;
const int DirectControl::kSetUFieldNumber;
const int DirectControl::kSetVFieldNumber;
const int DirectControl::kSetWFieldNumber;
const int DirectControl::kSetPFieldNumber;
const int DirectControl::kSetQFieldNumber;
const int DirectControl::kSetRFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DirectControl::DirectControl()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_goby_5fmsgs_2eproto::scc_info_DirectControl.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DirectControl)
}
DirectControl::DirectControl(const DirectControl& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&set_r_) -
    reinterpret_cast<char*>(&time_)) + sizeof(set_r_));
  // @@protoc_insertion_point(copy_constructor:DirectControl)
}

void DirectControl::SharedCtor() {
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&set_r_) -
      reinterpret_cast<char*>(&time_)) + sizeof(set_r_));
}

DirectControl::~DirectControl() {
  // @@protoc_insertion_point(destructor:DirectControl)
  SharedDtor();
}

void DirectControl::SharedDtor() {
}

void DirectControl::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DirectControl::descriptor() {
  ::protobuf_goby_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goby_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DirectControl& DirectControl::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_goby_5fmsgs_2eproto::scc_info_DirectControl.base);
  return *internal_default_instance();
}


void DirectControl::Clear() {
// @@protoc_insertion_point(message_clear_start:DirectControl)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&set_roll_) -
        reinterpret_cast<char*>(&time_)) + sizeof(set_roll_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&set_pitch_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&set_r_) -
        reinterpret_cast<char*>(&set_pitch_)) + sizeof(set_r_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DirectControl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DirectControl)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 destination = 1 [(.dccl.field) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_destination();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &destination_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double time = 2 [(.dccl.field) = {
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool setget = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_setget();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &setget_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .DirectControl.Frame frame = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DirectControl_Frame_IsValid(value)) {
            set_frame(static_cast< ::DirectControl_Frame >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float set_x = 6 [(.dccl.field) = {
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          set_has_set_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &set_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float set_y = 7 [(.dccl.field) = {
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {
          set_has_set_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &set_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float set_z = 8 [(.dccl.field) = {
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {
          set_has_set_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &set_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float set_roll = 9 [(.dccl.field) = {
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {
          set_has_set_roll();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &set_roll_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float set_pitch = 10 [(.dccl.field) = {
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {
          set_has_set_pitch();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &set_pitch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float set_yaw = 11 [(.dccl.field) = {
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u /* 93 & 0xFF */)) {
          set_has_set_yaw();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &set_yaw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float set_u = 12 [(.dccl.field) = {
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u /* 101 & 0xFF */)) {
          set_has_set_u();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &set_u_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float set_v = 13 [(.dccl.field) = {
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(109u /* 109 & 0xFF */)) {
          set_has_set_v();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &set_v_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float set_w = 14 [(.dccl.field) = {
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(117u /* 117 & 0xFF */)) {
          set_has_set_w();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &set_w_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float set_p = 15 [(.dccl.field) = {
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(125u /* 125 & 0xFF */)) {
          set_has_set_p();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &set_p_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float set_q = 16 [(.dccl.field) = {
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(133u /* 133 & 0xFF */)) {
          set_has_set_q();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &set_q_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float set_r = 17 [(.dccl.field) = {
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(141u /* 141 & 0xFF */)) {
          set_has_set_r();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &set_r_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DirectControl)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DirectControl)
  return false;
#undef DO_
}

void DirectControl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DirectControl)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 destination = 1 [(.dccl.field) = {
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->destination(), output);
  }

  // required double time = 2 [(.dccl.field) = {
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->time(), output);
  }

  // required bool setget = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->setget(), output);
  }

  // optional .DirectControl.Frame frame = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->frame(), output);
  }

  // optional float set_x = 6 [(.dccl.field) = {
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->set_x(), output);
  }

  // optional float set_y = 7 [(.dccl.field) = {
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->set_y(), output);
  }

  // optional float set_z = 8 [(.dccl.field) = {
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->set_z(), output);
  }

  // optional float set_roll = 9 [(.dccl.field) = {
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->set_roll(), output);
  }

  // optional float set_pitch = 10 [(.dccl.field) = {
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->set_pitch(), output);
  }

  // optional float set_yaw = 11 [(.dccl.field) = {
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->set_yaw(), output);
  }

  // optional float set_u = 12 [(.dccl.field) = {
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->set_u(), output);
  }

  // optional float set_v = 13 [(.dccl.field) = {
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->set_v(), output);
  }

  // optional float set_w = 14 [(.dccl.field) = {
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->set_w(), output);
  }

  // optional float set_p = 15 [(.dccl.field) = {
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->set_p(), output);
  }

  // optional float set_q = 16 [(.dccl.field) = {
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->set_q(), output);
  }

  // optional float set_r = 17 [(.dccl.field) = {
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->set_r(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DirectControl)
}

::google::protobuf::uint8* DirectControl::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DirectControl)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 destination = 1 [(.dccl.field) = {
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->destination(), target);
  }

  // required double time = 2 [(.dccl.field) = {
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->time(), target);
  }

  // required bool setget = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->setget(), target);
  }

  // optional .DirectControl.Frame frame = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->frame(), target);
  }

  // optional float set_x = 6 [(.dccl.field) = {
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->set_x(), target);
  }

  // optional float set_y = 7 [(.dccl.field) = {
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->set_y(), target);
  }

  // optional float set_z = 8 [(.dccl.field) = {
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->set_z(), target);
  }

  // optional float set_roll = 9 [(.dccl.field) = {
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->set_roll(), target);
  }

  // optional float set_pitch = 10 [(.dccl.field) = {
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->set_pitch(), target);
  }

  // optional float set_yaw = 11 [(.dccl.field) = {
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->set_yaw(), target);
  }

  // optional float set_u = 12 [(.dccl.field) = {
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->set_u(), target);
  }

  // optional float set_v = 13 [(.dccl.field) = {
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->set_v(), target);
  }

  // optional float set_w = 14 [(.dccl.field) = {
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->set_w(), target);
  }

  // optional float set_p = 15 [(.dccl.field) = {
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->set_p(), target);
  }

  // optional float set_q = 16 [(.dccl.field) = {
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->set_q(), target);
  }

  // optional float set_r = 17 [(.dccl.field) = {
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->set_r(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DirectControl)
  return target;
}

size_t DirectControl::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:DirectControl)
  size_t total_size = 0;

  if (has_time()) {
    // required double time = 2 [(.dccl.field) = {
    total_size += 1 + 8;
  }

  if (has_destination()) {
    // required int32 destination = 1 [(.dccl.field) = {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->destination());
  }

  if (has_setget()) {
    // required bool setget = 3;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t DirectControl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DirectControl)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required double time = 2 [(.dccl.field) = {
    total_size += 1 + 8;

    // required int32 destination = 1 [(.dccl.field) = {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->destination());

    // required bool setget = 3;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 248u) {
    // optional .DirectControl.Frame frame = 4;
    if (has_frame()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->frame());
    }

    // optional float set_x = 6 [(.dccl.field) = {
    if (has_set_x()) {
      total_size += 1 + 4;
    }

    // optional float set_y = 7 [(.dccl.field) = {
    if (has_set_y()) {
      total_size += 1 + 4;
    }

    // optional float set_z = 8 [(.dccl.field) = {
    if (has_set_z()) {
      total_size += 1 + 4;
    }

    // optional float set_roll = 9 [(.dccl.field) = {
    if (has_set_roll()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional float set_pitch = 10 [(.dccl.field) = {
    if (has_set_pitch()) {
      total_size += 1 + 4;
    }

    // optional float set_yaw = 11 [(.dccl.field) = {
    if (has_set_yaw()) {
      total_size += 1 + 4;
    }

    // optional float set_u = 12 [(.dccl.field) = {
    if (has_set_u()) {
      total_size += 1 + 4;
    }

    // optional float set_v = 13 [(.dccl.field) = {
    if (has_set_v()) {
      total_size += 1 + 4;
    }

    // optional float set_w = 14 [(.dccl.field) = {
    if (has_set_w()) {
      total_size += 1 + 4;
    }

    // optional float set_p = 15 [(.dccl.field) = {
    if (has_set_p()) {
      total_size += 1 + 4;
    }

    // optional float set_q = 16 [(.dccl.field) = {
    if (has_set_q()) {
      total_size += 2 + 4;
    }

    // optional float set_r = 17 [(.dccl.field) = {
    if (has_set_r()) {
      total_size += 2 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DirectControl::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DirectControl)
  GOOGLE_DCHECK_NE(&from, this);
  const DirectControl* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DirectControl>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DirectControl)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DirectControl)
    MergeFrom(*source);
  }
}

void DirectControl::MergeFrom(const DirectControl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DirectControl)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      time_ = from.time_;
    }
    if (cached_has_bits & 0x00000002u) {
      destination_ = from.destination_;
    }
    if (cached_has_bits & 0x00000004u) {
      setget_ = from.setget_;
    }
    if (cached_has_bits & 0x00000008u) {
      frame_ = from.frame_;
    }
    if (cached_has_bits & 0x00000010u) {
      set_x_ = from.set_x_;
    }
    if (cached_has_bits & 0x00000020u) {
      set_y_ = from.set_y_;
    }
    if (cached_has_bits & 0x00000040u) {
      set_z_ = from.set_z_;
    }
    if (cached_has_bits & 0x00000080u) {
      set_roll_ = from.set_roll_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      set_pitch_ = from.set_pitch_;
    }
    if (cached_has_bits & 0x00000200u) {
      set_yaw_ = from.set_yaw_;
    }
    if (cached_has_bits & 0x00000400u) {
      set_u_ = from.set_u_;
    }
    if (cached_has_bits & 0x00000800u) {
      set_v_ = from.set_v_;
    }
    if (cached_has_bits & 0x00001000u) {
      set_w_ = from.set_w_;
    }
    if (cached_has_bits & 0x00002000u) {
      set_p_ = from.set_p_;
    }
    if (cached_has_bits & 0x00004000u) {
      set_q_ = from.set_q_;
    }
    if (cached_has_bits & 0x00008000u) {
      set_r_ = from.set_r_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DirectControl::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DirectControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DirectControl::CopyFrom(const DirectControl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DirectControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DirectControl::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void DirectControl::Swap(DirectControl* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DirectControl::InternalSwap(DirectControl* other) {
  using std::swap;
  swap(time_, other->time_);
  swap(destination_, other->destination_);
  swap(setget_, other->setget_);
  swap(frame_, other->frame_);
  swap(set_x_, other->set_x_);
  swap(set_y_, other->set_y_);
  swap(set_z_, other->set_z_);
  swap(set_roll_, other->set_roll_);
  swap(set_pitch_, other->set_pitch_);
  swap(set_yaw_, other->set_yaw_);
  swap(set_u_, other->set_u_);
  swap(set_v_, other->set_v_);
  swap(set_w_, other->set_w_);
  swap(set_p_, other->set_p_);
  swap(set_q_, other->set_q_);
  swap(set_r_, other->set_r_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DirectControl::GetMetadata() const {
  protobuf_goby_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goby_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StateInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StateInfo::kDestinationFieldNumber;
const int StateInfo::kTimeFieldNumber;
const int StateInfo::kSetgetFieldNumber;
const int StateInfo::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StateInfo::StateInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_goby_5fmsgs_2eproto::scc_info_StateInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:StateInfo)
}
StateInfo::StateInfo(const StateInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&time_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:StateInfo)
}

void StateInfo::SharedCtor() {
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&time_)) + sizeof(state_));
}

StateInfo::~StateInfo() {
  // @@protoc_insertion_point(destructor:StateInfo)
  SharedDtor();
}

void StateInfo::SharedDtor() {
}

void StateInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* StateInfo::descriptor() {
  ::protobuf_goby_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goby_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StateInfo& StateInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_goby_5fmsgs_2eproto::scc_info_StateInfo.base);
  return *internal_default_instance();
}


void StateInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:StateInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&state_) -
        reinterpret_cast<char*>(&time_)) + sizeof(state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StateInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:StateInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 destination = 1 [(.dccl.field) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_destination();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &destination_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double time = 2 [(.dccl.field) = {
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool setget = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_setget();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &setget_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .StateInfo.State state = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::StateInfo_State_IsValid(value)) {
            set_state(static_cast< ::StateInfo_State >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:StateInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:StateInfo)
  return false;
#undef DO_
}

void StateInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:StateInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 destination = 1 [(.dccl.field) = {
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->destination(), output);
  }

  // required double time = 2 [(.dccl.field) = {
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->time(), output);
  }

  // required bool setget = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->setget(), output);
  }

  // optional .StateInfo.State state = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->state(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:StateInfo)
}

::google::protobuf::uint8* StateInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:StateInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 destination = 1 [(.dccl.field) = {
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->destination(), target);
  }

  // required double time = 2 [(.dccl.field) = {
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->time(), target);
  }

  // required bool setget = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->setget(), target);
  }

  // optional .StateInfo.State state = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->state(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StateInfo)
  return target;
}

size_t StateInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:StateInfo)
  size_t total_size = 0;

  if (has_time()) {
    // required double time = 2 [(.dccl.field) = {
    total_size += 1 + 8;
  }

  if (has_destination()) {
    // required int32 destination = 1 [(.dccl.field) = {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->destination());
  }

  if (has_setget()) {
    // required bool setget = 3;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t StateInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StateInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required double time = 2 [(.dccl.field) = {
    total_size += 1 + 8;

    // required int32 destination = 1 [(.dccl.field) = {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->destination());

    // required bool setget = 3;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional .StateInfo.State state = 4;
  if (has_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StateInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:StateInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const StateInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StateInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:StateInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:StateInfo)
    MergeFrom(*source);
  }
}

void StateInfo::MergeFrom(const StateInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StateInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      time_ = from.time_;
    }
    if (cached_has_bits & 0x00000002u) {
      destination_ = from.destination_;
    }
    if (cached_has_bits & 0x00000004u) {
      setget_ = from.setget_;
    }
    if (cached_has_bits & 0x00000008u) {
      state_ = from.state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StateInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:StateInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StateInfo::CopyFrom(const StateInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StateInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StateInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void StateInfo::Swap(StateInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StateInfo::InternalSwap(StateInfo* other) {
  using std::swap;
  swap(time_, other->time_);
  swap(destination_, other->destination_);
  swap(setget_, other->setget_);
  swap(state_, other->state_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata StateInfo::GetMetadata() const {
  protobuf_goby_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goby_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SingleWaypoint::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SingleWaypoint::kDestinationFieldNumber;
const int SingleWaypoint::kTimeFieldNumber;
const int SingleWaypoint::kSetgetFieldNumber;
const int SingleWaypoint::kLatitudeFieldNumber;
const int SingleWaypoint::kLongitudeFieldNumber;
const int SingleWaypoint::kLocalXFieldNumber;
const int SingleWaypoint::kLocalYFieldNumber;
const int SingleWaypoint::kDepthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SingleWaypoint::SingleWaypoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_goby_5fmsgs_2eproto::scc_info_SingleWaypoint.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SingleWaypoint)
}
SingleWaypoint::SingleWaypoint(const SingleWaypoint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&depth_) -
    reinterpret_cast<char*>(&time_)) + sizeof(depth_));
  // @@protoc_insertion_point(copy_constructor:SingleWaypoint)
}

void SingleWaypoint::SharedCtor() {
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&depth_) -
      reinterpret_cast<char*>(&time_)) + sizeof(depth_));
}

SingleWaypoint::~SingleWaypoint() {
  // @@protoc_insertion_point(destructor:SingleWaypoint)
  SharedDtor();
}

void SingleWaypoint::SharedDtor() {
}

void SingleWaypoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SingleWaypoint::descriptor() {
  ::protobuf_goby_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goby_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SingleWaypoint& SingleWaypoint::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_goby_5fmsgs_2eproto::scc_info_SingleWaypoint.base);
  return *internal_default_instance();
}


void SingleWaypoint::Clear() {
// @@protoc_insertion_point(message_clear_start:SingleWaypoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&depth_) -
        reinterpret_cast<char*>(&time_)) + sizeof(depth_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SingleWaypoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SingleWaypoint)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 destination = 1 [(.dccl.field) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_destination();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &destination_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double time = 2 [(.dccl.field) = {
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool setget = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_setget();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &setget_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double latitude = 4 [(.dccl.field) = {
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_latitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double longitude = 5 [(.dccl.field) = {
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_longitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 local_x = 6 [(.dccl.field) = {
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_local_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &local_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 local_y = 7 [(.dccl.field) = {
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_local_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &local_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 depth = 8 [(.dccl.field) = {
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_depth();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &depth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SingleWaypoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SingleWaypoint)
  return false;
#undef DO_
}

void SingleWaypoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SingleWaypoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 destination = 1 [(.dccl.field) = {
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->destination(), output);
  }

  // required double time = 2 [(.dccl.field) = {
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->time(), output);
  }

  // required bool setget = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->setget(), output);
  }

  // optional double latitude = 4 [(.dccl.field) = {
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->latitude(), output);
  }

  // optional double longitude = 5 [(.dccl.field) = {
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->longitude(), output);
  }

  // optional int32 local_x = 6 [(.dccl.field) = {
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->local_x(), output);
  }

  // optional int32 local_y = 7 [(.dccl.field) = {
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->local_y(), output);
  }

  // required int32 depth = 8 [(.dccl.field) = {
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->depth(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SingleWaypoint)
}

::google::protobuf::uint8* SingleWaypoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SingleWaypoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 destination = 1 [(.dccl.field) = {
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->destination(), target);
  }

  // required double time = 2 [(.dccl.field) = {
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->time(), target);
  }

  // required bool setget = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->setget(), target);
  }

  // optional double latitude = 4 [(.dccl.field) = {
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->latitude(), target);
  }

  // optional double longitude = 5 [(.dccl.field) = {
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->longitude(), target);
  }

  // optional int32 local_x = 6 [(.dccl.field) = {
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->local_x(), target);
  }

  // optional int32 local_y = 7 [(.dccl.field) = {
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->local_y(), target);
  }

  // required int32 depth = 8 [(.dccl.field) = {
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->depth(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SingleWaypoint)
  return target;
}

size_t SingleWaypoint::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SingleWaypoint)
  size_t total_size = 0;

  if (has_time()) {
    // required double time = 2 [(.dccl.field) = {
    total_size += 1 + 8;
  }

  if (has_destination()) {
    // required int32 destination = 1 [(.dccl.field) = {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->destination());
  }

  if (has_setget()) {
    // required bool setget = 3;
    total_size += 1 + 1;
  }

  if (has_depth()) {
    // required int32 depth = 8 [(.dccl.field) = {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->depth());
  }

  return total_size;
}
size_t SingleWaypoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SingleWaypoint)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000087) ^ 0x00000087) == 0) {  // All required fields are present.
    // required double time = 2 [(.dccl.field) = {
    total_size += 1 + 8;

    // required int32 destination = 1 [(.dccl.field) = {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->destination());

    // required bool setget = 3;
    total_size += 1 + 1;

    // required int32 depth = 8 [(.dccl.field) = {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->depth());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 120u) {
    // optional double latitude = 4 [(.dccl.field) = {
    if (has_latitude()) {
      total_size += 1 + 8;
    }

    // optional double longitude = 5 [(.dccl.field) = {
    if (has_longitude()) {
      total_size += 1 + 8;
    }

    // optional int32 local_x = 6 [(.dccl.field) = {
    if (has_local_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->local_x());
    }

    // optional int32 local_y = 7 [(.dccl.field) = {
    if (has_local_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->local_y());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SingleWaypoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SingleWaypoint)
  GOOGLE_DCHECK_NE(&from, this);
  const SingleWaypoint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SingleWaypoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SingleWaypoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SingleWaypoint)
    MergeFrom(*source);
  }
}

void SingleWaypoint::MergeFrom(const SingleWaypoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SingleWaypoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      time_ = from.time_;
    }
    if (cached_has_bits & 0x00000002u) {
      destination_ = from.destination_;
    }
    if (cached_has_bits & 0x00000004u) {
      setget_ = from.setget_;
    }
    if (cached_has_bits & 0x00000008u) {
      latitude_ = from.latitude_;
    }
    if (cached_has_bits & 0x00000010u) {
      longitude_ = from.longitude_;
    }
    if (cached_has_bits & 0x00000020u) {
      local_x_ = from.local_x_;
    }
    if (cached_has_bits & 0x00000040u) {
      local_y_ = from.local_y_;
    }
    if (cached_has_bits & 0x00000080u) {
      depth_ = from.depth_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SingleWaypoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SingleWaypoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleWaypoint::CopyFrom(const SingleWaypoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SingleWaypoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleWaypoint::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000087) != 0x00000087) return false;
  return true;
}

void SingleWaypoint::Swap(SingleWaypoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SingleWaypoint::InternalSwap(SingleWaypoint* other) {
  using std::swap;
  swap(time_, other->time_);
  swap(destination_, other->destination_);
  swap(setget_, other->setget_);
  swap(latitude_, other->latitude_);
  swap(longitude_, other->longitude_);
  swap(local_x_, other->local_x_);
  swap(local_y_, other->local_y_);
  swap(depth_, other->depth_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SingleWaypoint::GetMetadata() const {
  protobuf_goby_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goby_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MultiWaypointGPS::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MultiWaypointGPS::kDestinationFieldNumber;
const int MultiWaypointGPS::kTimeFieldNumber;
const int MultiWaypointGPS::kWptNumFieldNumber;
const int MultiWaypointGPS::kLatitude1FieldNumber;
const int MultiWaypointGPS::kLongitude1FieldNumber;
const int MultiWaypointGPS::kDepth1FieldNumber;
const int MultiWaypointGPS::kLatitude2FieldNumber;
const int MultiWaypointGPS::kLongitude2FieldNumber;
const int MultiWaypointGPS::kDepth2FieldNumber;
const int MultiWaypointGPS::kLatitude3FieldNumber;
const int MultiWaypointGPS::kLongitude3FieldNumber;
const int MultiWaypointGPS::kDepth3FieldNumber;
const int MultiWaypointGPS::kEndFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MultiWaypointGPS::MultiWaypointGPS()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_goby_5fmsgs_2eproto::scc_info_MultiWaypointGPS.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MultiWaypointGPS)
}
MultiWaypointGPS::MultiWaypointGPS(const MultiWaypointGPS& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&time_)) + sizeof(end_));
  // @@protoc_insertion_point(copy_constructor:MultiWaypointGPS)
}

void MultiWaypointGPS::SharedCtor() {
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_) -
      reinterpret_cast<char*>(&time_)) + sizeof(end_));
}

MultiWaypointGPS::~MultiWaypointGPS() {
  // @@protoc_insertion_point(destructor:MultiWaypointGPS)
  SharedDtor();
}

void MultiWaypointGPS::SharedDtor() {
}

void MultiWaypointGPS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MultiWaypointGPS::descriptor() {
  ::protobuf_goby_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goby_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MultiWaypointGPS& MultiWaypointGPS::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_goby_5fmsgs_2eproto::scc_info_MultiWaypointGPS.base);
  return *internal_default_instance();
}


void MultiWaypointGPS::Clear() {
// @@protoc_insertion_point(message_clear_start:MultiWaypointGPS)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&depth_2_) -
        reinterpret_cast<char*>(&time_)) + sizeof(depth_2_));
  }
  if (cached_has_bits & 7936u) {
    ::memset(&longitude_2_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&end_) -
        reinterpret_cast<char*>(&longitude_2_)) + sizeof(end_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MultiWaypointGPS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MultiWaypointGPS)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 destination = 1 [(.dccl.field) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_destination();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &destination_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double time = 2 [(.dccl.field) = {
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 wpt_num = 3 [(.dccl.field) = {
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_wpt_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wpt_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double latitude_1 = 4 [(.dccl.field) = {
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_latitude_1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double longitude_1 = 5 [(.dccl.field) = {
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_longitude_1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 depth_1 = 6 [(.dccl.field) = {
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_depth_1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &depth_1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double latitude_2 = 7 [(.dccl.field) = {
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          set_has_latitude_2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double longitude_2 = 8 [(.dccl.field) = {
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {
          set_has_longitude_2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 depth_2 = 9 [(.dccl.field) = {
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_depth_2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &depth_2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double latitude_3 = 10 [(.dccl.field) = {
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {
          set_has_latitude_3();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double longitude_3 = 11 [(.dccl.field) = {
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {
          set_has_longitude_3();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 depth_3 = 12 [(.dccl.field) = {
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_depth_3();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &depth_3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool end = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_end();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MultiWaypointGPS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MultiWaypointGPS)
  return false;
#undef DO_
}

void MultiWaypointGPS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MultiWaypointGPS)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 destination = 1 [(.dccl.field) = {
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->destination(), output);
  }

  // required double time = 2 [(.dccl.field) = {
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->time(), output);
  }

  // required int32 wpt_num = 3 [(.dccl.field) = {
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->wpt_num(), output);
  }

  // optional double latitude_1 = 4 [(.dccl.field) = {
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->latitude_1(), output);
  }

  // optional double longitude_1 = 5 [(.dccl.field) = {
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->longitude_1(), output);
  }

  // optional int32 depth_1 = 6 [(.dccl.field) = {
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->depth_1(), output);
  }

  // optional double latitude_2 = 7 [(.dccl.field) = {
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->latitude_2(), output);
  }

  // optional double longitude_2 = 8 [(.dccl.field) = {
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->longitude_2(), output);
  }

  // optional int32 depth_2 = 9 [(.dccl.field) = {
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->depth_2(), output);
  }

  // optional double latitude_3 = 10 [(.dccl.field) = {
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->latitude_3(), output);
  }

  // optional double longitude_3 = 11 [(.dccl.field) = {
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->longitude_3(), output);
  }

  // optional int32 depth_3 = 12 [(.dccl.field) = {
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->depth_3(), output);
  }

  // required bool end = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->end(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MultiWaypointGPS)
}

::google::protobuf::uint8* MultiWaypointGPS::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MultiWaypointGPS)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 destination = 1 [(.dccl.field) = {
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->destination(), target);
  }

  // required double time = 2 [(.dccl.field) = {
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->time(), target);
  }

  // required int32 wpt_num = 3 [(.dccl.field) = {
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->wpt_num(), target);
  }

  // optional double latitude_1 = 4 [(.dccl.field) = {
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->latitude_1(), target);
  }

  // optional double longitude_1 = 5 [(.dccl.field) = {
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->longitude_1(), target);
  }

  // optional int32 depth_1 = 6 [(.dccl.field) = {
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->depth_1(), target);
  }

  // optional double latitude_2 = 7 [(.dccl.field) = {
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->latitude_2(), target);
  }

  // optional double longitude_2 = 8 [(.dccl.field) = {
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->longitude_2(), target);
  }

  // optional int32 depth_2 = 9 [(.dccl.field) = {
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->depth_2(), target);
  }

  // optional double latitude_3 = 10 [(.dccl.field) = {
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->latitude_3(), target);
  }

  // optional double longitude_3 = 11 [(.dccl.field) = {
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->longitude_3(), target);
  }

  // optional int32 depth_3 = 12 [(.dccl.field) = {
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->depth_3(), target);
  }

  // required bool end = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->end(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MultiWaypointGPS)
  return target;
}

size_t MultiWaypointGPS::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:MultiWaypointGPS)
  size_t total_size = 0;

  if (has_time()) {
    // required double time = 2 [(.dccl.field) = {
    total_size += 1 + 8;
  }

  if (has_destination()) {
    // required int32 destination = 1 [(.dccl.field) = {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->destination());
  }

  if (has_wpt_num()) {
    // required int32 wpt_num = 3 [(.dccl.field) = {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->wpt_num());
  }

  if (has_end()) {
    // required bool end = 13;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t MultiWaypointGPS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MultiWaypointGPS)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00001007) ^ 0x00001007) == 0) {  // All required fields are present.
    // required double time = 2 [(.dccl.field) = {
    total_size += 1 + 8;

    // required int32 destination = 1 [(.dccl.field) = {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->destination());

    // required int32 wpt_num = 3 [(.dccl.field) = {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->wpt_num());

    // required bool end = 13;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 248u) {
    // optional double latitude_1 = 4 [(.dccl.field) = {
    if (has_latitude_1()) {
      total_size += 1 + 8;
    }

    // optional double longitude_1 = 5 [(.dccl.field) = {
    if (has_longitude_1()) {
      total_size += 1 + 8;
    }

    // optional double latitude_2 = 7 [(.dccl.field) = {
    if (has_latitude_2()) {
      total_size += 1 + 8;
    }

    // optional int32 depth_1 = 6 [(.dccl.field) = {
    if (has_depth_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->depth_1());
    }

    // optional int32 depth_2 = 9 [(.dccl.field) = {
    if (has_depth_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->depth_2());
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional double longitude_2 = 8 [(.dccl.field) = {
    if (has_longitude_2()) {
      total_size += 1 + 8;
    }

    // optional double latitude_3 = 10 [(.dccl.field) = {
    if (has_latitude_3()) {
      total_size += 1 + 8;
    }

    // optional double longitude_3 = 11 [(.dccl.field) = {
    if (has_longitude_3()) {
      total_size += 1 + 8;
    }

    // optional int32 depth_3 = 12 [(.dccl.field) = {
    if (has_depth_3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->depth_3());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiWaypointGPS::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MultiWaypointGPS)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiWaypointGPS* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MultiWaypointGPS>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MultiWaypointGPS)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MultiWaypointGPS)
    MergeFrom(*source);
  }
}

void MultiWaypointGPS::MergeFrom(const MultiWaypointGPS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MultiWaypointGPS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      time_ = from.time_;
    }
    if (cached_has_bits & 0x00000002u) {
      destination_ = from.destination_;
    }
    if (cached_has_bits & 0x00000004u) {
      wpt_num_ = from.wpt_num_;
    }
    if (cached_has_bits & 0x00000008u) {
      latitude_1_ = from.latitude_1_;
    }
    if (cached_has_bits & 0x00000010u) {
      longitude_1_ = from.longitude_1_;
    }
    if (cached_has_bits & 0x00000020u) {
      latitude_2_ = from.latitude_2_;
    }
    if (cached_has_bits & 0x00000040u) {
      depth_1_ = from.depth_1_;
    }
    if (cached_has_bits & 0x00000080u) {
      depth_2_ = from.depth_2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 7936u) {
    if (cached_has_bits & 0x00000100u) {
      longitude_2_ = from.longitude_2_;
    }
    if (cached_has_bits & 0x00000200u) {
      latitude_3_ = from.latitude_3_;
    }
    if (cached_has_bits & 0x00000400u) {
      longitude_3_ = from.longitude_3_;
    }
    if (cached_has_bits & 0x00000800u) {
      depth_3_ = from.depth_3_;
    }
    if (cached_has_bits & 0x00001000u) {
      end_ = from.end_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MultiWaypointGPS::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MultiWaypointGPS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiWaypointGPS::CopyFrom(const MultiWaypointGPS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MultiWaypointGPS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiWaypointGPS::IsInitialized() const {
  if ((_has_bits_[0] & 0x00001007) != 0x00001007) return false;
  return true;
}

void MultiWaypointGPS::Swap(MultiWaypointGPS* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MultiWaypointGPS::InternalSwap(MultiWaypointGPS* other) {
  using std::swap;
  swap(time_, other->time_);
  swap(destination_, other->destination_);
  swap(wpt_num_, other->wpt_num_);
  swap(latitude_1_, other->latitude_1_);
  swap(longitude_1_, other->longitude_1_);
  swap(latitude_2_, other->latitude_2_);
  swap(depth_1_, other->depth_1_);
  swap(depth_2_, other->depth_2_);
  swap(longitude_2_, other->longitude_2_);
  swap(latitude_3_, other->latitude_3_);
  swap(longitude_3_, other->longitude_3_);
  swap(depth_3_, other->depth_3_);
  swap(end_, other->end_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MultiWaypointGPS::GetMetadata() const {
  protobuf_goby_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goby_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MultiWaypointXYZ::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MultiWaypointXYZ::kDestinationFieldNumber;
const int MultiWaypointXYZ::kTimeFieldNumber;
const int MultiWaypointXYZ::kWptNumFieldNumber;
const int MultiWaypointXYZ::kX1FieldNumber;
const int MultiWaypointXYZ::kY1FieldNumber;
const int MultiWaypointXYZ::kDepth1FieldNumber;
const int MultiWaypointXYZ::kX2FieldNumber;
const int MultiWaypointXYZ::kY2FieldNumber;
const int MultiWaypointXYZ::kDepth2FieldNumber;
const int MultiWaypointXYZ::kX3FieldNumber;
const int MultiWaypointXYZ::kY3FieldNumber;
const int MultiWaypointXYZ::kDepth3FieldNumber;
const int MultiWaypointXYZ::kEndFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MultiWaypointXYZ::MultiWaypointXYZ()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_goby_5fmsgs_2eproto::scc_info_MultiWaypointXYZ.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MultiWaypointXYZ)
}
MultiWaypointXYZ::MultiWaypointXYZ(const MultiWaypointXYZ& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&time_)) + sizeof(end_));
  // @@protoc_insertion_point(copy_constructor:MultiWaypointXYZ)
}

void MultiWaypointXYZ::SharedCtor() {
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_) -
      reinterpret_cast<char*>(&time_)) + sizeof(end_));
}

MultiWaypointXYZ::~MultiWaypointXYZ() {
  // @@protoc_insertion_point(destructor:MultiWaypointXYZ)
  SharedDtor();
}

void MultiWaypointXYZ::SharedDtor() {
}

void MultiWaypointXYZ::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MultiWaypointXYZ::descriptor() {
  ::protobuf_goby_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goby_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MultiWaypointXYZ& MultiWaypointXYZ::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_goby_5fmsgs_2eproto::scc_info_MultiWaypointXYZ.base);
  return *internal_default_instance();
}


void MultiWaypointXYZ::Clear() {
// @@protoc_insertion_point(message_clear_start:MultiWaypointXYZ)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&y_2_) -
        reinterpret_cast<char*>(&time_)) + sizeof(y_2_));
  }
  if (cached_has_bits & 7936u) {
    ::memset(&depth_2_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&end_) -
        reinterpret_cast<char*>(&depth_2_)) + sizeof(end_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MultiWaypointXYZ::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MultiWaypointXYZ)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 destination = 1 [(.dccl.field) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_destination();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &destination_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double time = 2 [(.dccl.field) = {
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 wpt_num = 3 [(.dccl.field) = {
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_wpt_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wpt_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 x_1 = 4 [(.dccl.field) = {
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_x_1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 y_1 = 5 [(.dccl.field) = {
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_y_1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 depth_1 = 6 [(.dccl.field) = {
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_depth_1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &depth_1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 x_2 = 7 [(.dccl.field) = {
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_x_2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 y_2 = 8 [(.dccl.field) = {
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_y_2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 depth_2 = 9 [(.dccl.field) = {
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_depth_2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &depth_2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 x_3 = 10 [(.dccl.field) = {
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_x_3();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 y_3 = 11 [(.dccl.field) = {
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_y_3();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 depth_3 = 12 [(.dccl.field) = {
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_depth_3();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &depth_3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool end = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_end();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MultiWaypointXYZ)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MultiWaypointXYZ)
  return false;
#undef DO_
}

void MultiWaypointXYZ::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MultiWaypointXYZ)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 destination = 1 [(.dccl.field) = {
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->destination(), output);
  }

  // required double time = 2 [(.dccl.field) = {
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->time(), output);
  }

  // required int32 wpt_num = 3 [(.dccl.field) = {
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->wpt_num(), output);
  }

  // optional int32 x_1 = 4 [(.dccl.field) = {
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->x_1(), output);
  }

  // optional int32 y_1 = 5 [(.dccl.field) = {
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->y_1(), output);
  }

  // optional int32 depth_1 = 6 [(.dccl.field) = {
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->depth_1(), output);
  }

  // optional int32 x_2 = 7 [(.dccl.field) = {
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->x_2(), output);
  }

  // optional int32 y_2 = 8 [(.dccl.field) = {
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->y_2(), output);
  }

  // optional int32 depth_2 = 9 [(.dccl.field) = {
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->depth_2(), output);
  }

  // optional int32 x_3 = 10 [(.dccl.field) = {
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->x_3(), output);
  }

  // optional int32 y_3 = 11 [(.dccl.field) = {
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->y_3(), output);
  }

  // optional int32 depth_3 = 12 [(.dccl.field) = {
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->depth_3(), output);
  }

  // required bool end = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->end(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MultiWaypointXYZ)
}

::google::protobuf::uint8* MultiWaypointXYZ::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MultiWaypointXYZ)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 destination = 1 [(.dccl.field) = {
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->destination(), target);
  }

  // required double time = 2 [(.dccl.field) = {
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->time(), target);
  }

  // required int32 wpt_num = 3 [(.dccl.field) = {
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->wpt_num(), target);
  }

  // optional int32 x_1 = 4 [(.dccl.field) = {
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->x_1(), target);
  }

  // optional int32 y_1 = 5 [(.dccl.field) = {
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->y_1(), target);
  }

  // optional int32 depth_1 = 6 [(.dccl.field) = {
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->depth_1(), target);
  }

  // optional int32 x_2 = 7 [(.dccl.field) = {
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->x_2(), target);
  }

  // optional int32 y_2 = 8 [(.dccl.field) = {
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->y_2(), target);
  }

  // optional int32 depth_2 = 9 [(.dccl.field) = {
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->depth_2(), target);
  }

  // optional int32 x_3 = 10 [(.dccl.field) = {
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->x_3(), target);
  }

  // optional int32 y_3 = 11 [(.dccl.field) = {
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->y_3(), target);
  }

  // optional int32 depth_3 = 12 [(.dccl.field) = {
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->depth_3(), target);
  }

  // required bool end = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->end(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MultiWaypointXYZ)
  return target;
}

size_t MultiWaypointXYZ::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:MultiWaypointXYZ)
  size_t total_size = 0;

  if (has_time()) {
    // required double time = 2 [(.dccl.field) = {
    total_size += 1 + 8;
  }

  if (has_destination()) {
    // required int32 destination = 1 [(.dccl.field) = {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->destination());
  }

  if (has_wpt_num()) {
    // required int32 wpt_num = 3 [(.dccl.field) = {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->wpt_num());
  }

  if (has_end()) {
    // required bool end = 13;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t MultiWaypointXYZ::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MultiWaypointXYZ)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00001007) ^ 0x00001007) == 0) {  // All required fields are present.
    // required double time = 2 [(.dccl.field) = {
    total_size += 1 + 8;

    // required int32 destination = 1 [(.dccl.field) = {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->destination());

    // required int32 wpt_num = 3 [(.dccl.field) = {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->wpt_num());

    // required bool end = 13;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 248u) {
    // optional int32 x_1 = 4 [(.dccl.field) = {
    if (has_x_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x_1());
    }

    // optional int32 y_1 = 5 [(.dccl.field) = {
    if (has_y_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y_1());
    }

    // optional int32 depth_1 = 6 [(.dccl.field) = {
    if (has_depth_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->depth_1());
    }

    // optional int32 x_2 = 7 [(.dccl.field) = {
    if (has_x_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x_2());
    }

    // optional int32 y_2 = 8 [(.dccl.field) = {
    if (has_y_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y_2());
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional int32 depth_2 = 9 [(.dccl.field) = {
    if (has_depth_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->depth_2());
    }

    // optional int32 x_3 = 10 [(.dccl.field) = {
    if (has_x_3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x_3());
    }

    // optional int32 y_3 = 11 [(.dccl.field) = {
    if (has_y_3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y_3());
    }

    // optional int32 depth_3 = 12 [(.dccl.field) = {
    if (has_depth_3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->depth_3());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiWaypointXYZ::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MultiWaypointXYZ)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiWaypointXYZ* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MultiWaypointXYZ>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MultiWaypointXYZ)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MultiWaypointXYZ)
    MergeFrom(*source);
  }
}

void MultiWaypointXYZ::MergeFrom(const MultiWaypointXYZ& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MultiWaypointXYZ)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      time_ = from.time_;
    }
    if (cached_has_bits & 0x00000002u) {
      destination_ = from.destination_;
    }
    if (cached_has_bits & 0x00000004u) {
      wpt_num_ = from.wpt_num_;
    }
    if (cached_has_bits & 0x00000008u) {
      x_1_ = from.x_1_;
    }
    if (cached_has_bits & 0x00000010u) {
      y_1_ = from.y_1_;
    }
    if (cached_has_bits & 0x00000020u) {
      depth_1_ = from.depth_1_;
    }
    if (cached_has_bits & 0x00000040u) {
      x_2_ = from.x_2_;
    }
    if (cached_has_bits & 0x00000080u) {
      y_2_ = from.y_2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 7936u) {
    if (cached_has_bits & 0x00000100u) {
      depth_2_ = from.depth_2_;
    }
    if (cached_has_bits & 0x00000200u) {
      x_3_ = from.x_3_;
    }
    if (cached_has_bits & 0x00000400u) {
      y_3_ = from.y_3_;
    }
    if (cached_has_bits & 0x00000800u) {
      depth_3_ = from.depth_3_;
    }
    if (cached_has_bits & 0x00001000u) {
      end_ = from.end_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MultiWaypointXYZ::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MultiWaypointXYZ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiWaypointXYZ::CopyFrom(const MultiWaypointXYZ& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MultiWaypointXYZ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiWaypointXYZ::IsInitialized() const {
  if ((_has_bits_[0] & 0x00001007) != 0x00001007) return false;
  return true;
}

void MultiWaypointXYZ::Swap(MultiWaypointXYZ* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MultiWaypointXYZ::InternalSwap(MultiWaypointXYZ* other) {
  using std::swap;
  swap(time_, other->time_);
  swap(destination_, other->destination_);
  swap(wpt_num_, other->wpt_num_);
  swap(x_1_, other->x_1_);
  swap(y_1_, other->y_1_);
  swap(depth_1_, other->depth_1_);
  swap(x_2_, other->x_2_);
  swap(y_2_, other->y_2_);
  swap(depth_2_, other->depth_2_);
  swap(x_3_, other->x_3_);
  swap(y_3_, other->y_3_);
  swap(depth_3_, other->depth_3_);
  swap(end_, other->end_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MultiWaypointXYZ::GetMetadata() const {
  protobuf_goby_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goby_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ExecuteWaypoints::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExecuteWaypoints::kDestinationFieldNumber;
const int ExecuteWaypoints::kTimeFieldNumber;
const int ExecuteWaypoints::kExecuteFieldNumber;
const int ExecuteWaypoints::kModeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExecuteWaypoints::ExecuteWaypoints()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_goby_5fmsgs_2eproto::scc_info_ExecuteWaypoints.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ExecuteWaypoints)
}
ExecuteWaypoints::ExecuteWaypoints(const ExecuteWaypoints& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&mode_) -
    reinterpret_cast<char*>(&time_)) + sizeof(mode_));
  // @@protoc_insertion_point(copy_constructor:ExecuteWaypoints)
}

void ExecuteWaypoints::SharedCtor() {
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mode_) -
      reinterpret_cast<char*>(&time_)) + sizeof(mode_));
}

ExecuteWaypoints::~ExecuteWaypoints() {
  // @@protoc_insertion_point(destructor:ExecuteWaypoints)
  SharedDtor();
}

void ExecuteWaypoints::SharedDtor() {
}

void ExecuteWaypoints::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ExecuteWaypoints::descriptor() {
  ::protobuf_goby_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goby_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ExecuteWaypoints& ExecuteWaypoints::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_goby_5fmsgs_2eproto::scc_info_ExecuteWaypoints.base);
  return *internal_default_instance();
}


void ExecuteWaypoints::Clear() {
// @@protoc_insertion_point(message_clear_start:ExecuteWaypoints)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mode_) -
        reinterpret_cast<char*>(&time_)) + sizeof(mode_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ExecuteWaypoints::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ExecuteWaypoints)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 destination = 1 [(.dccl.field) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_destination();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &destination_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double time = 2 [(.dccl.field) = {
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool execute = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_execute();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &execute_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ExecuteWaypoints.WaypointMode mode = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ExecuteWaypoints_WaypointMode_IsValid(value)) {
            set_mode(static_cast< ::ExecuteWaypoints_WaypointMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ExecuteWaypoints)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ExecuteWaypoints)
  return false;
#undef DO_
}

void ExecuteWaypoints::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ExecuteWaypoints)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 destination = 1 [(.dccl.field) = {
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->destination(), output);
  }

  // required double time = 2 [(.dccl.field) = {
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->time(), output);
  }

  // required bool execute = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->execute(), output);
  }

  // required .ExecuteWaypoints.WaypointMode mode = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->mode(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ExecuteWaypoints)
}

::google::protobuf::uint8* ExecuteWaypoints::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ExecuteWaypoints)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 destination = 1 [(.dccl.field) = {
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->destination(), target);
  }

  // required double time = 2 [(.dccl.field) = {
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->time(), target);
  }

  // required bool execute = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->execute(), target);
  }

  // required .ExecuteWaypoints.WaypointMode mode = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->mode(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ExecuteWaypoints)
  return target;
}

size_t ExecuteWaypoints::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ExecuteWaypoints)
  size_t total_size = 0;

  if (has_time()) {
    // required double time = 2 [(.dccl.field) = {
    total_size += 1 + 8;
  }

  if (has_destination()) {
    // required int32 destination = 1 [(.dccl.field) = {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->destination());
  }

  if (has_execute()) {
    // required bool execute = 3;
    total_size += 1 + 1;
  }

  if (has_mode()) {
    // required .ExecuteWaypoints.WaypointMode mode = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
  }

  return total_size;
}
size_t ExecuteWaypoints::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ExecuteWaypoints)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required double time = 2 [(.dccl.field) = {
    total_size += 1 + 8;

    // required int32 destination = 1 [(.dccl.field) = {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->destination());

    // required bool execute = 3;
    total_size += 1 + 1;

    // required .ExecuteWaypoints.WaypointMode mode = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExecuteWaypoints::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ExecuteWaypoints)
  GOOGLE_DCHECK_NE(&from, this);
  const ExecuteWaypoints* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ExecuteWaypoints>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ExecuteWaypoints)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ExecuteWaypoints)
    MergeFrom(*source);
  }
}

void ExecuteWaypoints::MergeFrom(const ExecuteWaypoints& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ExecuteWaypoints)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      time_ = from.time_;
    }
    if (cached_has_bits & 0x00000002u) {
      destination_ = from.destination_;
    }
    if (cached_has_bits & 0x00000004u) {
      execute_ = from.execute_;
    }
    if (cached_has_bits & 0x00000008u) {
      mode_ = from.mode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ExecuteWaypoints::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ExecuteWaypoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecuteWaypoints::CopyFrom(const ExecuteWaypoints& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ExecuteWaypoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecuteWaypoints::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void ExecuteWaypoints::Swap(ExecuteWaypoints* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExecuteWaypoints::InternalSwap(ExecuteWaypoints* other) {
  using std::swap;
  swap(time_, other->time_);
  swap(destination_, other->destination_);
  swap(execute_, other->execute_);
  swap(mode_, other->mode_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ExecuteWaypoints::GetMetadata() const {
  protobuf_goby_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goby_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Pose* Arena::CreateMaybeMessage< ::Pose >(Arena* arena) {
  return Arena::CreateInternal< ::Pose >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Health* Arena::CreateMaybeMessage< ::Health >(Arena* arena) {
  return Arena::CreateInternal< ::Health >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::RelativePose* Arena::CreateMaybeMessage< ::RelativePose >(Arena* arena) {
  return Arena::CreateInternal< ::RelativePose >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ControllerInfo* Arena::CreateMaybeMessage< ::ControllerInfo >(Arena* arena) {
  return Arena::CreateInternal< ::ControllerInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DirectControl* Arena::CreateMaybeMessage< ::DirectControl >(Arena* arena) {
  return Arena::CreateInternal< ::DirectControl >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::StateInfo* Arena::CreateMaybeMessage< ::StateInfo >(Arena* arena) {
  return Arena::CreateInternal< ::StateInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SingleWaypoint* Arena::CreateMaybeMessage< ::SingleWaypoint >(Arena* arena) {
  return Arena::CreateInternal< ::SingleWaypoint >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MultiWaypointGPS* Arena::CreateMaybeMessage< ::MultiWaypointGPS >(Arena* arena) {
  return Arena::CreateInternal< ::MultiWaypointGPS >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MultiWaypointXYZ* Arena::CreateMaybeMessage< ::MultiWaypointXYZ >(Arena* arena) {
  return Arena::CreateInternal< ::MultiWaypointXYZ >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ExecuteWaypoints* Arena::CreateMaybeMessage< ::ExecuteWaypoints >(Arena* arena) {
  return Arena::CreateInternal< ::ExecuteWaypoints >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
