// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: src/proto/goby_msgs.proto

#include "src/proto/goby_msgs.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

class PoseCommandDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PoseCommand>
      _instance;
} _PoseCommand_default_instance_;
class PoseResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PoseResponse>
      _instance;
} _PoseResponse_default_instance_;
class PowerCommandDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PowerCommand>
      _instance;
} _PowerCommand_default_instance_;
class PowerResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PowerResponse>
      _instance;
} _PowerResponse_default_instance_;
class RelativePoseCommandDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RelativePoseCommand>
      _instance;
} _RelativePoseCommand_default_instance_;
class RelativePoseResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RelativePoseResponse>
      _instance;
} _RelativePoseResponse_default_instance_;
class ControllerStateCommandDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ControllerStateCommand>
      _instance;
} _ControllerStateCommand_default_instance_;
class ControllerStateResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ControllerStateResponse>
      _instance;
} _ControllerStateResponse_default_instance_;
class DirectControlCommandDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DirectControlCommand>
      _instance;
} _DirectControlCommand_default_instance_;
class HelmStateCommandDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HelmStateCommand>
      _instance;
} _HelmStateCommand_default_instance_;
class HelmStateResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HelmStateResponse>
      _instance;
} _HelmStateResponse_default_instance_;
class WaypointCommandDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WaypointCommand>
      _instance;
} _WaypointCommand_default_instance_;
class MultiWaypointResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MultiWaypointResponse>
      _instance;
} _MultiWaypointResponse_default_instance_;
class MultiWaypointCommandDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MultiWaypointCommand>
      _instance;
} _MultiWaypointCommand_default_instance_;
class ExecuteWaypointsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ExecuteWaypoints>
      _instance;
} _ExecuteWaypoints_default_instance_;
namespace protobuf_src_2fproto_2fgoby_5fmsgs_2eproto {
static void InitDefaultsPoseCommand() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PoseCommand_default_instance_;
    new (ptr) ::PoseCommand();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PoseCommand::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PoseCommand =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPoseCommand}, {}};

static void InitDefaultsPoseResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PoseResponse_default_instance_;
    new (ptr) ::PoseResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PoseResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PoseResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPoseResponse}, {}};

static void InitDefaultsPowerCommand() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PowerCommand_default_instance_;
    new (ptr) ::PowerCommand();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PowerCommand::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PowerCommand =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPowerCommand}, {}};

static void InitDefaultsPowerResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PowerResponse_default_instance_;
    new (ptr) ::PowerResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PowerResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PowerResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPowerResponse}, {}};

static void InitDefaultsRelativePoseCommand() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RelativePoseCommand_default_instance_;
    new (ptr) ::RelativePoseCommand();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RelativePoseCommand::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RelativePoseCommand =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRelativePoseCommand}, {}};

static void InitDefaultsRelativePoseResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RelativePoseResponse_default_instance_;
    new (ptr) ::RelativePoseResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RelativePoseResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RelativePoseResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRelativePoseResponse}, {}};

static void InitDefaultsControllerStateCommand() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ControllerStateCommand_default_instance_;
    new (ptr) ::ControllerStateCommand();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ControllerStateCommand::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ControllerStateCommand =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsControllerStateCommand}, {}};

static void InitDefaultsControllerStateResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ControllerStateResponse_default_instance_;
    new (ptr) ::ControllerStateResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ControllerStateResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ControllerStateResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsControllerStateResponse}, {}};

static void InitDefaultsDirectControlCommand() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DirectControlCommand_default_instance_;
    new (ptr) ::DirectControlCommand();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DirectControlCommand::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DirectControlCommand =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDirectControlCommand}, {}};

static void InitDefaultsHelmStateCommand() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_HelmStateCommand_default_instance_;
    new (ptr) ::HelmStateCommand();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HelmStateCommand::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_HelmStateCommand =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHelmStateCommand}, {}};

static void InitDefaultsHelmStateResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_HelmStateResponse_default_instance_;
    new (ptr) ::HelmStateResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HelmStateResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_HelmStateResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHelmStateResponse}, {}};

static void InitDefaultsWaypointCommand() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_WaypointCommand_default_instance_;
    new (ptr) ::WaypointCommand();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::WaypointCommand::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_WaypointCommand =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsWaypointCommand}, {}};

static void InitDefaultsMultiWaypointResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MultiWaypointResponse_default_instance_;
    new (ptr) ::MultiWaypointResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MultiWaypointResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MultiWaypointResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMultiWaypointResponse}, {}};

static void InitDefaultsMultiWaypointCommand() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MultiWaypointCommand_default_instance_;
    new (ptr) ::MultiWaypointCommand();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MultiWaypointCommand::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MultiWaypointCommand =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMultiWaypointCommand}, {}};

static void InitDefaultsExecuteWaypoints() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ExecuteWaypoints_default_instance_;
    new (ptr) ::ExecuteWaypoints();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ExecuteWaypoints::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ExecuteWaypoints =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsExecuteWaypoints}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_PoseCommand.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PoseResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PowerCommand.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PowerResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RelativePoseCommand.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RelativePoseResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ControllerStateCommand.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ControllerStateResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DirectControlCommand.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HelmStateCommand.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HelmStateResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_WaypointCommand.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MultiWaypointResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MultiWaypointCommand.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ExecuteWaypoints.base);
}

::google::protobuf::Metadata file_level_metadata[15];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[12];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PoseCommand, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PoseCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PoseCommand, source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PoseCommand, destination_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PoseCommand, time_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PoseResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PoseResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PoseResponse, source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PoseResponse, destination_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PoseResponse, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PoseResponse, latitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PoseResponse, longitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PoseResponse, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PoseResponse, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PoseResponse, z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PoseResponse, quat_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PoseResponse, quat_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PoseResponse, quat_z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PoseResponse, quat_w_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PowerCommand, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PowerCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PowerCommand, source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PowerCommand, destination_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PowerCommand, time_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PowerResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PowerResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PowerResponse, source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PowerResponse, destination_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PowerResponse, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PowerResponse, battery_voltage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PowerResponse, current_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RelativePoseCommand, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RelativePoseCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RelativePoseCommand, source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RelativePoseCommand, destination_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RelativePoseCommand, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RelativePoseCommand, parent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RelativePoseCommand, child_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RelativePoseResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RelativePoseResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RelativePoseResponse, source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RelativePoseResponse, destination_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RelativePoseResponse, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RelativePoseResponse, parent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RelativePoseResponse, child_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RelativePoseResponse, latitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RelativePoseResponse, longitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RelativePoseResponse, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RelativePoseResponse, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RelativePoseResponse, z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RelativePoseResponse, quat_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RelativePoseResponse, quat_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RelativePoseResponse, quat_z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RelativePoseResponse, quat_w_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ControllerStateCommand, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ControllerStateCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ControllerStateCommand, source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ControllerStateCommand, destination_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ControllerStateCommand, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ControllerStateCommand, mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ControllerStateCommand, state_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ControllerStateResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ControllerStateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ControllerStateResponse, source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ControllerStateResponse, destination_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ControllerStateResponse, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ControllerStateResponse, state_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DirectControlCommand, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DirectControlCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DirectControlCommand, source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DirectControlCommand, destination_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DirectControlCommand, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DirectControlCommand, frame_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DirectControlCommand, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DirectControlCommand, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DirectControlCommand, z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DirectControlCommand, roll_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DirectControlCommand, pitch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DirectControlCommand, yaw_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DirectControlCommand, u_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DirectControlCommand, v_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DirectControlCommand, w_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DirectControlCommand, p_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DirectControlCommand, q_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DirectControlCommand, r_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HelmStateCommand, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HelmStateCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HelmStateCommand, source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HelmStateCommand, destination_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HelmStateCommand, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HelmStateCommand, mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HelmStateCommand, state_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HelmStateResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HelmStateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HelmStateResponse, source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HelmStateResponse, destination_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HelmStateResponse, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HelmStateResponse, helm_state_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::WaypointCommand, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::WaypointCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::WaypointCommand, source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::WaypointCommand, destination_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::WaypointCommand, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::WaypointCommand, mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::WaypointCommand, wpt_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::WaypointCommand, latitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::WaypointCommand, longitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::WaypointCommand, z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::WaypointCommand, end_),
  0,
  1,
  2,
  3,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MultiWaypointResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MultiWaypointResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MultiWaypointResponse, source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MultiWaypointResponse, destination_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MultiWaypointResponse, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MultiWaypointResponse, wpt_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MultiWaypointResponse, latitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MultiWaypointResponse, longitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MultiWaypointResponse, z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MultiWaypointResponse, end_),
  0,
  1,
  2,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MultiWaypointCommand, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MultiWaypointCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MultiWaypointCommand, source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MultiWaypointCommand, destination_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MultiWaypointCommand, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MultiWaypointCommand, mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MultiWaypointCommand, wpt_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MultiWaypointCommand, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MultiWaypointCommand, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MultiWaypointCommand, z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MultiWaypointCommand, end_),
  0,
  1,
  2,
  3,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ExecuteWaypoints, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ExecuteWaypoints, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ExecuteWaypoints, source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ExecuteWaypoints, destination_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ExecuteWaypoints, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ExecuteWaypoints, mode_),
  0,
  1,
  2,
  3,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::PoseCommand)},
  { 11, 28, sizeof(::PoseResponse)},
  { 40, 48, sizeof(::PowerCommand)},
  { 51, 61, sizeof(::PowerResponse)},
  { 66, 76, sizeof(::RelativePoseCommand)},
  { 81, 100, sizeof(::RelativePoseResponse)},
  { 114, 124, sizeof(::ControllerStateCommand)},
  { 129, 138, sizeof(::ControllerStateResponse)},
  { 142, 163, sizeof(::DirectControlCommand)},
  { 179, 189, sizeof(::HelmStateCommand)},
  { 194, 203, sizeof(::HelmStateResponse)},
  { 207, 221, sizeof(::WaypointCommand)},
  { 230, 243, sizeof(::MultiWaypointResponse)},
  { 251, 265, sizeof(::MultiWaypointCommand)},
  { 274, 283, sizeof(::ExecuteWaypoints)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_PoseCommand_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_PoseResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_PowerCommand_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_PowerResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_RelativePoseCommand_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_RelativePoseResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_ControllerStateCommand_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_ControllerStateResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_DirectControlCommand_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_HelmStateCommand_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_HelmStateResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_WaypointCommand_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_MultiWaypointResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_MultiWaypointCommand_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_ExecuteWaypoints_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "src/proto/goby_msgs.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 15);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\031src/proto/goby_msgs.proto\032\034dccl/option"
      "_extensions.proto\"\226\001\n\013PoseCommand\022\'\n\006sou"
      "rce\030\001 \002(\005B\027\242\?\024 \000)\000\000\000\000\000\000\000\0001\000\000\000\000\000\000.@\022,\n\013de"
      "stination\030\002 \002(\005B\027\242\?\024 \000)\000\000\000\000\000\000\000\0001\000\000\000\000\000\000.@"
      "\022%\n\004time\030\003 \001(\001B\027\242\?\024 \003)\000\000\000@3\354\330A1\000\000\000 \3666\334A:"
      "\t\242\?\006\010\001\020\037(\004\"\376\003\n\014PoseResponse\022\'\n\006source\030\001 "
      "\002(\005B\027\242\?\024 \000)\000\000\000\000\000\000\000\0001\000\000\000\000\000\000.@\022,\n\013destinat"
      "ion\030\002 \002(\005B\027\242\?\024 \000)\000\000\000\000\000\000\000\0001\000\000\000\000\000\000.@\022%\n\004ti"
      "me\030\003 \002(\001B\027\242\?\024 \003)\000\000\000@3\354\330A1\000\000\000 \3666\334A\022)\n\010lat"
      "itude\030\004 \002(\001B\027\242\?\024 \006)o\203\332o\355>D@1o\203\332o\355>E@\022*\n\t"
      "longitude\030\005 \002(\001B\027\242\?\024 \006)\346!S>\004\033R\3001\346!S>\004\233Q\300"
      "\022\"\n\001x\030\006 \002(\002B\027\242\?\024 \001)\000\000\000\000\000\210\303\3001\000\000\000\000\000\210\303@\022\"\n\001"
      "y\030\007 \002(\002B\027\242\?\024 \001)\000\000\000\000\000\210\303\3001\000\000\000\000\000\210\303@\022\"\n\001z\030\010 "
      "\002(\002B\027\242\?\024 \001)\000\000\000\000\000\000Y\3001\000\000\000\000\000\000\000\000\022\'\n\006quat_x\030\t"
      " \002(\002B\027\242\?\024 \004)\000\000\000\000\000\000\360\2771\000\000\000\000\000\000\360\?\022\'\n\006quat_y\030"
      "\n \002(\002B\027\242\?\024 \004)\000\000\000\000\000\000\360\2771\000\000\000\000\000\000\360\?\022\'\n\006quat_z"
      "\030\013 \002(\002B\027\242\?\024 \004)\000\000\000\000\000\000\360\2771\000\000\000\000\000\000\360\?\022\'\n\006quat_"
      "w\030\014 \002(\002B\027\242\?\024 \004)\000\000\000\000\000\000\360\2771\000\000\000\000\000\000\360\?:\t\242\?\006\010e\020"
      "\037(\004\"\227\001\n\014PowerCommand\022\'\n\006source\030\001 \002(\005B\027\242\?"
      "\024 \000)\000\000\000\000\000\000\000\0001\000\000\000\000\000\000.@\022,\n\013destination\030\002 \002"
      "(\005B\027\242\?\024 \000)\000\000\000\000\000\000\000\0001\000\000\000\000\000\000.@\022%\n\004time\030\003 \001("
      "\001B\027\242\?\024 \003)\000\000\000@3\354\330A1\000\000\000 \3666\334A:\t\242\?\006\010\002\020\037(\004\"\364\001"
      "\n\rPowerResponse\022\'\n\006source\030\001 \002(\005B\027\242\?\024 \000)\000"
      "\000\000\000\000\000\000\0001\000\000\000\000\000\000.@\022,\n\013destination\030\002 \002(\005B\027\242"
      "\?\024 \000)\000\000\000\000\000\000\000\0001\000\000\000\000\000\000.@\022%\n\004time\030\003 \001(\001B\027\242\?"
      "\024 \003)\000\000\000@3\354\330A1\000\000\000 \3666\334A\0220\n\017battery_voltage"
      "\030\004 \002(\002B\027\242\?\024 \003)\000\000\000\000\000\000(@1\000\000\000\000\000\0006@\022(\n\007curre"
      "nt\030\005 \002(\002B\027\242\?\024 \003)\000\000\000\000\000\000I\3001\000\000\000\000\000\000I@:\t\242\?\006\010f"
      "\020\037(\004\"\254\002\n\023RelativePoseCommand\022\'\n\006source\030\001"
      " \002(\005B\027\242\?\024 \000)\000\000\000\000\000\000\000\0001\000\000\000\000\000\000.@\022,\n\013destina"
      "tion\030\002 \002(\005B\027\242\?\024 \000)\000\000\000\000\000\000\000\0001\000\000\000\000\000\000.@\022%\n\004t"
      "ime\030\003 \001(\001B\027\242\?\024 \003)\000\000\000@3\354\330A1\000\000\000 \3666\334A\022*\n\006pa"
      "rent\030\004 \002(\0162\032.RelativePoseCommand.Frame\022)"
      "\n\005child\030\005 \002(\0162\032.RelativePoseCommand.Fram"
      "e\"5\n\005Frame\022\r\n\tBASE_LINK\020\000\022\010\n\004ODOM\020\001\022\t\n\005W"
      "ORLD\020\002\022\010\n\004USBL\020\003:\t\242\?\006\010\003\020\037(\004\"\226\005\n\024Relative"
      "PoseResponse\022\'\n\006source\030\001 \002(\005B\027\242\?\024 \000)\000\000\000\000"
      "\000\000\000\0001\000\000\000\000\000\000.@\022,\n\013destination\030\002 \002(\005B\027\242\?\024 "
      "\000)\000\000\000\000\000\000\000\0001\000\000\000\000\000\000.@\022%\n\004time\030\003 \001(\001B\027\242\?\024 \003"
      ")\000\000\000@3\354\330A1\000\000\000 \3666\334A\022+\n\006parent\030\004 \002(\0162\033.Rel"
      "ativePoseResponse.Frame\022*\n\005child\030\005 \002(\0162\033"
      ".RelativePoseResponse.Frame\022)\n\010latitude\030"
      "\006 \002(\001B\027\242\?\024 \006)o\203\332o\355>D@1o\203\332o\355>E@\022*\n\tlongit"
      "ude\030\007 \002(\001B\027\242\?\024 \006)\346!S>\004\033R\3001\346!S>\004\233Q\300\022\"\n\001x\030"
      "\010 \002(\002B\027\242\?\024 \001)\000\000\000\000\000\210\303\3001\000\000\000\000\000\210\303@\022\"\n\001y\030\t \002("
      "\002B\027\242\?\024 \001)\000\000\000\000\000\210\303\3001\000\000\000\000\000\210\303@\022\"\n\001z\030\n \002(\002B\027\242"
      "\?\024 \001)\000\000\000\000\000\000\000\0001\000\000\000\000\000\000Y@\022\'\n\006quat_x\030\013 \002(\002B\027"
      "\242\?\024 \004)\000\000\000\000\000\000\360\2771\000\000\000\000\000\000\360\?\022\'\n\006quat_y\030\014 \002(\002B"
      "\027\242\?\024 \004)\000\000\000\000\000\000\360\2771\000\000\000\000\000\000\360\?\022\'\n\006quat_z\030\r \002(\002"
      "B\027\242\?\024 \004)\000\000\000\000\000\000\360\2771\000\000\000\000\000\000\360\?\022\'\n\006quat_w\030\016 \002("
      "\002B\027\242\?\024 \004)\000\000\000\000\000\000\360\2771\000\000\000\000\000\000\360\?\"5\n\005Frame\022\r\n\tB"
      "ASE_LINK\020\000\022\010\n\004ODOM\020\001\022\t\n\005WORLD\020\002\022\010\n\004USBL\020"
      "\003:\t\242\?\006\010g\020\037(\004\"\361\002\n\026ControllerStateCommand\022"
      "\'\n\006source\030\001 \002(\005B\027\242\?\024 \000)\000\000\000\000\000\000\000\0001\000\000\000\000\000\000.@"
      "\022,\n\013destination\030\002 \002(\005B\027\242\?\024 \000)\000\000\000\000\000\000\000\0001\000\000"
      "\000\000\000\000.@\022%\n\004time\030\003 \001(\001B\027\242\?\024 \003)\000\000\000@3\354\330A1\000\000\000"
      " \3666\334A\022*\n\004mode\030\004 \002(\0162\034.ControllerStateCom"
      "mand.Mode\022V\n\005state\030\005 \001(\0162\'.ControllerSta"
      "teCommand.ControllerStateB\036\242\?\033\302\002\030\032\026this."
      "mode == \'COMMAND\'\"\036\n\004Mode\022\t\n\005QUERY\020\000\022\013\n\007"
      "COMMAND\020\001\"*\n\017ControllerState\022\013\n\007DISABLE\020"
      "\000\022\n\n\006ENABLE\020\001:\t\242\?\006\010\004\020\037(\004\"\207\002\n\027ControllerS"
      "tateResponse\022\'\n\006source\030\001 \002(\005B\027\242\?\024 \000)\000\000\000\000"
      "\000\000\000\0001\000\000\000\000\000\000.@\022,\n\013destination\030\002 \002(\005B\027\242\?\024 "
      "\000)\000\000\000\000\000\000\000\0001\000\000\000\000\000\000.@\022%\n\004time\030\003 \001(\001B\027\242\?\024 \003"
      ")\000\000\000@3\354\330A1\000\000\000 \3666\334A\0227\n\005state\030\004 \001(\0162(.Cont"
      "rollerStateResponse.ControllerState\"*\n\017C"
      "ontrollerState\022\013\n\007DISABLE\020\000\022\n\n\006ENABLE\020\001:"
      "\t\242\?\006\010h\020\037(\004\"\273\005\n\024DirectControlCommand\022\'\n\006s"
      "ource\030\001 \002(\005B\027\242\?\024 \000)\000\000\000\000\000\000\000\0001\000\000\000\000\000\000.@\022,\n\013"
      "destination\030\002 \002(\005B\027\242\?\024 \000)\000\000\000\000\000\000\000\0001\000\000\000\000\000\000"
      ".@\022%\n\004time\030\003 \001(\001B\027\242\?\024 \003)\000\000\000@3\354\330A1\000\000\000 \3666\334"
      "A\022*\n\005frame\030\004 \002(\0162\033.DirectControlCommand."
      "Frame\022\"\n\001x\030\005 \002(\002B\027\242\?\024 \001)\000\000\000\000\000\210\303\3001\000\000\000\000\000\210\303"
      "@\022\"\n\001y\030\006 \002(\002B\027\242\?\024 \001)\000\000\000\000\000\210\303\3001\000\000\000\000\000\210\303@\022\"\n"
      "\001z\030\007 \002(\002B\027\242\?\024 \001)\000\000\000\000\000\000\000\0001\000\000\000\000\000\000Y@\022%\n\004rol"
      "l\030\010 \002(\002B\027\242\?\024 \002)\037\205\353Q\270\036\371\2771\037\205\353Q\270\036\371\?\022&\n\005pitc"
      "h\030\t \002(\002B\027\242\?\024 \002)\037\205\353Q\270\036\371\2771\037\205\353Q\270\036\371\?\022$\n\003yaw\030"
      "\n \002(\002B\027\242\?\024 \002)\000\000\000\000\000\000\000\0001\037\205\353Q\270\036\t@\022\"\n\001u\030\013 \002("
      "\002B\027\242\?\024 \002)\000\000\000\000\000\000\000\3001\000\000\000\000\000\000\000@\022\"\n\001v\030\014 \002(\002B\027\242"
      "\?\024 \002)\000\000\000\000\000\000\000\3001\000\000\000\000\000\000\000@\022\"\n\001w\030\r \002(\002B\027\242\?\024 \002"
      ")\000\000\000\000\000\000\000\3001\000\000\000\000\000\000\000@\022\"\n\001p\030\016 \002(\002B\027\242\?\024 \002)\000\000\000"
      "\000\000\000\000\3001\000\000\000\000\000\000\000@\022\"\n\001q\030\017 \002(\002B\027\242\?\024 \002)\000\000\000\000\000\000\000"
      "\3001\000\000\000\000\000\000\000@\022\"\n\001r\030\020 \002(\002B\027\242\?\024 \002)\000\000\000\000\000\000\000\3001\000\000"
      "\000\000\000\000\000@\"5\n\005Frame\022\r\n\tBASE_LINK\020\000\022\010\n\004ODOM\020\001"
      "\022\t\n\005WORLD\020\002\022\010\n\004USBL\020\003:\t\242\?\006\010\005\020\037(\004\"\227\003\n\020Hel"
      "mStateCommand\022\'\n\006source\030\001 \002(\005B\027\242\?\024 \000)\000\000\000"
      "\000\000\000\000\0001\000\000\000\000\000\000.@\022,\n\013destination\030\002 \002(\005B\027\242\?\024"
      " \000)\000\000\000\000\000\000\000\0001\000\000\000\000\000\000.@\022%\n\004time\030\003 \001(\001B\027\242\?\024 "
      "\003)\000\000\000@3\354\330A1\000\000\000 \3666\334A\022$\n\004mode\030\004 \002(\0162\026.Helm"
      "StateCommand.Mode\022J\n\005state\030\005 \001(\0162\033.HelmS"
      "tateCommand.HelmStateB\036\242\?\033\302\002\030\032\026this.mode"
      " == \'COMMAND\'\"\036\n\004Mode\022\t\n\005QUERY\020\000\022\013\n\007COMM"
      "AND\020\001\"h\n\tHelmState\022\010\n\004KILL\020\000\022\t\n\005START\020\001\022"
      "\020\n\014SURVEY_LOCAL\020\002\022\021\n\rSURVEY_GLOBAL\020\003\022\022\n\016"
      "DIRECT_CONTROL\020\004\022\r\n\tSURVEY_3D\020\005:\t\242\?\006\010\006\020\037"
      "(\004\"\270\002\n\021HelmStateResponse\022\'\n\006source\030\001 \002(\005"
      "B\027\242\?\024 \000)\000\000\000\000\000\000\000\0001\000\000\000\000\000\000.@\022,\n\013destination"
      "\030\002 \002(\005B\027\242\?\024 \000)\000\000\000\000\000\000\000\0001\000\000\000\000\000\000.@\022%\n\004time\030"
      "\003 \001(\001B\027\242\?\024 \003)\000\000\000@3\354\330A1\000\000\000 \3666\334A\0220\n\nhelm_s"
      "tate\030\004 \002(\0162\034.HelmStateResponse.HelmState"
      "\"h\n\tHelmState\022\010\n\004KILL\020\000\022\t\n\005START\020\001\022\020\n\014SU"
      "RVEY_LOCAL\020\002\022\021\n\rSURVEY_GLOBAL\020\003\022\022\n\016DIREC"
      "T_CONTROL\020\004\022\r\n\tSURVEY_3D\020\005:\t\242\?\006\010j\020\037(\004\"\370\003"
      "\n\017WaypointCommand\022\'\n\006source\030\001 \002(\005B\027\242\?\024 \000"
      ")\000\000\000\000\000\000\000\0001\000\000\000\000\000\000\360\?\022,\n\013destination\030\002 \002(\005B"
      "\027\242\?\024 \000)\000\000\000\000\000\000\000\0001\000\000\000\000\000\000.@\022%\n\004time\030\003 \001(\001B\027"
      "\242\?\024 \003)\000\000\000@3\354\330A1\000\000\000 \3666\334A\022#\n\004mode\030\004 \002(\0162\025."
      "WaypointCommand.Mode\022N\n\007wpt_num\030\005 \003(\005B=\242"
      "\?: \000)\000\000\000\000\000\000\000\0001\000\000\000\000\000\000@@P\003\302\002!\032\037this.waypoi"
      "nt_mode == \'COMMAND\'\022+\n\010latitude\030\006 \003(\001B\031"
      "\242\?\026 \006)o\203\332o\355>D@1o\203\332o\355>E@P\003\022,\n\tlongitude\030\007"
      " \003(\001B\031\242\?\026 \006)\346!S>\004\033R\3001\346!S>\004\233Q\300P\003\022\?\n\001z\030\010 \003"
      "(\002B4\242\?1 \001)\000\000\000\000\000\000\000\0001\000\000\000\000\000\000Y@P\003\302\002\030\032\026this.m"
      "ode == \'COMMAND\'\022+\n\003end\030\t \001(\010B\036\242\?\033\302\002\030\032\026t"
      "his.mode == \'COMMAND\'\"\036\n\004Mode\022\t\n\005QUERY\020\000"
      "\022\013\n\007COMMAND\020\001:\t\242\?\006\010\007\020\037(\004\"\332\002\n\025MultiWaypoi"
      "ntResponse\022\'\n\006source\030\001 \002(\005B\027\242\?\024 \000)\000\000\000\000\000\000"
      "\000\0001\000\000\000\000\000\000\360\?\022,\n\013destination\030\002 \002(\005B\027\242\?\024 \000)"
      "\000\000\000\000\000\000\000\0001\000\000\000\000\000\000.@\022%\n\004time\030\003 \002(\001B\027\242\?\024 \003)\000"
      "\000\000@3\354\330A1\000\000\000 \3666\334A\022*\n\007wpt_num\030\004 \003(\005B\031\242\?\026 \000"
      ")\000\000\000\000\000\000\000\0001\000\000\000\000\000\000@@P\003\022+\n\010latitude\030\005 \003(\001B\031"
      "\242\?\026 \006)o\203\332o\355>D@1o\203\332o\355>E@P\003\022,\n\tlongitude\030\006"
      " \003(\001B\031\242\?\026 \006)\346!S>\004\033R\3001\346!S>\004\233Q\300P\003\022$\n\001z\030\007 \003"
      "(\002B\031\242\?\026 \001)\000\000\000\000\000\000\000\0001\000\000\000\000\000\000Y@P\003\022\013\n\003end\030\010 \001"
      "(\010:\t\242\?\006\010k\020\037(\004\"\251\004\n\024MultiWaypointCommand\022\'"
      "\n\006source\030\001 \002(\005B\027\242\?\024 \000)\000\000\000\000\000\000\000\0001\000\000\000\000\000\000\360\?\022"
      ",\n\013destination\030\002 \002(\005B\027\242\?\024 \000)\000\000\000\000\000\000\000\0001\000\000\000"
      "\000\000\000.@\022%\n\004time\030\003 \001(\001B\027\242\?\024 \003)\000\000\000@3\354\330A1\000\000\000 "
      "\3666\334A\022(\n\004mode\030\004 \002(\0162\032.MultiWaypointComman"
      "d.Mode\022N\n\007wpt_num\030\005 \003(\005B=\242\?: \000)\000\000\000\000\000\000\000\0001"
      "\000\000\000\000\000\000@@P\003\302\002!\032\037this.waypoint_mode == \'CO"
      "MMAND\'\022\?\n\001x\030\006 \003(\002B4\242\?1 \001)\000\000\000\000\000\210\303\3001\000\000\000\000\000\210"
      "\303@P\003\302\002\030\032\026this.mode == \'COMMAND\'\022\?\n\001y\030\007 \003"
      "(\002B4\242\?1 \001)\000\000\000\000\000\210\303\3001\000\000\000\000\000\210\303@P\003\302\002\030\032\026this.m"
      "ode == \'COMMAND\'\022\?\n\001z\030\010 \003(\002B4\242\?1 \001)\000\000\000\000\000"
      "\000\000\0001\000\000\000\000\000\000Y@P\003\302\002\030\032\026this.mode == \'COMMAND"
      "\'\022+\n\003end\030\t \001(\010B\036\242\?\033\302\002\030\032\026this.mode == \'CO"
      "MMAND\'\"\036\n\004Mode\022\t\n\005QUERY\020\000\022\013\n\007COMMAND\020\001:\t"
      "\242\?\006\010\t\020\037(\004\"\357\001\n\020ExecuteWaypoints\022\'\n\006source"
      "\030\001 \002(\005B\027\242\?\024 \000)\000\000\000\000\000\000\000\0001\000\000\000\000\000\000.@\022,\n\013desti"
      "nation\030\002 \002(\005B\027\242\?\024 \000)\000\000\000\000\000\000\000\0001\000\000\000\000\000\000.@\022%\n"
      "\004time\030\003 \001(\001B\027\242\?\024 \003)\000\000\000@3\354\330A1\000\000\000 \3666\334A\022+\n\004"
      "mode\030\004 \002(\0162\035.ExecuteWaypoints.ExecuteMod"
      "e\"%\n\013ExecuteMode\022\n\n\006APPEND\020\000\022\n\n\006UPDATE\020\001"
      ":\t\242\?\006\010\n\020\037(\004"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 5811);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "src/proto/goby_msgs.proto", &protobuf_RegisterTypes);
  ::protobuf_dccl_2foption_5fextensions_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_src_2fproto_2fgoby_5fmsgs_2eproto
const ::google::protobuf::EnumDescriptor* RelativePoseCommand_Frame_descriptor() {
  protobuf_src_2fproto_2fgoby_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fproto_2fgoby_5fmsgs_2eproto::file_level_enum_descriptors[0];
}
bool RelativePoseCommand_Frame_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const RelativePoseCommand_Frame RelativePoseCommand::BASE_LINK;
const RelativePoseCommand_Frame RelativePoseCommand::ODOM;
const RelativePoseCommand_Frame RelativePoseCommand::WORLD;
const RelativePoseCommand_Frame RelativePoseCommand::USBL;
const RelativePoseCommand_Frame RelativePoseCommand::Frame_MIN;
const RelativePoseCommand_Frame RelativePoseCommand::Frame_MAX;
const int RelativePoseCommand::Frame_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* RelativePoseResponse_Frame_descriptor() {
  protobuf_src_2fproto_2fgoby_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fproto_2fgoby_5fmsgs_2eproto::file_level_enum_descriptors[1];
}
bool RelativePoseResponse_Frame_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const RelativePoseResponse_Frame RelativePoseResponse::BASE_LINK;
const RelativePoseResponse_Frame RelativePoseResponse::ODOM;
const RelativePoseResponse_Frame RelativePoseResponse::WORLD;
const RelativePoseResponse_Frame RelativePoseResponse::USBL;
const RelativePoseResponse_Frame RelativePoseResponse::Frame_MIN;
const RelativePoseResponse_Frame RelativePoseResponse::Frame_MAX;
const int RelativePoseResponse::Frame_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ControllerStateCommand_Mode_descriptor() {
  protobuf_src_2fproto_2fgoby_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fproto_2fgoby_5fmsgs_2eproto::file_level_enum_descriptors[2];
}
bool ControllerStateCommand_Mode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ControllerStateCommand_Mode ControllerStateCommand::QUERY;
const ControllerStateCommand_Mode ControllerStateCommand::COMMAND;
const ControllerStateCommand_Mode ControllerStateCommand::Mode_MIN;
const ControllerStateCommand_Mode ControllerStateCommand::Mode_MAX;
const int ControllerStateCommand::Mode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ControllerStateCommand_ControllerState_descriptor() {
  protobuf_src_2fproto_2fgoby_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fproto_2fgoby_5fmsgs_2eproto::file_level_enum_descriptors[3];
}
bool ControllerStateCommand_ControllerState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ControllerStateCommand_ControllerState ControllerStateCommand::DISABLE;
const ControllerStateCommand_ControllerState ControllerStateCommand::ENABLE;
const ControllerStateCommand_ControllerState ControllerStateCommand::ControllerState_MIN;
const ControllerStateCommand_ControllerState ControllerStateCommand::ControllerState_MAX;
const int ControllerStateCommand::ControllerState_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ControllerStateResponse_ControllerState_descriptor() {
  protobuf_src_2fproto_2fgoby_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fproto_2fgoby_5fmsgs_2eproto::file_level_enum_descriptors[4];
}
bool ControllerStateResponse_ControllerState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ControllerStateResponse_ControllerState ControllerStateResponse::DISABLE;
const ControllerStateResponse_ControllerState ControllerStateResponse::ENABLE;
const ControllerStateResponse_ControllerState ControllerStateResponse::ControllerState_MIN;
const ControllerStateResponse_ControllerState ControllerStateResponse::ControllerState_MAX;
const int ControllerStateResponse::ControllerState_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* DirectControlCommand_Frame_descriptor() {
  protobuf_src_2fproto_2fgoby_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fproto_2fgoby_5fmsgs_2eproto::file_level_enum_descriptors[5];
}
bool DirectControlCommand_Frame_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DirectControlCommand_Frame DirectControlCommand::BASE_LINK;
const DirectControlCommand_Frame DirectControlCommand::ODOM;
const DirectControlCommand_Frame DirectControlCommand::WORLD;
const DirectControlCommand_Frame DirectControlCommand::USBL;
const DirectControlCommand_Frame DirectControlCommand::Frame_MIN;
const DirectControlCommand_Frame DirectControlCommand::Frame_MAX;
const int DirectControlCommand::Frame_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* HelmStateCommand_Mode_descriptor() {
  protobuf_src_2fproto_2fgoby_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fproto_2fgoby_5fmsgs_2eproto::file_level_enum_descriptors[6];
}
bool HelmStateCommand_Mode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const HelmStateCommand_Mode HelmStateCommand::QUERY;
const HelmStateCommand_Mode HelmStateCommand::COMMAND;
const HelmStateCommand_Mode HelmStateCommand::Mode_MIN;
const HelmStateCommand_Mode HelmStateCommand::Mode_MAX;
const int HelmStateCommand::Mode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* HelmStateCommand_HelmState_descriptor() {
  protobuf_src_2fproto_2fgoby_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fproto_2fgoby_5fmsgs_2eproto::file_level_enum_descriptors[7];
}
bool HelmStateCommand_HelmState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const HelmStateCommand_HelmState HelmStateCommand::KILL;
const HelmStateCommand_HelmState HelmStateCommand::START;
const HelmStateCommand_HelmState HelmStateCommand::SURVEY_LOCAL;
const HelmStateCommand_HelmState HelmStateCommand::SURVEY_GLOBAL;
const HelmStateCommand_HelmState HelmStateCommand::DIRECT_CONTROL;
const HelmStateCommand_HelmState HelmStateCommand::SURVEY_3D;
const HelmStateCommand_HelmState HelmStateCommand::HelmState_MIN;
const HelmStateCommand_HelmState HelmStateCommand::HelmState_MAX;
const int HelmStateCommand::HelmState_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* HelmStateResponse_HelmState_descriptor() {
  protobuf_src_2fproto_2fgoby_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fproto_2fgoby_5fmsgs_2eproto::file_level_enum_descriptors[8];
}
bool HelmStateResponse_HelmState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const HelmStateResponse_HelmState HelmStateResponse::KILL;
const HelmStateResponse_HelmState HelmStateResponse::START;
const HelmStateResponse_HelmState HelmStateResponse::SURVEY_LOCAL;
const HelmStateResponse_HelmState HelmStateResponse::SURVEY_GLOBAL;
const HelmStateResponse_HelmState HelmStateResponse::DIRECT_CONTROL;
const HelmStateResponse_HelmState HelmStateResponse::SURVEY_3D;
const HelmStateResponse_HelmState HelmStateResponse::HelmState_MIN;
const HelmStateResponse_HelmState HelmStateResponse::HelmState_MAX;
const int HelmStateResponse::HelmState_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* WaypointCommand_Mode_descriptor() {
  protobuf_src_2fproto_2fgoby_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fproto_2fgoby_5fmsgs_2eproto::file_level_enum_descriptors[9];
}
bool WaypointCommand_Mode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const WaypointCommand_Mode WaypointCommand::QUERY;
const WaypointCommand_Mode WaypointCommand::COMMAND;
const WaypointCommand_Mode WaypointCommand::Mode_MIN;
const WaypointCommand_Mode WaypointCommand::Mode_MAX;
const int WaypointCommand::Mode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* MultiWaypointCommand_Mode_descriptor() {
  protobuf_src_2fproto_2fgoby_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fproto_2fgoby_5fmsgs_2eproto::file_level_enum_descriptors[10];
}
bool MultiWaypointCommand_Mode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const MultiWaypointCommand_Mode MultiWaypointCommand::QUERY;
const MultiWaypointCommand_Mode MultiWaypointCommand::COMMAND;
const MultiWaypointCommand_Mode MultiWaypointCommand::Mode_MIN;
const MultiWaypointCommand_Mode MultiWaypointCommand::Mode_MAX;
const int MultiWaypointCommand::Mode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ExecuteWaypoints_ExecuteMode_descriptor() {
  protobuf_src_2fproto_2fgoby_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fproto_2fgoby_5fmsgs_2eproto::file_level_enum_descriptors[11];
}
bool ExecuteWaypoints_ExecuteMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ExecuteWaypoints_ExecuteMode ExecuteWaypoints::APPEND;
const ExecuteWaypoints_ExecuteMode ExecuteWaypoints::UPDATE;
const ExecuteWaypoints_ExecuteMode ExecuteWaypoints::ExecuteMode_MIN;
const ExecuteWaypoints_ExecuteMode ExecuteWaypoints::ExecuteMode_MAX;
const int ExecuteWaypoints::ExecuteMode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void PoseCommand::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PoseCommand::kSourceFieldNumber;
const int PoseCommand::kDestinationFieldNumber;
const int PoseCommand::kTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PoseCommand::PoseCommand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_src_2fproto_2fgoby_5fmsgs_2eproto::scc_info_PoseCommand.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:PoseCommand)
}
PoseCommand::PoseCommand(const PoseCommand& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&source_, &from.source_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_) -
    reinterpret_cast<char*>(&source_)) + sizeof(time_));
  // @@protoc_insertion_point(copy_constructor:PoseCommand)
}

void PoseCommand::SharedCtor() {
  ::memset(&source_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_) -
      reinterpret_cast<char*>(&source_)) + sizeof(time_));
}

PoseCommand::~PoseCommand() {
  // @@protoc_insertion_point(destructor:PoseCommand)
  SharedDtor();
}

void PoseCommand::SharedDtor() {
}

void PoseCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PoseCommand::descriptor() {
  ::protobuf_src_2fproto_2fgoby_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fproto_2fgoby_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PoseCommand& PoseCommand::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_src_2fproto_2fgoby_5fmsgs_2eproto::scc_info_PoseCommand.base);
  return *internal_default_instance();
}


void PoseCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:PoseCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&source_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_) -
        reinterpret_cast<char*>(&source_)) + sizeof(time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PoseCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PoseCommand)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 source = 1 [(.dccl.field) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_source();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &source_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 destination = 2 [(.dccl.field) = {
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_destination();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &destination_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double time = 3 [(.dccl.field) = {
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PoseCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PoseCommand)
  return false;
#undef DO_
}

void PoseCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PoseCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 source = 1 [(.dccl.field) = {
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->source(), output);
  }

  // required int32 destination = 2 [(.dccl.field) = {
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->destination(), output);
  }

  // optional double time = 3 [(.dccl.field) = {
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PoseCommand)
}

::google::protobuf::uint8* PoseCommand::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:PoseCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 source = 1 [(.dccl.field) = {
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->source(), target);
  }

  // required int32 destination = 2 [(.dccl.field) = {
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->destination(), target);
  }

  // optional double time = 3 [(.dccl.field) = {
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PoseCommand)
  return target;
}

size_t PoseCommand::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:PoseCommand)
  size_t total_size = 0;

  if (has_source()) {
    // required int32 source = 1 [(.dccl.field) = {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->source());
  }

  if (has_destination()) {
    // required int32 destination = 2 [(.dccl.field) = {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->destination());
  }

  return total_size;
}
size_t PoseCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PoseCommand)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 source = 1 [(.dccl.field) = {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->source());

    // required int32 destination = 2 [(.dccl.field) = {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->destination());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional double time = 3 [(.dccl.field) = {
  if (has_time()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PoseCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PoseCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const PoseCommand* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PoseCommand>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PoseCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PoseCommand)
    MergeFrom(*source);
  }
}

void PoseCommand::MergeFrom(const PoseCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PoseCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      source_ = from.source_;
    }
    if (cached_has_bits & 0x00000002u) {
      destination_ = from.destination_;
    }
    if (cached_has_bits & 0x00000004u) {
      time_ = from.time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PoseCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PoseCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PoseCommand::CopyFrom(const PoseCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PoseCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PoseCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void PoseCommand::Swap(PoseCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PoseCommand::InternalSwap(PoseCommand* other) {
  using std::swap;
  swap(source_, other->source_);
  swap(destination_, other->destination_);
  swap(time_, other->time_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PoseCommand::GetMetadata() const {
  protobuf_src_2fproto_2fgoby_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fproto_2fgoby_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PoseResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PoseResponse::kSourceFieldNumber;
const int PoseResponse::kDestinationFieldNumber;
const int PoseResponse::kTimeFieldNumber;
const int PoseResponse::kLatitudeFieldNumber;
const int PoseResponse::kLongitudeFieldNumber;
const int PoseResponse::kXFieldNumber;
const int PoseResponse::kYFieldNumber;
const int PoseResponse::kZFieldNumber;
const int PoseResponse::kQuatXFieldNumber;
const int PoseResponse::kQuatYFieldNumber;
const int PoseResponse::kQuatZFieldNumber;
const int PoseResponse::kQuatWFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PoseResponse::PoseResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_src_2fproto_2fgoby_5fmsgs_2eproto::scc_info_PoseResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:PoseResponse)
}
PoseResponse::PoseResponse(const PoseResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&source_, &from.source_,
    static_cast<size_t>(reinterpret_cast<char*>(&quat_w_) -
    reinterpret_cast<char*>(&source_)) + sizeof(quat_w_));
  // @@protoc_insertion_point(copy_constructor:PoseResponse)
}

void PoseResponse::SharedCtor() {
  ::memset(&source_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&quat_w_) -
      reinterpret_cast<char*>(&source_)) + sizeof(quat_w_));
}

PoseResponse::~PoseResponse() {
  // @@protoc_insertion_point(destructor:PoseResponse)
  SharedDtor();
}

void PoseResponse::SharedDtor() {
}

void PoseResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PoseResponse::descriptor() {
  ::protobuf_src_2fproto_2fgoby_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fproto_2fgoby_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PoseResponse& PoseResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_src_2fproto_2fgoby_5fmsgs_2eproto::scc_info_PoseResponse.base);
  return *internal_default_instance();
}


void PoseResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:PoseResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&source_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&z_) -
        reinterpret_cast<char*>(&source_)) + sizeof(z_));
  }
  if (cached_has_bits & 3840u) {
    ::memset(&quat_x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&quat_w_) -
        reinterpret_cast<char*>(&quat_x_)) + sizeof(quat_w_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PoseResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PoseResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 source = 1 [(.dccl.field) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_source();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &source_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 destination = 2 [(.dccl.field) = {
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_destination();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &destination_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double time = 3 [(.dccl.field) = {
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double latitude = 4 [(.dccl.field) = {
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_latitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double longitude = 5 [(.dccl.field) = {
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_longitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float x = 6 [(.dccl.field) = {
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float y = 7 [(.dccl.field) = {
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float z = 8 [(.dccl.field) = {
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {
          set_has_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float quat_x = 9 [(.dccl.field) = {
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {
          set_has_quat_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &quat_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float quat_y = 10 [(.dccl.field) = {
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {
          set_has_quat_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &quat_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float quat_z = 11 [(.dccl.field) = {
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u /* 93 & 0xFF */)) {
          set_has_quat_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &quat_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float quat_w = 12 [(.dccl.field) = {
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u /* 101 & 0xFF */)) {
          set_has_quat_w();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &quat_w_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PoseResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PoseResponse)
  return false;
#undef DO_
}

void PoseResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PoseResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 source = 1 [(.dccl.field) = {
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->source(), output);
  }

  // required int32 destination = 2 [(.dccl.field) = {
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->destination(), output);
  }

  // required double time = 3 [(.dccl.field) = {
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->time(), output);
  }

  // required double latitude = 4 [(.dccl.field) = {
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->latitude(), output);
  }

  // required double longitude = 5 [(.dccl.field) = {
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->longitude(), output);
  }

  // required float x = 6 [(.dccl.field) = {
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->x(), output);
  }

  // required float y = 7 [(.dccl.field) = {
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->y(), output);
  }

  // required float z = 8 [(.dccl.field) = {
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->z(), output);
  }

  // required float quat_x = 9 [(.dccl.field) = {
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->quat_x(), output);
  }

  // required float quat_y = 10 [(.dccl.field) = {
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->quat_y(), output);
  }

  // required float quat_z = 11 [(.dccl.field) = {
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->quat_z(), output);
  }

  // required float quat_w = 12 [(.dccl.field) = {
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->quat_w(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PoseResponse)
}

::google::protobuf::uint8* PoseResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:PoseResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 source = 1 [(.dccl.field) = {
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->source(), target);
  }

  // required int32 destination = 2 [(.dccl.field) = {
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->destination(), target);
  }

  // required double time = 3 [(.dccl.field) = {
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->time(), target);
  }

  // required double latitude = 4 [(.dccl.field) = {
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->latitude(), target);
  }

  // required double longitude = 5 [(.dccl.field) = {
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->longitude(), target);
  }

  // required float x = 6 [(.dccl.field) = {
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->x(), target);
  }

  // required float y = 7 [(.dccl.field) = {
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->y(), target);
  }

  // required float z = 8 [(.dccl.field) = {
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->z(), target);
  }

  // required float quat_x = 9 [(.dccl.field) = {
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->quat_x(), target);
  }

  // required float quat_y = 10 [(.dccl.field) = {
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->quat_y(), target);
  }

  // required float quat_z = 11 [(.dccl.field) = {
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->quat_z(), target);
  }

  // required float quat_w = 12 [(.dccl.field) = {
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->quat_w(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PoseResponse)
  return target;
}

size_t PoseResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:PoseResponse)
  size_t total_size = 0;

  if (has_source()) {
    // required int32 source = 1 [(.dccl.field) = {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->source());
  }

  if (has_destination()) {
    // required int32 destination = 2 [(.dccl.field) = {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->destination());
  }

  if (has_time()) {
    // required double time = 3 [(.dccl.field) = {
    total_size += 1 + 8;
  }

  if (has_latitude()) {
    // required double latitude = 4 [(.dccl.field) = {
    total_size += 1 + 8;
  }

  if (has_longitude()) {
    // required double longitude = 5 [(.dccl.field) = {
    total_size += 1 + 8;
  }

  if (has_x()) {
    // required float x = 6 [(.dccl.field) = {
    total_size += 1 + 4;
  }

  if (has_y()) {
    // required float y = 7 [(.dccl.field) = {
    total_size += 1 + 4;
  }

  if (has_z()) {
    // required float z = 8 [(.dccl.field) = {
    total_size += 1 + 4;
  }

  if (has_quat_x()) {
    // required float quat_x = 9 [(.dccl.field) = {
    total_size += 1 + 4;
  }

  if (has_quat_y()) {
    // required float quat_y = 10 [(.dccl.field) = {
    total_size += 1 + 4;
  }

  if (has_quat_z()) {
    // required float quat_z = 11 [(.dccl.field) = {
    total_size += 1 + 4;
  }

  if (has_quat_w()) {
    // required float quat_w = 12 [(.dccl.field) = {
    total_size += 1 + 4;
  }

  return total_size;
}
size_t PoseResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PoseResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000fff) ^ 0x00000fff) == 0) {  // All required fields are present.
    // required int32 source = 1 [(.dccl.field) = {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->source());

    // required int32 destination = 2 [(.dccl.field) = {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->destination());

    // required double time = 3 [(.dccl.field) = {
    total_size += 1 + 8;

    // required double latitude = 4 [(.dccl.field) = {
    total_size += 1 + 8;

    // required double longitude = 5 [(.dccl.field) = {
    total_size += 1 + 8;

    // required float x = 6 [(.dccl.field) = {
    total_size += 1 + 4;

    // required float y = 7 [(.dccl.field) = {
    total_size += 1 + 4;

    // required float z = 8 [(.dccl.field) = {
    total_size += 1 + 4;

    // required float quat_x = 9 [(.dccl.field) = {
    total_size += 1 + 4;

    // required float quat_y = 10 [(.dccl.field) = {
    total_size += 1 + 4;

    // required float quat_z = 11 [(.dccl.field) = {
    total_size += 1 + 4;

    // required float quat_w = 12 [(.dccl.field) = {
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PoseResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PoseResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PoseResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PoseResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PoseResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PoseResponse)
    MergeFrom(*source);
  }
}

void PoseResponse::MergeFrom(const PoseResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PoseResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      source_ = from.source_;
    }
    if (cached_has_bits & 0x00000002u) {
      destination_ = from.destination_;
    }
    if (cached_has_bits & 0x00000004u) {
      time_ = from.time_;
    }
    if (cached_has_bits & 0x00000008u) {
      latitude_ = from.latitude_;
    }
    if (cached_has_bits & 0x00000010u) {
      longitude_ = from.longitude_;
    }
    if (cached_has_bits & 0x00000020u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000040u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000080u) {
      z_ = from.z_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      quat_x_ = from.quat_x_;
    }
    if (cached_has_bits & 0x00000200u) {
      quat_y_ = from.quat_y_;
    }
    if (cached_has_bits & 0x00000400u) {
      quat_z_ = from.quat_z_;
    }
    if (cached_has_bits & 0x00000800u) {
      quat_w_ = from.quat_w_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PoseResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PoseResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PoseResponse::CopyFrom(const PoseResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PoseResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PoseResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000fff) != 0x00000fff) return false;
  return true;
}

void PoseResponse::Swap(PoseResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PoseResponse::InternalSwap(PoseResponse* other) {
  using std::swap;
  swap(source_, other->source_);
  swap(destination_, other->destination_);
  swap(time_, other->time_);
  swap(latitude_, other->latitude_);
  swap(longitude_, other->longitude_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  swap(quat_x_, other->quat_x_);
  swap(quat_y_, other->quat_y_);
  swap(quat_z_, other->quat_z_);
  swap(quat_w_, other->quat_w_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PoseResponse::GetMetadata() const {
  protobuf_src_2fproto_2fgoby_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fproto_2fgoby_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PowerCommand::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PowerCommand::kSourceFieldNumber;
const int PowerCommand::kDestinationFieldNumber;
const int PowerCommand::kTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PowerCommand::PowerCommand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_src_2fproto_2fgoby_5fmsgs_2eproto::scc_info_PowerCommand.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:PowerCommand)
}
PowerCommand::PowerCommand(const PowerCommand& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&source_, &from.source_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_) -
    reinterpret_cast<char*>(&source_)) + sizeof(time_));
  // @@protoc_insertion_point(copy_constructor:PowerCommand)
}

void PowerCommand::SharedCtor() {
  ::memset(&source_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_) -
      reinterpret_cast<char*>(&source_)) + sizeof(time_));
}

PowerCommand::~PowerCommand() {
  // @@protoc_insertion_point(destructor:PowerCommand)
  SharedDtor();
}

void PowerCommand::SharedDtor() {
}

void PowerCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PowerCommand::descriptor() {
  ::protobuf_src_2fproto_2fgoby_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fproto_2fgoby_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PowerCommand& PowerCommand::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_src_2fproto_2fgoby_5fmsgs_2eproto::scc_info_PowerCommand.base);
  return *internal_default_instance();
}


void PowerCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:PowerCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&source_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_) -
        reinterpret_cast<char*>(&source_)) + sizeof(time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PowerCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PowerCommand)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 source = 1 [(.dccl.field) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_source();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &source_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 destination = 2 [(.dccl.field) = {
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_destination();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &destination_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double time = 3 [(.dccl.field) = {
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PowerCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PowerCommand)
  return false;
#undef DO_
}

void PowerCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PowerCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 source = 1 [(.dccl.field) = {
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->source(), output);
  }

  // required int32 destination = 2 [(.dccl.field) = {
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->destination(), output);
  }

  // optional double time = 3 [(.dccl.field) = {
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PowerCommand)
}

::google::protobuf::uint8* PowerCommand::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:PowerCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 source = 1 [(.dccl.field) = {
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->source(), target);
  }

  // required int32 destination = 2 [(.dccl.field) = {
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->destination(), target);
  }

  // optional double time = 3 [(.dccl.field) = {
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PowerCommand)
  return target;
}

size_t PowerCommand::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:PowerCommand)
  size_t total_size = 0;

  if (has_source()) {
    // required int32 source = 1 [(.dccl.field) = {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->source());
  }

  if (has_destination()) {
    // required int32 destination = 2 [(.dccl.field) = {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->destination());
  }

  return total_size;
}
size_t PowerCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PowerCommand)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 source = 1 [(.dccl.field) = {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->source());

    // required int32 destination = 2 [(.dccl.field) = {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->destination());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional double time = 3 [(.dccl.field) = {
  if (has_time()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PowerCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PowerCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const PowerCommand* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PowerCommand>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PowerCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PowerCommand)
    MergeFrom(*source);
  }
}

void PowerCommand::MergeFrom(const PowerCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PowerCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      source_ = from.source_;
    }
    if (cached_has_bits & 0x00000002u) {
      destination_ = from.destination_;
    }
    if (cached_has_bits & 0x00000004u) {
      time_ = from.time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PowerCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PowerCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PowerCommand::CopyFrom(const PowerCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PowerCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PowerCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void PowerCommand::Swap(PowerCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PowerCommand::InternalSwap(PowerCommand* other) {
  using std::swap;
  swap(source_, other->source_);
  swap(destination_, other->destination_);
  swap(time_, other->time_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PowerCommand::GetMetadata() const {
  protobuf_src_2fproto_2fgoby_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fproto_2fgoby_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PowerResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PowerResponse::kSourceFieldNumber;
const int PowerResponse::kDestinationFieldNumber;
const int PowerResponse::kTimeFieldNumber;
const int PowerResponse::kBatteryVoltageFieldNumber;
const int PowerResponse::kCurrentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PowerResponse::PowerResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_src_2fproto_2fgoby_5fmsgs_2eproto::scc_info_PowerResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:PowerResponse)
}
PowerResponse::PowerResponse(const PowerResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&source_, &from.source_,
    static_cast<size_t>(reinterpret_cast<char*>(&current_) -
    reinterpret_cast<char*>(&source_)) + sizeof(current_));
  // @@protoc_insertion_point(copy_constructor:PowerResponse)
}

void PowerResponse::SharedCtor() {
  ::memset(&source_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&current_) -
      reinterpret_cast<char*>(&source_)) + sizeof(current_));
}

PowerResponse::~PowerResponse() {
  // @@protoc_insertion_point(destructor:PowerResponse)
  SharedDtor();
}

void PowerResponse::SharedDtor() {
}

void PowerResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PowerResponse::descriptor() {
  ::protobuf_src_2fproto_2fgoby_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fproto_2fgoby_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PowerResponse& PowerResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_src_2fproto_2fgoby_5fmsgs_2eproto::scc_info_PowerResponse.base);
  return *internal_default_instance();
}


void PowerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:PowerResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    ::memset(&source_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&current_) -
        reinterpret_cast<char*>(&source_)) + sizeof(current_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PowerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PowerResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 source = 1 [(.dccl.field) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_source();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &source_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 destination = 2 [(.dccl.field) = {
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_destination();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &destination_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double time = 3 [(.dccl.field) = {
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float battery_voltage = 4 [(.dccl.field) = {
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_battery_voltage();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &battery_voltage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float current = 5 [(.dccl.field) = {
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_current();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &current_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PowerResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PowerResponse)
  return false;
#undef DO_
}

void PowerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PowerResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 source = 1 [(.dccl.field) = {
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->source(), output);
  }

  // required int32 destination = 2 [(.dccl.field) = {
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->destination(), output);
  }

  // optional double time = 3 [(.dccl.field) = {
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->time(), output);
  }

  // required float battery_voltage = 4 [(.dccl.field) = {
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->battery_voltage(), output);
  }

  // required float current = 5 [(.dccl.field) = {
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->current(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PowerResponse)
}

::google::protobuf::uint8* PowerResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:PowerResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 source = 1 [(.dccl.field) = {
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->source(), target);
  }

  // required int32 destination = 2 [(.dccl.field) = {
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->destination(), target);
  }

  // optional double time = 3 [(.dccl.field) = {
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->time(), target);
  }

  // required float battery_voltage = 4 [(.dccl.field) = {
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->battery_voltage(), target);
  }

  // required float current = 5 [(.dccl.field) = {
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->current(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PowerResponse)
  return target;
}

size_t PowerResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:PowerResponse)
  size_t total_size = 0;

  if (has_source()) {
    // required int32 source = 1 [(.dccl.field) = {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->source());
  }

  if (has_destination()) {
    // required int32 destination = 2 [(.dccl.field) = {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->destination());
  }

  if (has_battery_voltage()) {
    // required float battery_voltage = 4 [(.dccl.field) = {
    total_size += 1 + 4;
  }

  if (has_current()) {
    // required float current = 5 [(.dccl.field) = {
    total_size += 1 + 4;
  }

  return total_size;
}
size_t PowerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PowerResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001b) ^ 0x0000001b) == 0) {  // All required fields are present.
    // required int32 source = 1 [(.dccl.field) = {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->source());

    // required int32 destination = 2 [(.dccl.field) = {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->destination());

    // required float battery_voltage = 4 [(.dccl.field) = {
    total_size += 1 + 4;

    // required float current = 5 [(.dccl.field) = {
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional double time = 3 [(.dccl.field) = {
  if (has_time()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PowerResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PowerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PowerResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PowerResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PowerResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PowerResponse)
    MergeFrom(*source);
  }
}

void PowerResponse::MergeFrom(const PowerResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PowerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      source_ = from.source_;
    }
    if (cached_has_bits & 0x00000002u) {
      destination_ = from.destination_;
    }
    if (cached_has_bits & 0x00000004u) {
      time_ = from.time_;
    }
    if (cached_has_bits & 0x00000008u) {
      battery_voltage_ = from.battery_voltage_;
    }
    if (cached_has_bits & 0x00000010u) {
      current_ = from.current_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PowerResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PowerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PowerResponse::CopyFrom(const PowerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PowerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PowerResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001b) != 0x0000001b) return false;
  return true;
}

void PowerResponse::Swap(PowerResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PowerResponse::InternalSwap(PowerResponse* other) {
  using std::swap;
  swap(source_, other->source_);
  swap(destination_, other->destination_);
  swap(time_, other->time_);
  swap(battery_voltage_, other->battery_voltage_);
  swap(current_, other->current_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PowerResponse::GetMetadata() const {
  protobuf_src_2fproto_2fgoby_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fproto_2fgoby_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RelativePoseCommand::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RelativePoseCommand::kSourceFieldNumber;
const int RelativePoseCommand::kDestinationFieldNumber;
const int RelativePoseCommand::kTimeFieldNumber;
const int RelativePoseCommand::kParentFieldNumber;
const int RelativePoseCommand::kChildFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RelativePoseCommand::RelativePoseCommand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_src_2fproto_2fgoby_5fmsgs_2eproto::scc_info_RelativePoseCommand.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:RelativePoseCommand)
}
RelativePoseCommand::RelativePoseCommand(const RelativePoseCommand& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&source_, &from.source_,
    static_cast<size_t>(reinterpret_cast<char*>(&child_) -
    reinterpret_cast<char*>(&source_)) + sizeof(child_));
  // @@protoc_insertion_point(copy_constructor:RelativePoseCommand)
}

void RelativePoseCommand::SharedCtor() {
  ::memset(&source_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&child_) -
      reinterpret_cast<char*>(&source_)) + sizeof(child_));
}

RelativePoseCommand::~RelativePoseCommand() {
  // @@protoc_insertion_point(destructor:RelativePoseCommand)
  SharedDtor();
}

void RelativePoseCommand::SharedDtor() {
}

void RelativePoseCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RelativePoseCommand::descriptor() {
  ::protobuf_src_2fproto_2fgoby_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fproto_2fgoby_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RelativePoseCommand& RelativePoseCommand::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_src_2fproto_2fgoby_5fmsgs_2eproto::scc_info_RelativePoseCommand.base);
  return *internal_default_instance();
}


void RelativePoseCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:RelativePoseCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    ::memset(&source_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&child_) -
        reinterpret_cast<char*>(&source_)) + sizeof(child_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RelativePoseCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RelativePoseCommand)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 source = 1 [(.dccl.field) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_source();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &source_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 destination = 2 [(.dccl.field) = {
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_destination();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &destination_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double time = 3 [(.dccl.field) = {
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .RelativePoseCommand.Frame parent = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::RelativePoseCommand_Frame_IsValid(value)) {
            set_parent(static_cast< ::RelativePoseCommand_Frame >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .RelativePoseCommand.Frame child = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::RelativePoseCommand_Frame_IsValid(value)) {
            set_child(static_cast< ::RelativePoseCommand_Frame >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RelativePoseCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RelativePoseCommand)
  return false;
#undef DO_
}

void RelativePoseCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RelativePoseCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 source = 1 [(.dccl.field) = {
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->source(), output);
  }

  // required int32 destination = 2 [(.dccl.field) = {
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->destination(), output);
  }

  // optional double time = 3 [(.dccl.field) = {
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->time(), output);
  }

  // required .RelativePoseCommand.Frame parent = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->parent(), output);
  }

  // required .RelativePoseCommand.Frame child = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->child(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RelativePoseCommand)
}

::google::protobuf::uint8* RelativePoseCommand::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:RelativePoseCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 source = 1 [(.dccl.field) = {
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->source(), target);
  }

  // required int32 destination = 2 [(.dccl.field) = {
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->destination(), target);
  }

  // optional double time = 3 [(.dccl.field) = {
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->time(), target);
  }

  // required .RelativePoseCommand.Frame parent = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->parent(), target);
  }

  // required .RelativePoseCommand.Frame child = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->child(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RelativePoseCommand)
  return target;
}

size_t RelativePoseCommand::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:RelativePoseCommand)
  size_t total_size = 0;

  if (has_source()) {
    // required int32 source = 1 [(.dccl.field) = {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->source());
  }

  if (has_destination()) {
    // required int32 destination = 2 [(.dccl.field) = {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->destination());
  }

  if (has_parent()) {
    // required .RelativePoseCommand.Frame parent = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->parent());
  }

  if (has_child()) {
    // required .RelativePoseCommand.Frame child = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->child());
  }

  return total_size;
}
size_t RelativePoseCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RelativePoseCommand)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001b) ^ 0x0000001b) == 0) {  // All required fields are present.
    // required int32 source = 1 [(.dccl.field) = {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->source());

    // required int32 destination = 2 [(.dccl.field) = {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->destination());

    // required .RelativePoseCommand.Frame parent = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->parent());

    // required .RelativePoseCommand.Frame child = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->child());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional double time = 3 [(.dccl.field) = {
  if (has_time()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RelativePoseCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RelativePoseCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const RelativePoseCommand* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RelativePoseCommand>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RelativePoseCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RelativePoseCommand)
    MergeFrom(*source);
  }
}

void RelativePoseCommand::MergeFrom(const RelativePoseCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RelativePoseCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      source_ = from.source_;
    }
    if (cached_has_bits & 0x00000002u) {
      destination_ = from.destination_;
    }
    if (cached_has_bits & 0x00000004u) {
      time_ = from.time_;
    }
    if (cached_has_bits & 0x00000008u) {
      parent_ = from.parent_;
    }
    if (cached_has_bits & 0x00000010u) {
      child_ = from.child_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RelativePoseCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RelativePoseCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RelativePoseCommand::CopyFrom(const RelativePoseCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RelativePoseCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelativePoseCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001b) != 0x0000001b) return false;
  return true;
}

void RelativePoseCommand::Swap(RelativePoseCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RelativePoseCommand::InternalSwap(RelativePoseCommand* other) {
  using std::swap;
  swap(source_, other->source_);
  swap(destination_, other->destination_);
  swap(time_, other->time_);
  swap(parent_, other->parent_);
  swap(child_, other->child_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RelativePoseCommand::GetMetadata() const {
  protobuf_src_2fproto_2fgoby_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fproto_2fgoby_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RelativePoseResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RelativePoseResponse::kSourceFieldNumber;
const int RelativePoseResponse::kDestinationFieldNumber;
const int RelativePoseResponse::kTimeFieldNumber;
const int RelativePoseResponse::kParentFieldNumber;
const int RelativePoseResponse::kChildFieldNumber;
const int RelativePoseResponse::kLatitudeFieldNumber;
const int RelativePoseResponse::kLongitudeFieldNumber;
const int RelativePoseResponse::kXFieldNumber;
const int RelativePoseResponse::kYFieldNumber;
const int RelativePoseResponse::kZFieldNumber;
const int RelativePoseResponse::kQuatXFieldNumber;
const int RelativePoseResponse::kQuatYFieldNumber;
const int RelativePoseResponse::kQuatZFieldNumber;
const int RelativePoseResponse::kQuatWFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RelativePoseResponse::RelativePoseResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_src_2fproto_2fgoby_5fmsgs_2eproto::scc_info_RelativePoseResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:RelativePoseResponse)
}
RelativePoseResponse::RelativePoseResponse(const RelativePoseResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&source_, &from.source_,
    static_cast<size_t>(reinterpret_cast<char*>(&quat_w_) -
    reinterpret_cast<char*>(&source_)) + sizeof(quat_w_));
  // @@protoc_insertion_point(copy_constructor:RelativePoseResponse)
}

void RelativePoseResponse::SharedCtor() {
  ::memset(&source_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&quat_w_) -
      reinterpret_cast<char*>(&source_)) + sizeof(quat_w_));
}

RelativePoseResponse::~RelativePoseResponse() {
  // @@protoc_insertion_point(destructor:RelativePoseResponse)
  SharedDtor();
}

void RelativePoseResponse::SharedDtor() {
}

void RelativePoseResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RelativePoseResponse::descriptor() {
  ::protobuf_src_2fproto_2fgoby_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fproto_2fgoby_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RelativePoseResponse& RelativePoseResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_src_2fproto_2fgoby_5fmsgs_2eproto::scc_info_RelativePoseResponse.base);
  return *internal_default_instance();
}


void RelativePoseResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:RelativePoseResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&source_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&x_) -
        reinterpret_cast<char*>(&source_)) + sizeof(x_));
  }
  if (cached_has_bits & 16128u) {
    ::memset(&y_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&quat_w_) -
        reinterpret_cast<char*>(&y_)) + sizeof(quat_w_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RelativePoseResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RelativePoseResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 source = 1 [(.dccl.field) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_source();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &source_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 destination = 2 [(.dccl.field) = {
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_destination();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &destination_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double time = 3 [(.dccl.field) = {
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .RelativePoseResponse.Frame parent = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::RelativePoseResponse_Frame_IsValid(value)) {
            set_parent(static_cast< ::RelativePoseResponse_Frame >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .RelativePoseResponse.Frame child = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::RelativePoseResponse_Frame_IsValid(value)) {
            set_child(static_cast< ::RelativePoseResponse_Frame >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double latitude = 6 [(.dccl.field) = {
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_latitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double longitude = 7 [(.dccl.field) = {
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          set_has_longitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float x = 8 [(.dccl.field) = {
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float y = 9 [(.dccl.field) = {
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float z = 10 [(.dccl.field) = {
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {
          set_has_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float quat_x = 11 [(.dccl.field) = {
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u /* 93 & 0xFF */)) {
          set_has_quat_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &quat_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float quat_y = 12 [(.dccl.field) = {
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u /* 101 & 0xFF */)) {
          set_has_quat_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &quat_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float quat_z = 13 [(.dccl.field) = {
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(109u /* 109 & 0xFF */)) {
          set_has_quat_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &quat_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float quat_w = 14 [(.dccl.field) = {
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(117u /* 117 & 0xFF */)) {
          set_has_quat_w();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &quat_w_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RelativePoseResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RelativePoseResponse)
  return false;
#undef DO_
}

void RelativePoseResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RelativePoseResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 source = 1 [(.dccl.field) = {
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->source(), output);
  }

  // required int32 destination = 2 [(.dccl.field) = {
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->destination(), output);
  }

  // optional double time = 3 [(.dccl.field) = {
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->time(), output);
  }

  // required .RelativePoseResponse.Frame parent = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->parent(), output);
  }

  // required .RelativePoseResponse.Frame child = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->child(), output);
  }

  // required double latitude = 6 [(.dccl.field) = {
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->latitude(), output);
  }

  // required double longitude = 7 [(.dccl.field) = {
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->longitude(), output);
  }

  // required float x = 8 [(.dccl.field) = {
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->x(), output);
  }

  // required float y = 9 [(.dccl.field) = {
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->y(), output);
  }

  // required float z = 10 [(.dccl.field) = {
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->z(), output);
  }

  // required float quat_x = 11 [(.dccl.field) = {
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->quat_x(), output);
  }

  // required float quat_y = 12 [(.dccl.field) = {
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->quat_y(), output);
  }

  // required float quat_z = 13 [(.dccl.field) = {
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->quat_z(), output);
  }

  // required float quat_w = 14 [(.dccl.field) = {
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->quat_w(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RelativePoseResponse)
}

::google::protobuf::uint8* RelativePoseResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:RelativePoseResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 source = 1 [(.dccl.field) = {
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->source(), target);
  }

  // required int32 destination = 2 [(.dccl.field) = {
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->destination(), target);
  }

  // optional double time = 3 [(.dccl.field) = {
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->time(), target);
  }

  // required .RelativePoseResponse.Frame parent = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->parent(), target);
  }

  // required .RelativePoseResponse.Frame child = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->child(), target);
  }

  // required double latitude = 6 [(.dccl.field) = {
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->latitude(), target);
  }

  // required double longitude = 7 [(.dccl.field) = {
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->longitude(), target);
  }

  // required float x = 8 [(.dccl.field) = {
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->x(), target);
  }

  // required float y = 9 [(.dccl.field) = {
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->y(), target);
  }

  // required float z = 10 [(.dccl.field) = {
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->z(), target);
  }

  // required float quat_x = 11 [(.dccl.field) = {
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->quat_x(), target);
  }

  // required float quat_y = 12 [(.dccl.field) = {
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->quat_y(), target);
  }

  // required float quat_z = 13 [(.dccl.field) = {
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->quat_z(), target);
  }

  // required float quat_w = 14 [(.dccl.field) = {
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->quat_w(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RelativePoseResponse)
  return target;
}

size_t RelativePoseResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:RelativePoseResponse)
  size_t total_size = 0;

  if (has_source()) {
    // required int32 source = 1 [(.dccl.field) = {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->source());
  }

  if (has_destination()) {
    // required int32 destination = 2 [(.dccl.field) = {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->destination());
  }

  if (has_parent()) {
    // required .RelativePoseResponse.Frame parent = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->parent());
  }

  if (has_child()) {
    // required .RelativePoseResponse.Frame child = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->child());
  }

  if (has_latitude()) {
    // required double latitude = 6 [(.dccl.field) = {
    total_size += 1 + 8;
  }

  if (has_longitude()) {
    // required double longitude = 7 [(.dccl.field) = {
    total_size += 1 + 8;
  }

  if (has_x()) {
    // required float x = 8 [(.dccl.field) = {
    total_size += 1 + 4;
  }

  if (has_y()) {
    // required float y = 9 [(.dccl.field) = {
    total_size += 1 + 4;
  }

  if (has_z()) {
    // required float z = 10 [(.dccl.field) = {
    total_size += 1 + 4;
  }

  if (has_quat_x()) {
    // required float quat_x = 11 [(.dccl.field) = {
    total_size += 1 + 4;
  }

  if (has_quat_y()) {
    // required float quat_y = 12 [(.dccl.field) = {
    total_size += 1 + 4;
  }

  if (has_quat_z()) {
    // required float quat_z = 13 [(.dccl.field) = {
    total_size += 1 + 4;
  }

  if (has_quat_w()) {
    // required float quat_w = 14 [(.dccl.field) = {
    total_size += 1 + 4;
  }

  return total_size;
}
size_t RelativePoseResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RelativePoseResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00003ffb) ^ 0x00003ffb) == 0) {  // All required fields are present.
    // required int32 source = 1 [(.dccl.field) = {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->source());

    // required int32 destination = 2 [(.dccl.field) = {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->destination());

    // required .RelativePoseResponse.Frame parent = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->parent());

    // required .RelativePoseResponse.Frame child = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->child());

    // required double latitude = 6 [(.dccl.field) = {
    total_size += 1 + 8;

    // required double longitude = 7 [(.dccl.field) = {
    total_size += 1 + 8;

    // required float x = 8 [(.dccl.field) = {
    total_size += 1 + 4;

    // required float y = 9 [(.dccl.field) = {
    total_size += 1 + 4;

    // required float z = 10 [(.dccl.field) = {
    total_size += 1 + 4;

    // required float quat_x = 11 [(.dccl.field) = {
    total_size += 1 + 4;

    // required float quat_y = 12 [(.dccl.field) = {
    total_size += 1 + 4;

    // required float quat_z = 13 [(.dccl.field) = {
    total_size += 1 + 4;

    // required float quat_w = 14 [(.dccl.field) = {
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional double time = 3 [(.dccl.field) = {
  if (has_time()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RelativePoseResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RelativePoseResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RelativePoseResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RelativePoseResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RelativePoseResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RelativePoseResponse)
    MergeFrom(*source);
  }
}

void RelativePoseResponse::MergeFrom(const RelativePoseResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RelativePoseResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      source_ = from.source_;
    }
    if (cached_has_bits & 0x00000002u) {
      destination_ = from.destination_;
    }
    if (cached_has_bits & 0x00000004u) {
      time_ = from.time_;
    }
    if (cached_has_bits & 0x00000008u) {
      parent_ = from.parent_;
    }
    if (cached_has_bits & 0x00000010u) {
      child_ = from.child_;
    }
    if (cached_has_bits & 0x00000020u) {
      latitude_ = from.latitude_;
    }
    if (cached_has_bits & 0x00000040u) {
      longitude_ = from.longitude_;
    }
    if (cached_has_bits & 0x00000080u) {
      x_ = from.x_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16128u) {
    if (cached_has_bits & 0x00000100u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000200u) {
      z_ = from.z_;
    }
    if (cached_has_bits & 0x00000400u) {
      quat_x_ = from.quat_x_;
    }
    if (cached_has_bits & 0x00000800u) {
      quat_y_ = from.quat_y_;
    }
    if (cached_has_bits & 0x00001000u) {
      quat_z_ = from.quat_z_;
    }
    if (cached_has_bits & 0x00002000u) {
      quat_w_ = from.quat_w_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RelativePoseResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RelativePoseResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RelativePoseResponse::CopyFrom(const RelativePoseResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RelativePoseResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelativePoseResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00003ffb) != 0x00003ffb) return false;
  return true;
}

void RelativePoseResponse::Swap(RelativePoseResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RelativePoseResponse::InternalSwap(RelativePoseResponse* other) {
  using std::swap;
  swap(source_, other->source_);
  swap(destination_, other->destination_);
  swap(time_, other->time_);
  swap(parent_, other->parent_);
  swap(child_, other->child_);
  swap(latitude_, other->latitude_);
  swap(longitude_, other->longitude_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  swap(quat_x_, other->quat_x_);
  swap(quat_y_, other->quat_y_);
  swap(quat_z_, other->quat_z_);
  swap(quat_w_, other->quat_w_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RelativePoseResponse::GetMetadata() const {
  protobuf_src_2fproto_2fgoby_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fproto_2fgoby_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ControllerStateCommand::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ControllerStateCommand::kSourceFieldNumber;
const int ControllerStateCommand::kDestinationFieldNumber;
const int ControllerStateCommand::kTimeFieldNumber;
const int ControllerStateCommand::kModeFieldNumber;
const int ControllerStateCommand::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ControllerStateCommand::ControllerStateCommand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_src_2fproto_2fgoby_5fmsgs_2eproto::scc_info_ControllerStateCommand.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ControllerStateCommand)
}
ControllerStateCommand::ControllerStateCommand(const ControllerStateCommand& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&source_, &from.source_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&source_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:ControllerStateCommand)
}

void ControllerStateCommand::SharedCtor() {
  ::memset(&source_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&source_)) + sizeof(state_));
}

ControllerStateCommand::~ControllerStateCommand() {
  // @@protoc_insertion_point(destructor:ControllerStateCommand)
  SharedDtor();
}

void ControllerStateCommand::SharedDtor() {
}

void ControllerStateCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ControllerStateCommand::descriptor() {
  ::protobuf_src_2fproto_2fgoby_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fproto_2fgoby_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ControllerStateCommand& ControllerStateCommand::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_src_2fproto_2fgoby_5fmsgs_2eproto::scc_info_ControllerStateCommand.base);
  return *internal_default_instance();
}


void ControllerStateCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:ControllerStateCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    ::memset(&source_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&state_) -
        reinterpret_cast<char*>(&source_)) + sizeof(state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ControllerStateCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ControllerStateCommand)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 source = 1 [(.dccl.field) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_source();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &source_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 destination = 2 [(.dccl.field) = {
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_destination();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &destination_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double time = 3 [(.dccl.field) = {
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ControllerStateCommand.Mode mode = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ControllerStateCommand_Mode_IsValid(value)) {
            set_mode(static_cast< ::ControllerStateCommand_Mode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ControllerStateCommand.ControllerState state = 5 [(.dccl.field) = {
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ControllerStateCommand_ControllerState_IsValid(value)) {
            set_state(static_cast< ::ControllerStateCommand_ControllerState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ControllerStateCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ControllerStateCommand)
  return false;
#undef DO_
}

void ControllerStateCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ControllerStateCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 source = 1 [(.dccl.field) = {
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->source(), output);
  }

  // required int32 destination = 2 [(.dccl.field) = {
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->destination(), output);
  }

  // optional double time = 3 [(.dccl.field) = {
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->time(), output);
  }

  // required .ControllerStateCommand.Mode mode = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->mode(), output);
  }

  // optional .ControllerStateCommand.ControllerState state = 5 [(.dccl.field) = {
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->state(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ControllerStateCommand)
}

::google::protobuf::uint8* ControllerStateCommand::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ControllerStateCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 source = 1 [(.dccl.field) = {
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->source(), target);
  }

  // required int32 destination = 2 [(.dccl.field) = {
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->destination(), target);
  }

  // optional double time = 3 [(.dccl.field) = {
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->time(), target);
  }

  // required .ControllerStateCommand.Mode mode = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->mode(), target);
  }

  // optional .ControllerStateCommand.ControllerState state = 5 [(.dccl.field) = {
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->state(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ControllerStateCommand)
  return target;
}

size_t ControllerStateCommand::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ControllerStateCommand)
  size_t total_size = 0;

  if (has_source()) {
    // required int32 source = 1 [(.dccl.field) = {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->source());
  }

  if (has_destination()) {
    // required int32 destination = 2 [(.dccl.field) = {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->destination());
  }

  if (has_mode()) {
    // required .ControllerStateCommand.Mode mode = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
  }

  return total_size;
}
size_t ControllerStateCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ControllerStateCommand)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000b) ^ 0x0000000b) == 0) {  // All required fields are present.
    // required int32 source = 1 [(.dccl.field) = {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->source());

    // required int32 destination = 2 [(.dccl.field) = {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->destination());

    // required .ControllerStateCommand.Mode mode = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional double time = 3 [(.dccl.field) = {
  if (has_time()) {
    total_size += 1 + 8;
  }

  // optional .ControllerStateCommand.ControllerState state = 5 [(.dccl.field) = {
  if (has_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ControllerStateCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ControllerStateCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const ControllerStateCommand* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ControllerStateCommand>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ControllerStateCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ControllerStateCommand)
    MergeFrom(*source);
  }
}

void ControllerStateCommand::MergeFrom(const ControllerStateCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ControllerStateCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      source_ = from.source_;
    }
    if (cached_has_bits & 0x00000002u) {
      destination_ = from.destination_;
    }
    if (cached_has_bits & 0x00000004u) {
      time_ = from.time_;
    }
    if (cached_has_bits & 0x00000008u) {
      mode_ = from.mode_;
    }
    if (cached_has_bits & 0x00000010u) {
      state_ = from.state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ControllerStateCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ControllerStateCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControllerStateCommand::CopyFrom(const ControllerStateCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ControllerStateCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControllerStateCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;
  return true;
}

void ControllerStateCommand::Swap(ControllerStateCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ControllerStateCommand::InternalSwap(ControllerStateCommand* other) {
  using std::swap;
  swap(source_, other->source_);
  swap(destination_, other->destination_);
  swap(time_, other->time_);
  swap(mode_, other->mode_);
  swap(state_, other->state_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ControllerStateCommand::GetMetadata() const {
  protobuf_src_2fproto_2fgoby_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fproto_2fgoby_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ControllerStateResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ControllerStateResponse::kSourceFieldNumber;
const int ControllerStateResponse::kDestinationFieldNumber;
const int ControllerStateResponse::kTimeFieldNumber;
const int ControllerStateResponse::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ControllerStateResponse::ControllerStateResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_src_2fproto_2fgoby_5fmsgs_2eproto::scc_info_ControllerStateResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ControllerStateResponse)
}
ControllerStateResponse::ControllerStateResponse(const ControllerStateResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&source_, &from.source_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&source_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:ControllerStateResponse)
}

void ControllerStateResponse::SharedCtor() {
  ::memset(&source_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&source_)) + sizeof(state_));
}

ControllerStateResponse::~ControllerStateResponse() {
  // @@protoc_insertion_point(destructor:ControllerStateResponse)
  SharedDtor();
}

void ControllerStateResponse::SharedDtor() {
}

void ControllerStateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ControllerStateResponse::descriptor() {
  ::protobuf_src_2fproto_2fgoby_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fproto_2fgoby_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ControllerStateResponse& ControllerStateResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_src_2fproto_2fgoby_5fmsgs_2eproto::scc_info_ControllerStateResponse.base);
  return *internal_default_instance();
}


void ControllerStateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ControllerStateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&source_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&state_) -
        reinterpret_cast<char*>(&source_)) + sizeof(state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ControllerStateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ControllerStateResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 source = 1 [(.dccl.field) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_source();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &source_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 destination = 2 [(.dccl.field) = {
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_destination();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &destination_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double time = 3 [(.dccl.field) = {
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ControllerStateResponse.ControllerState state = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ControllerStateResponse_ControllerState_IsValid(value)) {
            set_state(static_cast< ::ControllerStateResponse_ControllerState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ControllerStateResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ControllerStateResponse)
  return false;
#undef DO_
}

void ControllerStateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ControllerStateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 source = 1 [(.dccl.field) = {
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->source(), output);
  }

  // required int32 destination = 2 [(.dccl.field) = {
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->destination(), output);
  }

  // optional double time = 3 [(.dccl.field) = {
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->time(), output);
  }

  // optional .ControllerStateResponse.ControllerState state = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->state(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ControllerStateResponse)
}

::google::protobuf::uint8* ControllerStateResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ControllerStateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 source = 1 [(.dccl.field) = {
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->source(), target);
  }

  // required int32 destination = 2 [(.dccl.field) = {
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->destination(), target);
  }

  // optional double time = 3 [(.dccl.field) = {
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->time(), target);
  }

  // optional .ControllerStateResponse.ControllerState state = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->state(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ControllerStateResponse)
  return target;
}

size_t ControllerStateResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ControllerStateResponse)
  size_t total_size = 0;

  if (has_source()) {
    // required int32 source = 1 [(.dccl.field) = {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->source());
  }

  if (has_destination()) {
    // required int32 destination = 2 [(.dccl.field) = {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->destination());
  }

  return total_size;
}
size_t ControllerStateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ControllerStateResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 source = 1 [(.dccl.field) = {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->source());

    // required int32 destination = 2 [(.dccl.field) = {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->destination());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 12u) {
    // optional double time = 3 [(.dccl.field) = {
    if (has_time()) {
      total_size += 1 + 8;
    }

    // optional .ControllerStateResponse.ControllerState state = 4;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ControllerStateResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ControllerStateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ControllerStateResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ControllerStateResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ControllerStateResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ControllerStateResponse)
    MergeFrom(*source);
  }
}

void ControllerStateResponse::MergeFrom(const ControllerStateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ControllerStateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      source_ = from.source_;
    }
    if (cached_has_bits & 0x00000002u) {
      destination_ = from.destination_;
    }
    if (cached_has_bits & 0x00000004u) {
      time_ = from.time_;
    }
    if (cached_has_bits & 0x00000008u) {
      state_ = from.state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ControllerStateResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ControllerStateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControllerStateResponse::CopyFrom(const ControllerStateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ControllerStateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControllerStateResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void ControllerStateResponse::Swap(ControllerStateResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ControllerStateResponse::InternalSwap(ControllerStateResponse* other) {
  using std::swap;
  swap(source_, other->source_);
  swap(destination_, other->destination_);
  swap(time_, other->time_);
  swap(state_, other->state_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ControllerStateResponse::GetMetadata() const {
  protobuf_src_2fproto_2fgoby_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fproto_2fgoby_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DirectControlCommand::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DirectControlCommand::kSourceFieldNumber;
const int DirectControlCommand::kDestinationFieldNumber;
const int DirectControlCommand::kTimeFieldNumber;
const int DirectControlCommand::kFrameFieldNumber;
const int DirectControlCommand::kXFieldNumber;
const int DirectControlCommand::kYFieldNumber;
const int DirectControlCommand::kZFieldNumber;
const int DirectControlCommand::kRollFieldNumber;
const int DirectControlCommand::kPitchFieldNumber;
const int DirectControlCommand::kYawFieldNumber;
const int DirectControlCommand::kUFieldNumber;
const int DirectControlCommand::kVFieldNumber;
const int DirectControlCommand::kWFieldNumber;
const int DirectControlCommand::kPFieldNumber;
const int DirectControlCommand::kQFieldNumber;
const int DirectControlCommand::kRFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DirectControlCommand::DirectControlCommand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_src_2fproto_2fgoby_5fmsgs_2eproto::scc_info_DirectControlCommand.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DirectControlCommand)
}
DirectControlCommand::DirectControlCommand(const DirectControlCommand& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&source_, &from.source_,
    static_cast<size_t>(reinterpret_cast<char*>(&r_) -
    reinterpret_cast<char*>(&source_)) + sizeof(r_));
  // @@protoc_insertion_point(copy_constructor:DirectControlCommand)
}

void DirectControlCommand::SharedCtor() {
  ::memset(&source_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&r_) -
      reinterpret_cast<char*>(&source_)) + sizeof(r_));
}

DirectControlCommand::~DirectControlCommand() {
  // @@protoc_insertion_point(destructor:DirectControlCommand)
  SharedDtor();
}

void DirectControlCommand::SharedDtor() {
}

void DirectControlCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DirectControlCommand::descriptor() {
  ::protobuf_src_2fproto_2fgoby_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fproto_2fgoby_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DirectControlCommand& DirectControlCommand::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_src_2fproto_2fgoby_5fmsgs_2eproto::scc_info_DirectControlCommand.base);
  return *internal_default_instance();
}


void DirectControlCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:DirectControlCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&source_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&roll_) -
        reinterpret_cast<char*>(&source_)) + sizeof(roll_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&pitch_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&r_) -
        reinterpret_cast<char*>(&pitch_)) + sizeof(r_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DirectControlCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DirectControlCommand)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 source = 1 [(.dccl.field) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_source();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &source_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 destination = 2 [(.dccl.field) = {
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_destination();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &destination_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double time = 3 [(.dccl.field) = {
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .DirectControlCommand.Frame frame = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DirectControlCommand_Frame_IsValid(value)) {
            set_frame(static_cast< ::DirectControlCommand_Frame >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float x = 5 [(.dccl.field) = {
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float y = 6 [(.dccl.field) = {
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float z = 7 [(.dccl.field) = {
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {
          set_has_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float roll = 8 [(.dccl.field) = {
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {
          set_has_roll();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &roll_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float pitch = 9 [(.dccl.field) = {
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {
          set_has_pitch();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pitch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float yaw = 10 [(.dccl.field) = {
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {
          set_has_yaw();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yaw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float u = 11 [(.dccl.field) = {
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u /* 93 & 0xFF */)) {
          set_has_u();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &u_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float v = 12 [(.dccl.field) = {
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u /* 101 & 0xFF */)) {
          set_has_v();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &v_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float w = 13 [(.dccl.field) = {
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(109u /* 109 & 0xFF */)) {
          set_has_w();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &w_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float p = 14 [(.dccl.field) = {
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(117u /* 117 & 0xFF */)) {
          set_has_p();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &p_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float q = 15 [(.dccl.field) = {
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(125u /* 125 & 0xFF */)) {
          set_has_q();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &q_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float r = 16 [(.dccl.field) = {
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(133u /* 133 & 0xFF */)) {
          set_has_r();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &r_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DirectControlCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DirectControlCommand)
  return false;
#undef DO_
}

void DirectControlCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DirectControlCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 source = 1 [(.dccl.field) = {
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->source(), output);
  }

  // required int32 destination = 2 [(.dccl.field) = {
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->destination(), output);
  }

  // optional double time = 3 [(.dccl.field) = {
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->time(), output);
  }

  // required .DirectControlCommand.Frame frame = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->frame(), output);
  }

  // required float x = 5 [(.dccl.field) = {
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->x(), output);
  }

  // required float y = 6 [(.dccl.field) = {
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->y(), output);
  }

  // required float z = 7 [(.dccl.field) = {
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->z(), output);
  }

  // required float roll = 8 [(.dccl.field) = {
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->roll(), output);
  }

  // required float pitch = 9 [(.dccl.field) = {
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->pitch(), output);
  }

  // required float yaw = 10 [(.dccl.field) = {
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->yaw(), output);
  }

  // required float u = 11 [(.dccl.field) = {
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->u(), output);
  }

  // required float v = 12 [(.dccl.field) = {
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->v(), output);
  }

  // required float w = 13 [(.dccl.field) = {
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->w(), output);
  }

  // required float p = 14 [(.dccl.field) = {
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->p(), output);
  }

  // required float q = 15 [(.dccl.field) = {
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->q(), output);
  }

  // required float r = 16 [(.dccl.field) = {
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->r(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DirectControlCommand)
}

::google::protobuf::uint8* DirectControlCommand::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DirectControlCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 source = 1 [(.dccl.field) = {
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->source(), target);
  }

  // required int32 destination = 2 [(.dccl.field) = {
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->destination(), target);
  }

  // optional double time = 3 [(.dccl.field) = {
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->time(), target);
  }

  // required .DirectControlCommand.Frame frame = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->frame(), target);
  }

  // required float x = 5 [(.dccl.field) = {
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->x(), target);
  }

  // required float y = 6 [(.dccl.field) = {
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->y(), target);
  }

  // required float z = 7 [(.dccl.field) = {
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->z(), target);
  }

  // required float roll = 8 [(.dccl.field) = {
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->roll(), target);
  }

  // required float pitch = 9 [(.dccl.field) = {
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->pitch(), target);
  }

  // required float yaw = 10 [(.dccl.field) = {
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->yaw(), target);
  }

  // required float u = 11 [(.dccl.field) = {
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->u(), target);
  }

  // required float v = 12 [(.dccl.field) = {
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->v(), target);
  }

  // required float w = 13 [(.dccl.field) = {
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->w(), target);
  }

  // required float p = 14 [(.dccl.field) = {
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->p(), target);
  }

  // required float q = 15 [(.dccl.field) = {
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->q(), target);
  }

  // required float r = 16 [(.dccl.field) = {
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->r(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DirectControlCommand)
  return target;
}

size_t DirectControlCommand::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:DirectControlCommand)
  size_t total_size = 0;

  if (has_source()) {
    // required int32 source = 1 [(.dccl.field) = {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->source());
  }

  if (has_destination()) {
    // required int32 destination = 2 [(.dccl.field) = {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->destination());
  }

  if (has_frame()) {
    // required .DirectControlCommand.Frame frame = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->frame());
  }

  if (has_x()) {
    // required float x = 5 [(.dccl.field) = {
    total_size += 1 + 4;
  }

  if (has_y()) {
    // required float y = 6 [(.dccl.field) = {
    total_size += 1 + 4;
  }

  if (has_z()) {
    // required float z = 7 [(.dccl.field) = {
    total_size += 1 + 4;
  }

  if (has_roll()) {
    // required float roll = 8 [(.dccl.field) = {
    total_size += 1 + 4;
  }

  if (has_pitch()) {
    // required float pitch = 9 [(.dccl.field) = {
    total_size += 1 + 4;
  }

  if (has_yaw()) {
    // required float yaw = 10 [(.dccl.field) = {
    total_size += 1 + 4;
  }

  if (has_u()) {
    // required float u = 11 [(.dccl.field) = {
    total_size += 1 + 4;
  }

  if (has_v()) {
    // required float v = 12 [(.dccl.field) = {
    total_size += 1 + 4;
  }

  if (has_w()) {
    // required float w = 13 [(.dccl.field) = {
    total_size += 1 + 4;
  }

  if (has_p()) {
    // required float p = 14 [(.dccl.field) = {
    total_size += 1 + 4;
  }

  if (has_q()) {
    // required float q = 15 [(.dccl.field) = {
    total_size += 1 + 4;
  }

  if (has_r()) {
    // required float r = 16 [(.dccl.field) = {
    total_size += 2 + 4;
  }

  return total_size;
}
size_t DirectControlCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DirectControlCommand)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000fffb) ^ 0x0000fffb) == 0) {  // All required fields are present.
    // required int32 source = 1 [(.dccl.field) = {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->source());

    // required int32 destination = 2 [(.dccl.field) = {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->destination());

    // required .DirectControlCommand.Frame frame = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->frame());

    // required float x = 5 [(.dccl.field) = {
    total_size += 1 + 4;

    // required float y = 6 [(.dccl.field) = {
    total_size += 1 + 4;

    // required float z = 7 [(.dccl.field) = {
    total_size += 1 + 4;

    // required float roll = 8 [(.dccl.field) = {
    total_size += 1 + 4;

    // required float pitch = 9 [(.dccl.field) = {
    total_size += 1 + 4;

    // required float yaw = 10 [(.dccl.field) = {
    total_size += 1 + 4;

    // required float u = 11 [(.dccl.field) = {
    total_size += 1 + 4;

    // required float v = 12 [(.dccl.field) = {
    total_size += 1 + 4;

    // required float w = 13 [(.dccl.field) = {
    total_size += 1 + 4;

    // required float p = 14 [(.dccl.field) = {
    total_size += 1 + 4;

    // required float q = 15 [(.dccl.field) = {
    total_size += 1 + 4;

    // required float r = 16 [(.dccl.field) = {
    total_size += 2 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional double time = 3 [(.dccl.field) = {
  if (has_time()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DirectControlCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DirectControlCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const DirectControlCommand* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DirectControlCommand>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DirectControlCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DirectControlCommand)
    MergeFrom(*source);
  }
}

void DirectControlCommand::MergeFrom(const DirectControlCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DirectControlCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      source_ = from.source_;
    }
    if (cached_has_bits & 0x00000002u) {
      destination_ = from.destination_;
    }
    if (cached_has_bits & 0x00000004u) {
      time_ = from.time_;
    }
    if (cached_has_bits & 0x00000008u) {
      frame_ = from.frame_;
    }
    if (cached_has_bits & 0x00000010u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000020u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000040u) {
      z_ = from.z_;
    }
    if (cached_has_bits & 0x00000080u) {
      roll_ = from.roll_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      pitch_ = from.pitch_;
    }
    if (cached_has_bits & 0x00000200u) {
      yaw_ = from.yaw_;
    }
    if (cached_has_bits & 0x00000400u) {
      u_ = from.u_;
    }
    if (cached_has_bits & 0x00000800u) {
      v_ = from.v_;
    }
    if (cached_has_bits & 0x00001000u) {
      w_ = from.w_;
    }
    if (cached_has_bits & 0x00002000u) {
      p_ = from.p_;
    }
    if (cached_has_bits & 0x00004000u) {
      q_ = from.q_;
    }
    if (cached_has_bits & 0x00008000u) {
      r_ = from.r_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DirectControlCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DirectControlCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DirectControlCommand::CopyFrom(const DirectControlCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DirectControlCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DirectControlCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000fffb) != 0x0000fffb) return false;
  return true;
}

void DirectControlCommand::Swap(DirectControlCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DirectControlCommand::InternalSwap(DirectControlCommand* other) {
  using std::swap;
  swap(source_, other->source_);
  swap(destination_, other->destination_);
  swap(time_, other->time_);
  swap(frame_, other->frame_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  swap(roll_, other->roll_);
  swap(pitch_, other->pitch_);
  swap(yaw_, other->yaw_);
  swap(u_, other->u_);
  swap(v_, other->v_);
  swap(w_, other->w_);
  swap(p_, other->p_);
  swap(q_, other->q_);
  swap(r_, other->r_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DirectControlCommand::GetMetadata() const {
  protobuf_src_2fproto_2fgoby_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fproto_2fgoby_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HelmStateCommand::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HelmStateCommand::kSourceFieldNumber;
const int HelmStateCommand::kDestinationFieldNumber;
const int HelmStateCommand::kTimeFieldNumber;
const int HelmStateCommand::kModeFieldNumber;
const int HelmStateCommand::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HelmStateCommand::HelmStateCommand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_src_2fproto_2fgoby_5fmsgs_2eproto::scc_info_HelmStateCommand.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:HelmStateCommand)
}
HelmStateCommand::HelmStateCommand(const HelmStateCommand& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&source_, &from.source_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&source_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:HelmStateCommand)
}

void HelmStateCommand::SharedCtor() {
  ::memset(&source_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&source_)) + sizeof(state_));
}

HelmStateCommand::~HelmStateCommand() {
  // @@protoc_insertion_point(destructor:HelmStateCommand)
  SharedDtor();
}

void HelmStateCommand::SharedDtor() {
}

void HelmStateCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* HelmStateCommand::descriptor() {
  ::protobuf_src_2fproto_2fgoby_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fproto_2fgoby_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HelmStateCommand& HelmStateCommand::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_src_2fproto_2fgoby_5fmsgs_2eproto::scc_info_HelmStateCommand.base);
  return *internal_default_instance();
}


void HelmStateCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:HelmStateCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    ::memset(&source_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&state_) -
        reinterpret_cast<char*>(&source_)) + sizeof(state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HelmStateCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:HelmStateCommand)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 source = 1 [(.dccl.field) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_source();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &source_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 destination = 2 [(.dccl.field) = {
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_destination();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &destination_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double time = 3 [(.dccl.field) = {
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .HelmStateCommand.Mode mode = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HelmStateCommand_Mode_IsValid(value)) {
            set_mode(static_cast< ::HelmStateCommand_Mode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .HelmStateCommand.HelmState state = 5 [(.dccl.field) = {
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HelmStateCommand_HelmState_IsValid(value)) {
            set_state(static_cast< ::HelmStateCommand_HelmState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:HelmStateCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:HelmStateCommand)
  return false;
#undef DO_
}

void HelmStateCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:HelmStateCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 source = 1 [(.dccl.field) = {
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->source(), output);
  }

  // required int32 destination = 2 [(.dccl.field) = {
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->destination(), output);
  }

  // optional double time = 3 [(.dccl.field) = {
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->time(), output);
  }

  // required .HelmStateCommand.Mode mode = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->mode(), output);
  }

  // optional .HelmStateCommand.HelmState state = 5 [(.dccl.field) = {
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->state(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:HelmStateCommand)
}

::google::protobuf::uint8* HelmStateCommand::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:HelmStateCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 source = 1 [(.dccl.field) = {
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->source(), target);
  }

  // required int32 destination = 2 [(.dccl.field) = {
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->destination(), target);
  }

  // optional double time = 3 [(.dccl.field) = {
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->time(), target);
  }

  // required .HelmStateCommand.Mode mode = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->mode(), target);
  }

  // optional .HelmStateCommand.HelmState state = 5 [(.dccl.field) = {
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->state(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HelmStateCommand)
  return target;
}

size_t HelmStateCommand::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:HelmStateCommand)
  size_t total_size = 0;

  if (has_source()) {
    // required int32 source = 1 [(.dccl.field) = {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->source());
  }

  if (has_destination()) {
    // required int32 destination = 2 [(.dccl.field) = {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->destination());
  }

  if (has_mode()) {
    // required .HelmStateCommand.Mode mode = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
  }

  return total_size;
}
size_t HelmStateCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HelmStateCommand)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000b) ^ 0x0000000b) == 0) {  // All required fields are present.
    // required int32 source = 1 [(.dccl.field) = {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->source());

    // required int32 destination = 2 [(.dccl.field) = {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->destination());

    // required .HelmStateCommand.Mode mode = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional double time = 3 [(.dccl.field) = {
  if (has_time()) {
    total_size += 1 + 8;
  }

  // optional .HelmStateCommand.HelmState state = 5 [(.dccl.field) = {
  if (has_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HelmStateCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HelmStateCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const HelmStateCommand* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HelmStateCommand>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HelmStateCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HelmStateCommand)
    MergeFrom(*source);
  }
}

void HelmStateCommand::MergeFrom(const HelmStateCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HelmStateCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      source_ = from.source_;
    }
    if (cached_has_bits & 0x00000002u) {
      destination_ = from.destination_;
    }
    if (cached_has_bits & 0x00000004u) {
      time_ = from.time_;
    }
    if (cached_has_bits & 0x00000008u) {
      mode_ = from.mode_;
    }
    if (cached_has_bits & 0x00000010u) {
      state_ = from.state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HelmStateCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HelmStateCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HelmStateCommand::CopyFrom(const HelmStateCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HelmStateCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HelmStateCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;
  return true;
}

void HelmStateCommand::Swap(HelmStateCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HelmStateCommand::InternalSwap(HelmStateCommand* other) {
  using std::swap;
  swap(source_, other->source_);
  swap(destination_, other->destination_);
  swap(time_, other->time_);
  swap(mode_, other->mode_);
  swap(state_, other->state_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata HelmStateCommand::GetMetadata() const {
  protobuf_src_2fproto_2fgoby_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fproto_2fgoby_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HelmStateResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HelmStateResponse::kSourceFieldNumber;
const int HelmStateResponse::kDestinationFieldNumber;
const int HelmStateResponse::kTimeFieldNumber;
const int HelmStateResponse::kHelmStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HelmStateResponse::HelmStateResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_src_2fproto_2fgoby_5fmsgs_2eproto::scc_info_HelmStateResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:HelmStateResponse)
}
HelmStateResponse::HelmStateResponse(const HelmStateResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&source_, &from.source_,
    static_cast<size_t>(reinterpret_cast<char*>(&helm_state_) -
    reinterpret_cast<char*>(&source_)) + sizeof(helm_state_));
  // @@protoc_insertion_point(copy_constructor:HelmStateResponse)
}

void HelmStateResponse::SharedCtor() {
  ::memset(&source_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&helm_state_) -
      reinterpret_cast<char*>(&source_)) + sizeof(helm_state_));
}

HelmStateResponse::~HelmStateResponse() {
  // @@protoc_insertion_point(destructor:HelmStateResponse)
  SharedDtor();
}

void HelmStateResponse::SharedDtor() {
}

void HelmStateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* HelmStateResponse::descriptor() {
  ::protobuf_src_2fproto_2fgoby_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fproto_2fgoby_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HelmStateResponse& HelmStateResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_src_2fproto_2fgoby_5fmsgs_2eproto::scc_info_HelmStateResponse.base);
  return *internal_default_instance();
}


void HelmStateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:HelmStateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&source_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&helm_state_) -
        reinterpret_cast<char*>(&source_)) + sizeof(helm_state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HelmStateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:HelmStateResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 source = 1 [(.dccl.field) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_source();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &source_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 destination = 2 [(.dccl.field) = {
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_destination();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &destination_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double time = 3 [(.dccl.field) = {
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .HelmStateResponse.HelmState helm_state = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HelmStateResponse_HelmState_IsValid(value)) {
            set_helm_state(static_cast< ::HelmStateResponse_HelmState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:HelmStateResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:HelmStateResponse)
  return false;
#undef DO_
}

void HelmStateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:HelmStateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 source = 1 [(.dccl.field) = {
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->source(), output);
  }

  // required int32 destination = 2 [(.dccl.field) = {
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->destination(), output);
  }

  // optional double time = 3 [(.dccl.field) = {
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->time(), output);
  }

  // required .HelmStateResponse.HelmState helm_state = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->helm_state(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:HelmStateResponse)
}

::google::protobuf::uint8* HelmStateResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:HelmStateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 source = 1 [(.dccl.field) = {
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->source(), target);
  }

  // required int32 destination = 2 [(.dccl.field) = {
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->destination(), target);
  }

  // optional double time = 3 [(.dccl.field) = {
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->time(), target);
  }

  // required .HelmStateResponse.HelmState helm_state = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->helm_state(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HelmStateResponse)
  return target;
}

size_t HelmStateResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:HelmStateResponse)
  size_t total_size = 0;

  if (has_source()) {
    // required int32 source = 1 [(.dccl.field) = {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->source());
  }

  if (has_destination()) {
    // required int32 destination = 2 [(.dccl.field) = {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->destination());
  }

  if (has_helm_state()) {
    // required .HelmStateResponse.HelmState helm_state = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->helm_state());
  }

  return total_size;
}
size_t HelmStateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HelmStateResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000b) ^ 0x0000000b) == 0) {  // All required fields are present.
    // required int32 source = 1 [(.dccl.field) = {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->source());

    // required int32 destination = 2 [(.dccl.field) = {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->destination());

    // required .HelmStateResponse.HelmState helm_state = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->helm_state());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional double time = 3 [(.dccl.field) = {
  if (has_time()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HelmStateResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HelmStateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const HelmStateResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HelmStateResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HelmStateResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HelmStateResponse)
    MergeFrom(*source);
  }
}

void HelmStateResponse::MergeFrom(const HelmStateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HelmStateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      source_ = from.source_;
    }
    if (cached_has_bits & 0x00000002u) {
      destination_ = from.destination_;
    }
    if (cached_has_bits & 0x00000004u) {
      time_ = from.time_;
    }
    if (cached_has_bits & 0x00000008u) {
      helm_state_ = from.helm_state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HelmStateResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HelmStateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HelmStateResponse::CopyFrom(const HelmStateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HelmStateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HelmStateResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;
  return true;
}

void HelmStateResponse::Swap(HelmStateResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HelmStateResponse::InternalSwap(HelmStateResponse* other) {
  using std::swap;
  swap(source_, other->source_);
  swap(destination_, other->destination_);
  swap(time_, other->time_);
  swap(helm_state_, other->helm_state_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata HelmStateResponse::GetMetadata() const {
  protobuf_src_2fproto_2fgoby_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fproto_2fgoby_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void WaypointCommand::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WaypointCommand::kSourceFieldNumber;
const int WaypointCommand::kDestinationFieldNumber;
const int WaypointCommand::kTimeFieldNumber;
const int WaypointCommand::kModeFieldNumber;
const int WaypointCommand::kWptNumFieldNumber;
const int WaypointCommand::kLatitudeFieldNumber;
const int WaypointCommand::kLongitudeFieldNumber;
const int WaypointCommand::kZFieldNumber;
const int WaypointCommand::kEndFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WaypointCommand::WaypointCommand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_src_2fproto_2fgoby_5fmsgs_2eproto::scc_info_WaypointCommand.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:WaypointCommand)
}
WaypointCommand::WaypointCommand(const WaypointCommand& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      wpt_num_(from.wpt_num_),
      latitude_(from.latitude_),
      longitude_(from.longitude_),
      z_(from.z_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&source_, &from.source_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&source_)) + sizeof(end_));
  // @@protoc_insertion_point(copy_constructor:WaypointCommand)
}

void WaypointCommand::SharedCtor() {
  ::memset(&source_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_) -
      reinterpret_cast<char*>(&source_)) + sizeof(end_));
}

WaypointCommand::~WaypointCommand() {
  // @@protoc_insertion_point(destructor:WaypointCommand)
  SharedDtor();
}

void WaypointCommand::SharedDtor() {
}

void WaypointCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* WaypointCommand::descriptor() {
  ::protobuf_src_2fproto_2fgoby_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fproto_2fgoby_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WaypointCommand& WaypointCommand::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_src_2fproto_2fgoby_5fmsgs_2eproto::scc_info_WaypointCommand.base);
  return *internal_default_instance();
}


void WaypointCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:WaypointCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  wpt_num_.Clear();
  latitude_.Clear();
  longitude_.Clear();
  z_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    ::memset(&source_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&end_) -
        reinterpret_cast<char*>(&source_)) + sizeof(end_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool WaypointCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WaypointCommand)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 source = 1 [(.dccl.field) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_source();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &source_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 destination = 2 [(.dccl.field) = {
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_destination();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &destination_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double time = 3 [(.dccl.field) = {
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .WaypointCommand.Mode mode = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::WaypointCommand_Mode_IsValid(value)) {
            set_mode(static_cast< ::WaypointCommand_Mode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 wpt_num = 5 [(.dccl.field) = {
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40u, input, this->mutable_wpt_num())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_wpt_num())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double latitude = 6 [(.dccl.field) = {
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 49u, input, this->mutable_latitude())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_latitude())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double longitude = 7 [(.dccl.field) = {
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 57u, input, this->mutable_longitude())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_longitude())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float z = 8 [(.dccl.field) = {
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 69u, input, this->mutable_z())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_z())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool end = 9 [(.dccl.field) = {
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_end();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WaypointCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WaypointCommand)
  return false;
#undef DO_
}

void WaypointCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WaypointCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 source = 1 [(.dccl.field) = {
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->source(), output);
  }

  // required int32 destination = 2 [(.dccl.field) = {
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->destination(), output);
  }

  // optional double time = 3 [(.dccl.field) = {
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->time(), output);
  }

  // required .WaypointCommand.Mode mode = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->mode(), output);
  }

  // repeated int32 wpt_num = 5 [(.dccl.field) = {
  for (int i = 0, n = this->wpt_num_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->wpt_num(i), output);
  }

  // repeated double latitude = 6 [(.dccl.field) = {
  for (int i = 0, n = this->latitude_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      6, this->latitude(i), output);
  }

  // repeated double longitude = 7 [(.dccl.field) = {
  for (int i = 0, n = this->longitude_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      7, this->longitude(i), output);
  }

  // repeated float z = 8 [(.dccl.field) = {
  for (int i = 0, n = this->z_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      8, this->z(i), output);
  }

  // optional bool end = 9 [(.dccl.field) = {
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->end(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WaypointCommand)
}

::google::protobuf::uint8* WaypointCommand::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WaypointCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 source = 1 [(.dccl.field) = {
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->source(), target);
  }

  // required int32 destination = 2 [(.dccl.field) = {
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->destination(), target);
  }

  // optional double time = 3 [(.dccl.field) = {
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->time(), target);
  }

  // required .WaypointCommand.Mode mode = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->mode(), target);
  }

  // repeated int32 wpt_num = 5 [(.dccl.field) = {
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(5, this->wpt_num_, target);

  // repeated double latitude = 6 [(.dccl.field) = {
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(6, this->latitude_, target);

  // repeated double longitude = 7 [(.dccl.field) = {
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(7, this->longitude_, target);

  // repeated float z = 8 [(.dccl.field) = {
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(8, this->z_, target);

  // optional bool end = 9 [(.dccl.field) = {
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->end(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WaypointCommand)
  return target;
}

size_t WaypointCommand::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:WaypointCommand)
  size_t total_size = 0;

  if (has_source()) {
    // required int32 source = 1 [(.dccl.field) = {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->source());
  }

  if (has_destination()) {
    // required int32 destination = 2 [(.dccl.field) = {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->destination());
  }

  if (has_mode()) {
    // required .WaypointCommand.Mode mode = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
  }

  return total_size;
}
size_t WaypointCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WaypointCommand)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000b) ^ 0x0000000b) == 0) {  // All required fields are present.
    // required int32 source = 1 [(.dccl.field) = {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->source());

    // required int32 destination = 2 [(.dccl.field) = {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->destination());

    // required .WaypointCommand.Mode mode = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated int32 wpt_num = 5 [(.dccl.field) = {
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->wpt_num_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->wpt_num_size());
    total_size += data_size;
  }

  // repeated double latitude = 6 [(.dccl.field) = {
  {
    unsigned int count = static_cast<unsigned int>(this->latitude_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->latitude_size());
    total_size += data_size;
  }

  // repeated double longitude = 7 [(.dccl.field) = {
  {
    unsigned int count = static_cast<unsigned int>(this->longitude_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->longitude_size());
    total_size += data_size;
  }

  // repeated float z = 8 [(.dccl.field) = {
  {
    unsigned int count = static_cast<unsigned int>(this->z_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->z_size());
    total_size += data_size;
  }

  // optional double time = 3 [(.dccl.field) = {
  if (has_time()) {
    total_size += 1 + 8;
  }

  // optional bool end = 9 [(.dccl.field) = {
  if (has_end()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WaypointCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WaypointCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const WaypointCommand* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WaypointCommand>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WaypointCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WaypointCommand)
    MergeFrom(*source);
  }
}

void WaypointCommand::MergeFrom(const WaypointCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WaypointCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  wpt_num_.MergeFrom(from.wpt_num_);
  latitude_.MergeFrom(from.latitude_);
  longitude_.MergeFrom(from.longitude_);
  z_.MergeFrom(from.z_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      source_ = from.source_;
    }
    if (cached_has_bits & 0x00000002u) {
      destination_ = from.destination_;
    }
    if (cached_has_bits & 0x00000004u) {
      time_ = from.time_;
    }
    if (cached_has_bits & 0x00000008u) {
      mode_ = from.mode_;
    }
    if (cached_has_bits & 0x00000010u) {
      end_ = from.end_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void WaypointCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WaypointCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WaypointCommand::CopyFrom(const WaypointCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WaypointCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WaypointCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;
  return true;
}

void WaypointCommand::Swap(WaypointCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WaypointCommand::InternalSwap(WaypointCommand* other) {
  using std::swap;
  wpt_num_.InternalSwap(&other->wpt_num_);
  latitude_.InternalSwap(&other->latitude_);
  longitude_.InternalSwap(&other->longitude_);
  z_.InternalSwap(&other->z_);
  swap(source_, other->source_);
  swap(destination_, other->destination_);
  swap(time_, other->time_);
  swap(mode_, other->mode_);
  swap(end_, other->end_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata WaypointCommand::GetMetadata() const {
  protobuf_src_2fproto_2fgoby_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fproto_2fgoby_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MultiWaypointResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MultiWaypointResponse::kSourceFieldNumber;
const int MultiWaypointResponse::kDestinationFieldNumber;
const int MultiWaypointResponse::kTimeFieldNumber;
const int MultiWaypointResponse::kWptNumFieldNumber;
const int MultiWaypointResponse::kLatitudeFieldNumber;
const int MultiWaypointResponse::kLongitudeFieldNumber;
const int MultiWaypointResponse::kZFieldNumber;
const int MultiWaypointResponse::kEndFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MultiWaypointResponse::MultiWaypointResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_src_2fproto_2fgoby_5fmsgs_2eproto::scc_info_MultiWaypointResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MultiWaypointResponse)
}
MultiWaypointResponse::MultiWaypointResponse(const MultiWaypointResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      wpt_num_(from.wpt_num_),
      latitude_(from.latitude_),
      longitude_(from.longitude_),
      z_(from.z_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&source_, &from.source_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&source_)) + sizeof(end_));
  // @@protoc_insertion_point(copy_constructor:MultiWaypointResponse)
}

void MultiWaypointResponse::SharedCtor() {
  ::memset(&source_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_) -
      reinterpret_cast<char*>(&source_)) + sizeof(end_));
}

MultiWaypointResponse::~MultiWaypointResponse() {
  // @@protoc_insertion_point(destructor:MultiWaypointResponse)
  SharedDtor();
}

void MultiWaypointResponse::SharedDtor() {
}

void MultiWaypointResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MultiWaypointResponse::descriptor() {
  ::protobuf_src_2fproto_2fgoby_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fproto_2fgoby_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MultiWaypointResponse& MultiWaypointResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_src_2fproto_2fgoby_5fmsgs_2eproto::scc_info_MultiWaypointResponse.base);
  return *internal_default_instance();
}


void MultiWaypointResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:MultiWaypointResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  wpt_num_.Clear();
  latitude_.Clear();
  longitude_.Clear();
  z_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&source_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&end_) -
        reinterpret_cast<char*>(&source_)) + sizeof(end_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MultiWaypointResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MultiWaypointResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 source = 1 [(.dccl.field) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_source();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &source_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 destination = 2 [(.dccl.field) = {
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_destination();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &destination_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double time = 3 [(.dccl.field) = {
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 wpt_num = 4 [(.dccl.field) = {
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32u, input, this->mutable_wpt_num())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_wpt_num())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double latitude = 5 [(.dccl.field) = {
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 41u, input, this->mutable_latitude())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_latitude())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double longitude = 6 [(.dccl.field) = {
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 49u, input, this->mutable_longitude())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_longitude())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float z = 7 [(.dccl.field) = {
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 61u, input, this->mutable_z())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_z())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool end = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_end();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MultiWaypointResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MultiWaypointResponse)
  return false;
#undef DO_
}

void MultiWaypointResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MultiWaypointResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 source = 1 [(.dccl.field) = {
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->source(), output);
  }

  // required int32 destination = 2 [(.dccl.field) = {
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->destination(), output);
  }

  // required double time = 3 [(.dccl.field) = {
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->time(), output);
  }

  // repeated int32 wpt_num = 4 [(.dccl.field) = {
  for (int i = 0, n = this->wpt_num_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->wpt_num(i), output);
  }

  // repeated double latitude = 5 [(.dccl.field) = {
  for (int i = 0, n = this->latitude_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      5, this->latitude(i), output);
  }

  // repeated double longitude = 6 [(.dccl.field) = {
  for (int i = 0, n = this->longitude_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      6, this->longitude(i), output);
  }

  // repeated float z = 7 [(.dccl.field) = {
  for (int i = 0, n = this->z_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      7, this->z(i), output);
  }

  // optional bool end = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->end(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MultiWaypointResponse)
}

::google::protobuf::uint8* MultiWaypointResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MultiWaypointResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 source = 1 [(.dccl.field) = {
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->source(), target);
  }

  // required int32 destination = 2 [(.dccl.field) = {
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->destination(), target);
  }

  // required double time = 3 [(.dccl.field) = {
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->time(), target);
  }

  // repeated int32 wpt_num = 4 [(.dccl.field) = {
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(4, this->wpt_num_, target);

  // repeated double latitude = 5 [(.dccl.field) = {
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(5, this->latitude_, target);

  // repeated double longitude = 6 [(.dccl.field) = {
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(6, this->longitude_, target);

  // repeated float z = 7 [(.dccl.field) = {
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(7, this->z_, target);

  // optional bool end = 8;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->end(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MultiWaypointResponse)
  return target;
}

size_t MultiWaypointResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:MultiWaypointResponse)
  size_t total_size = 0;

  if (has_source()) {
    // required int32 source = 1 [(.dccl.field) = {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->source());
  }

  if (has_destination()) {
    // required int32 destination = 2 [(.dccl.field) = {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->destination());
  }

  if (has_time()) {
    // required double time = 3 [(.dccl.field) = {
    total_size += 1 + 8;
  }

  return total_size;
}
size_t MultiWaypointResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MultiWaypointResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 source = 1 [(.dccl.field) = {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->source());

    // required int32 destination = 2 [(.dccl.field) = {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->destination());

    // required double time = 3 [(.dccl.field) = {
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated int32 wpt_num = 4 [(.dccl.field) = {
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->wpt_num_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->wpt_num_size());
    total_size += data_size;
  }

  // repeated double latitude = 5 [(.dccl.field) = {
  {
    unsigned int count = static_cast<unsigned int>(this->latitude_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->latitude_size());
    total_size += data_size;
  }

  // repeated double longitude = 6 [(.dccl.field) = {
  {
    unsigned int count = static_cast<unsigned int>(this->longitude_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->longitude_size());
    total_size += data_size;
  }

  // repeated float z = 7 [(.dccl.field) = {
  {
    unsigned int count = static_cast<unsigned int>(this->z_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->z_size());
    total_size += data_size;
  }

  // optional bool end = 8;
  if (has_end()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiWaypointResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MultiWaypointResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiWaypointResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MultiWaypointResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MultiWaypointResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MultiWaypointResponse)
    MergeFrom(*source);
  }
}

void MultiWaypointResponse::MergeFrom(const MultiWaypointResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MultiWaypointResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  wpt_num_.MergeFrom(from.wpt_num_);
  latitude_.MergeFrom(from.latitude_);
  longitude_.MergeFrom(from.longitude_);
  z_.MergeFrom(from.z_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      source_ = from.source_;
    }
    if (cached_has_bits & 0x00000002u) {
      destination_ = from.destination_;
    }
    if (cached_has_bits & 0x00000004u) {
      time_ = from.time_;
    }
    if (cached_has_bits & 0x00000008u) {
      end_ = from.end_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MultiWaypointResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MultiWaypointResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiWaypointResponse::CopyFrom(const MultiWaypointResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MultiWaypointResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiWaypointResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void MultiWaypointResponse::Swap(MultiWaypointResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MultiWaypointResponse::InternalSwap(MultiWaypointResponse* other) {
  using std::swap;
  wpt_num_.InternalSwap(&other->wpt_num_);
  latitude_.InternalSwap(&other->latitude_);
  longitude_.InternalSwap(&other->longitude_);
  z_.InternalSwap(&other->z_);
  swap(source_, other->source_);
  swap(destination_, other->destination_);
  swap(time_, other->time_);
  swap(end_, other->end_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MultiWaypointResponse::GetMetadata() const {
  protobuf_src_2fproto_2fgoby_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fproto_2fgoby_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MultiWaypointCommand::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MultiWaypointCommand::kSourceFieldNumber;
const int MultiWaypointCommand::kDestinationFieldNumber;
const int MultiWaypointCommand::kTimeFieldNumber;
const int MultiWaypointCommand::kModeFieldNumber;
const int MultiWaypointCommand::kWptNumFieldNumber;
const int MultiWaypointCommand::kXFieldNumber;
const int MultiWaypointCommand::kYFieldNumber;
const int MultiWaypointCommand::kZFieldNumber;
const int MultiWaypointCommand::kEndFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MultiWaypointCommand::MultiWaypointCommand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_src_2fproto_2fgoby_5fmsgs_2eproto::scc_info_MultiWaypointCommand.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MultiWaypointCommand)
}
MultiWaypointCommand::MultiWaypointCommand(const MultiWaypointCommand& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      wpt_num_(from.wpt_num_),
      x_(from.x_),
      y_(from.y_),
      z_(from.z_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&source_, &from.source_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&source_)) + sizeof(end_));
  // @@protoc_insertion_point(copy_constructor:MultiWaypointCommand)
}

void MultiWaypointCommand::SharedCtor() {
  ::memset(&source_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_) -
      reinterpret_cast<char*>(&source_)) + sizeof(end_));
}

MultiWaypointCommand::~MultiWaypointCommand() {
  // @@protoc_insertion_point(destructor:MultiWaypointCommand)
  SharedDtor();
}

void MultiWaypointCommand::SharedDtor() {
}

void MultiWaypointCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MultiWaypointCommand::descriptor() {
  ::protobuf_src_2fproto_2fgoby_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fproto_2fgoby_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MultiWaypointCommand& MultiWaypointCommand::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_src_2fproto_2fgoby_5fmsgs_2eproto::scc_info_MultiWaypointCommand.base);
  return *internal_default_instance();
}


void MultiWaypointCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:MultiWaypointCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  wpt_num_.Clear();
  x_.Clear();
  y_.Clear();
  z_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    ::memset(&source_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&end_) -
        reinterpret_cast<char*>(&source_)) + sizeof(end_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MultiWaypointCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MultiWaypointCommand)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 source = 1 [(.dccl.field) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_source();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &source_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 destination = 2 [(.dccl.field) = {
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_destination();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &destination_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double time = 3 [(.dccl.field) = {
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .MultiWaypointCommand.Mode mode = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MultiWaypointCommand_Mode_IsValid(value)) {
            set_mode(static_cast< ::MultiWaypointCommand_Mode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 wpt_num = 5 [(.dccl.field) = {
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40u, input, this->mutable_wpt_num())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_wpt_num())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float x = 6 [(.dccl.field) = {
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 53u, input, this->mutable_x())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_x())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float y = 7 [(.dccl.field) = {
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 61u, input, this->mutable_y())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_y())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float z = 8 [(.dccl.field) = {
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 69u, input, this->mutable_z())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_z())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool end = 9 [(.dccl.field) = {
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_end();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MultiWaypointCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MultiWaypointCommand)
  return false;
#undef DO_
}

void MultiWaypointCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MultiWaypointCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 source = 1 [(.dccl.field) = {
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->source(), output);
  }

  // required int32 destination = 2 [(.dccl.field) = {
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->destination(), output);
  }

  // optional double time = 3 [(.dccl.field) = {
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->time(), output);
  }

  // required .MultiWaypointCommand.Mode mode = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->mode(), output);
  }

  // repeated int32 wpt_num = 5 [(.dccl.field) = {
  for (int i = 0, n = this->wpt_num_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->wpt_num(i), output);
  }

  // repeated float x = 6 [(.dccl.field) = {
  for (int i = 0, n = this->x_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      6, this->x(i), output);
  }

  // repeated float y = 7 [(.dccl.field) = {
  for (int i = 0, n = this->y_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      7, this->y(i), output);
  }

  // repeated float z = 8 [(.dccl.field) = {
  for (int i = 0, n = this->z_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      8, this->z(i), output);
  }

  // optional bool end = 9 [(.dccl.field) = {
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->end(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MultiWaypointCommand)
}

::google::protobuf::uint8* MultiWaypointCommand::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MultiWaypointCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 source = 1 [(.dccl.field) = {
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->source(), target);
  }

  // required int32 destination = 2 [(.dccl.field) = {
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->destination(), target);
  }

  // optional double time = 3 [(.dccl.field) = {
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->time(), target);
  }

  // required .MultiWaypointCommand.Mode mode = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->mode(), target);
  }

  // repeated int32 wpt_num = 5 [(.dccl.field) = {
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(5, this->wpt_num_, target);

  // repeated float x = 6 [(.dccl.field) = {
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(6, this->x_, target);

  // repeated float y = 7 [(.dccl.field) = {
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(7, this->y_, target);

  // repeated float z = 8 [(.dccl.field) = {
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(8, this->z_, target);

  // optional bool end = 9 [(.dccl.field) = {
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->end(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MultiWaypointCommand)
  return target;
}

size_t MultiWaypointCommand::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:MultiWaypointCommand)
  size_t total_size = 0;

  if (has_source()) {
    // required int32 source = 1 [(.dccl.field) = {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->source());
  }

  if (has_destination()) {
    // required int32 destination = 2 [(.dccl.field) = {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->destination());
  }

  if (has_mode()) {
    // required .MultiWaypointCommand.Mode mode = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
  }

  return total_size;
}
size_t MultiWaypointCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MultiWaypointCommand)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000b) ^ 0x0000000b) == 0) {  // All required fields are present.
    // required int32 source = 1 [(.dccl.field) = {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->source());

    // required int32 destination = 2 [(.dccl.field) = {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->destination());

    // required .MultiWaypointCommand.Mode mode = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated int32 wpt_num = 5 [(.dccl.field) = {
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->wpt_num_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->wpt_num_size());
    total_size += data_size;
  }

  // repeated float x = 6 [(.dccl.field) = {
  {
    unsigned int count = static_cast<unsigned int>(this->x_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->x_size());
    total_size += data_size;
  }

  // repeated float y = 7 [(.dccl.field) = {
  {
    unsigned int count = static_cast<unsigned int>(this->y_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->y_size());
    total_size += data_size;
  }

  // repeated float z = 8 [(.dccl.field) = {
  {
    unsigned int count = static_cast<unsigned int>(this->z_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->z_size());
    total_size += data_size;
  }

  // optional double time = 3 [(.dccl.field) = {
  if (has_time()) {
    total_size += 1 + 8;
  }

  // optional bool end = 9 [(.dccl.field) = {
  if (has_end()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiWaypointCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MultiWaypointCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiWaypointCommand* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MultiWaypointCommand>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MultiWaypointCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MultiWaypointCommand)
    MergeFrom(*source);
  }
}

void MultiWaypointCommand::MergeFrom(const MultiWaypointCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MultiWaypointCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  wpt_num_.MergeFrom(from.wpt_num_);
  x_.MergeFrom(from.x_);
  y_.MergeFrom(from.y_);
  z_.MergeFrom(from.z_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      source_ = from.source_;
    }
    if (cached_has_bits & 0x00000002u) {
      destination_ = from.destination_;
    }
    if (cached_has_bits & 0x00000004u) {
      time_ = from.time_;
    }
    if (cached_has_bits & 0x00000008u) {
      mode_ = from.mode_;
    }
    if (cached_has_bits & 0x00000010u) {
      end_ = from.end_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MultiWaypointCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MultiWaypointCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiWaypointCommand::CopyFrom(const MultiWaypointCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MultiWaypointCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiWaypointCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;
  return true;
}

void MultiWaypointCommand::Swap(MultiWaypointCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MultiWaypointCommand::InternalSwap(MultiWaypointCommand* other) {
  using std::swap;
  wpt_num_.InternalSwap(&other->wpt_num_);
  x_.InternalSwap(&other->x_);
  y_.InternalSwap(&other->y_);
  z_.InternalSwap(&other->z_);
  swap(source_, other->source_);
  swap(destination_, other->destination_);
  swap(time_, other->time_);
  swap(mode_, other->mode_);
  swap(end_, other->end_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MultiWaypointCommand::GetMetadata() const {
  protobuf_src_2fproto_2fgoby_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fproto_2fgoby_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ExecuteWaypoints::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExecuteWaypoints::kSourceFieldNumber;
const int ExecuteWaypoints::kDestinationFieldNumber;
const int ExecuteWaypoints::kTimeFieldNumber;
const int ExecuteWaypoints::kModeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExecuteWaypoints::ExecuteWaypoints()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_src_2fproto_2fgoby_5fmsgs_2eproto::scc_info_ExecuteWaypoints.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ExecuteWaypoints)
}
ExecuteWaypoints::ExecuteWaypoints(const ExecuteWaypoints& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&source_, &from.source_,
    static_cast<size_t>(reinterpret_cast<char*>(&mode_) -
    reinterpret_cast<char*>(&source_)) + sizeof(mode_));
  // @@protoc_insertion_point(copy_constructor:ExecuteWaypoints)
}

void ExecuteWaypoints::SharedCtor() {
  ::memset(&source_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mode_) -
      reinterpret_cast<char*>(&source_)) + sizeof(mode_));
}

ExecuteWaypoints::~ExecuteWaypoints() {
  // @@protoc_insertion_point(destructor:ExecuteWaypoints)
  SharedDtor();
}

void ExecuteWaypoints::SharedDtor() {
}

void ExecuteWaypoints::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ExecuteWaypoints::descriptor() {
  ::protobuf_src_2fproto_2fgoby_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fproto_2fgoby_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ExecuteWaypoints& ExecuteWaypoints::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_src_2fproto_2fgoby_5fmsgs_2eproto::scc_info_ExecuteWaypoints.base);
  return *internal_default_instance();
}


void ExecuteWaypoints::Clear() {
// @@protoc_insertion_point(message_clear_start:ExecuteWaypoints)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&source_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mode_) -
        reinterpret_cast<char*>(&source_)) + sizeof(mode_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ExecuteWaypoints::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ExecuteWaypoints)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 source = 1 [(.dccl.field) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_source();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &source_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 destination = 2 [(.dccl.field) = {
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_destination();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &destination_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double time = 3 [(.dccl.field) = {
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ExecuteWaypoints.ExecuteMode mode = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ExecuteWaypoints_ExecuteMode_IsValid(value)) {
            set_mode(static_cast< ::ExecuteWaypoints_ExecuteMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ExecuteWaypoints)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ExecuteWaypoints)
  return false;
#undef DO_
}

void ExecuteWaypoints::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ExecuteWaypoints)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 source = 1 [(.dccl.field) = {
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->source(), output);
  }

  // required int32 destination = 2 [(.dccl.field) = {
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->destination(), output);
  }

  // optional double time = 3 [(.dccl.field) = {
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->time(), output);
  }

  // required .ExecuteWaypoints.ExecuteMode mode = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->mode(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ExecuteWaypoints)
}

::google::protobuf::uint8* ExecuteWaypoints::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ExecuteWaypoints)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 source = 1 [(.dccl.field) = {
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->source(), target);
  }

  // required int32 destination = 2 [(.dccl.field) = {
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->destination(), target);
  }

  // optional double time = 3 [(.dccl.field) = {
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->time(), target);
  }

  // required .ExecuteWaypoints.ExecuteMode mode = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->mode(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ExecuteWaypoints)
  return target;
}

size_t ExecuteWaypoints::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ExecuteWaypoints)
  size_t total_size = 0;

  if (has_source()) {
    // required int32 source = 1 [(.dccl.field) = {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->source());
  }

  if (has_destination()) {
    // required int32 destination = 2 [(.dccl.field) = {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->destination());
  }

  if (has_mode()) {
    // required .ExecuteWaypoints.ExecuteMode mode = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
  }

  return total_size;
}
size_t ExecuteWaypoints::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ExecuteWaypoints)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000b) ^ 0x0000000b) == 0) {  // All required fields are present.
    // required int32 source = 1 [(.dccl.field) = {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->source());

    // required int32 destination = 2 [(.dccl.field) = {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->destination());

    // required .ExecuteWaypoints.ExecuteMode mode = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional double time = 3 [(.dccl.field) = {
  if (has_time()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExecuteWaypoints::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ExecuteWaypoints)
  GOOGLE_DCHECK_NE(&from, this);
  const ExecuteWaypoints* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ExecuteWaypoints>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ExecuteWaypoints)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ExecuteWaypoints)
    MergeFrom(*source);
  }
}

void ExecuteWaypoints::MergeFrom(const ExecuteWaypoints& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ExecuteWaypoints)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      source_ = from.source_;
    }
    if (cached_has_bits & 0x00000002u) {
      destination_ = from.destination_;
    }
    if (cached_has_bits & 0x00000004u) {
      time_ = from.time_;
    }
    if (cached_has_bits & 0x00000008u) {
      mode_ = from.mode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ExecuteWaypoints::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ExecuteWaypoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecuteWaypoints::CopyFrom(const ExecuteWaypoints& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ExecuteWaypoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecuteWaypoints::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;
  return true;
}

void ExecuteWaypoints::Swap(ExecuteWaypoints* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExecuteWaypoints::InternalSwap(ExecuteWaypoints* other) {
  using std::swap;
  swap(source_, other->source_);
  swap(destination_, other->destination_);
  swap(time_, other->time_);
  swap(mode_, other->mode_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ExecuteWaypoints::GetMetadata() const {
  protobuf_src_2fproto_2fgoby_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fproto_2fgoby_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::PoseCommand* Arena::CreateMaybeMessage< ::PoseCommand >(Arena* arena) {
  return Arena::CreateInternal< ::PoseCommand >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::PoseResponse* Arena::CreateMaybeMessage< ::PoseResponse >(Arena* arena) {
  return Arena::CreateInternal< ::PoseResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::PowerCommand* Arena::CreateMaybeMessage< ::PowerCommand >(Arena* arena) {
  return Arena::CreateInternal< ::PowerCommand >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::PowerResponse* Arena::CreateMaybeMessage< ::PowerResponse >(Arena* arena) {
  return Arena::CreateInternal< ::PowerResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::RelativePoseCommand* Arena::CreateMaybeMessage< ::RelativePoseCommand >(Arena* arena) {
  return Arena::CreateInternal< ::RelativePoseCommand >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::RelativePoseResponse* Arena::CreateMaybeMessage< ::RelativePoseResponse >(Arena* arena) {
  return Arena::CreateInternal< ::RelativePoseResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ControllerStateCommand* Arena::CreateMaybeMessage< ::ControllerStateCommand >(Arena* arena) {
  return Arena::CreateInternal< ::ControllerStateCommand >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ControllerStateResponse* Arena::CreateMaybeMessage< ::ControllerStateResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ControllerStateResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DirectControlCommand* Arena::CreateMaybeMessage< ::DirectControlCommand >(Arena* arena) {
  return Arena::CreateInternal< ::DirectControlCommand >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::HelmStateCommand* Arena::CreateMaybeMessage< ::HelmStateCommand >(Arena* arena) {
  return Arena::CreateInternal< ::HelmStateCommand >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::HelmStateResponse* Arena::CreateMaybeMessage< ::HelmStateResponse >(Arena* arena) {
  return Arena::CreateInternal< ::HelmStateResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::WaypointCommand* Arena::CreateMaybeMessage< ::WaypointCommand >(Arena* arena) {
  return Arena::CreateInternal< ::WaypointCommand >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MultiWaypointResponse* Arena::CreateMaybeMessage< ::MultiWaypointResponse >(Arena* arena) {
  return Arena::CreateInternal< ::MultiWaypointResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MultiWaypointCommand* Arena::CreateMaybeMessage< ::MultiWaypointCommand >(Arena* arena) {
  return Arena::CreateInternal< ::MultiWaypointCommand >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ExecuteWaypoints* Arena::CreateMaybeMessage< ::ExecuteWaypoints >(Arena* arena) {
  return Arena::CreateInternal< ::ExecuteWaypoints >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
